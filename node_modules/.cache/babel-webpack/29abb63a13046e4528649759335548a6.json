{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Use Existing WebDriver Driver Provider.\n *  It is responsible for setting up the account object, tearing it down, and\n *  setting up the driver correctly.\n */\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar http = require('selenium-webdriver/http');\n\nvar logger = new logger_1.Logger('useExistingWebDriver');\n\nvar UseExistingWebDriver = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(UseExistingWebDriver, _driverProvider_1$Dri);\n\n  var _super = _createSuper(UseExistingWebDriver);\n\n  function UseExistingWebDriver(config) {\n    _classCallCheck(this, UseExistingWebDriver);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  _createClass(UseExistingWebDriver, [{\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var defer = q.defer();\n      this.config_.seleniumWebDriver.getSession().then(function (session) {\n        logger.info('Using session id - ' + session.getId());\n        return defer.resolve();\n      });\n      return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var newDriver = this.config_.seleniumWebDriver;\n      this.drivers_.push(newDriver);\n      return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"quitDriver\",\n    value: function quitDriver() {\n      return selenium_webdriver_1.promise.when(undefined);\n    }\n  }]);\n\n  return UseExistingWebDriver;\n}(driverProvider_1.DriverProvider);\n\nexports.UseExistingWebDriver = UseExistingWebDriver;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/useExistingWebDriver.js"],"names":["Object","defineProperty","exports","value","q","require","selenium_webdriver_1","logger_1","driverProvider_1","http","logger","Logger","UseExistingWebDriver","config","defer","config_","seleniumWebDriver","getSession","then","session","info","getId","resolve","undefined","newDriver","drivers_","push","promise","when","DriverProvider"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,oBAAD,CAApC;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,kBAAD,CAAhC;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,yBAAD,CAApB;;AACA,IAAIK,MAAM,GAAG,IAAIH,QAAQ,CAACI,MAAb,CAAoB,sBAApB,CAAb;;IACMC,oB;;;;;AACF,gCAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACVA,MADU;AAEnB;AACD;AACJ;AACA;AACA;AACA;;;;;qCACqB;AACb,UAAMC,KAAK,GAAGV,CAAC,CAACU,KAAF,EAAd;AACA,WAAKC,OAAL,CAAaC,iBAAb,CAA+BC,UAA/B,GAA4CC,IAA5C,CAAiD,UAACC,OAAD,EAAa;AAC1DT,QAAAA,MAAM,CAACU,IAAP,CAAY,wBAAwBD,OAAO,CAACE,KAAR,EAApC;AACA,eAAOP,KAAK,CAACQ,OAAN,EAAP;AACH,OAHD;AAIA,aAAOlB,CAAC,CAACmB,SAAD,CAAR;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;mCACmB;AACX,UAAMC,SAAS,GAAG,KAAKT,OAAL,CAAaC,iBAA/B;AACA,WAAKS,QAAL,CAAcC,IAAd,CAAmBF,SAAnB;AACA,aAAOA,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;iCACiB;AACT,aAAOlB,oBAAoB,CAACqB,OAArB,CAA6BC,IAA7B,CAAkCL,SAAlC,CAAP;AACH;;;;EAnC8Bf,gBAAgB,CAACqB,c;;AAqCpD3B,OAAO,CAACU,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n *  This is an implementation of the Use Existing WebDriver Driver Provider.\n *  It is responsible for setting up the account object, tearing it down, and\n *  setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst http = require('selenium-webdriver/http');\nlet logger = new logger_1.Logger('useExistingWebDriver');\nclass UseExistingWebDriver extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        const defer = q.defer();\n        this.config_.seleniumWebDriver.getSession().then((session) => {\n            logger.info('Using session id - ' + session.getId());\n            return defer.resolve();\n        });\n        return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n    getNewDriver() {\n        const newDriver = this.config_.seleniumWebDriver;\n        this.drivers_.push(newDriver);\n        return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n    quitDriver() {\n        return selenium_webdriver_1.promise.when(undefined);\n    }\n}\nexports.UseExistingWebDriver = UseExistingWebDriver;\n//# sourceMappingURL=useExistingWebDriver.js.map"]},"metadata":{},"sourceType":"script"}