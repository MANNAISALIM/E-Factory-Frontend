{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar webdriver_commands_1 = require(\"./webdriver_commands\"); // Generate a random 8 character ID to avoid collisions.\n\n\nfunction getLogId() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n} // Super proprietary left pad implementation. Do not copy plzkthx.\n\n\nfunction leftPad(field) {\n  var fieldWidth = 6;\n  var padding = fieldWidth - field.length;\n\n  if (padding > 0) {\n    return ' '.repeat(padding) + field;\n  }\n\n  return field;\n}\n\nvar FINDERS = [webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements, webdriver_commands_1.CommandName.FindElementsFromElement];\nvar READERS = [webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute, webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect];\nvar PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\n\nvar WebDriverLogger = /*#__PURE__*/function () {\n  function WebDriverLogger() {\n    _classCallCheck(this, WebDriverLogger);\n\n    this.logName = \"webdriver_log_\".concat(getLogId(), \".txt\");\n  }\n  /**\n   * Start logging to the specified directory. Will create a file named\n   * 'webdriver_log_<process id>.txt'\n   *\n   * @param logDir The directory to create log files in.\n   */\n\n\n  _createClass(WebDriverLogger, [{\n    key: \"setLogDir\",\n    value: function setLogDir(logDir) {\n      this.logStream = fs.createWriteStream(path.join(logDir, this.logName), {\n        flags: 'a'\n      });\n    }\n    /**\n     * Logs a webdriver command to the log file.\n     *\n     * @param command The command to log.\n     */\n\n  }, {\n    key: \"logWebDriverCommand\",\n    value: function logWebDriverCommand(command) {\n      var _this = this;\n\n      if (!this.logStream) {\n        return;\n      }\n\n      var logLine;\n      logLine = \"\".concat(this.timestamp(), \" \");\n      var started = Date.now();\n      command.on('response', function () {\n        var done = Date.now();\n        var elapsed = leftPad(done - started + '');\n        logLine += \"| \".concat(elapsed, \"ms \");\n\n        if (command.getParam('sessionId')) {\n          var session = command.getParam('sessionId').slice(0, 6);\n          logLine += \"| \".concat(session, \" \");\n        } else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n          // Only for new session commands, the sessionId is in the response.\n          var _session = command.responseData['sessionId'].slice(0, 6);\n\n          logLine += \"| \".concat(_session, \" \");\n        }\n\n        if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n          logLine += \"| \".concat(command.url);\n        } else {\n          logLine += \"| \".concat(webdriver_commands_1.CommandName[command.commandName]);\n        }\n\n        if (command.commandName == webdriver_commands_1.CommandName.Go) {\n          logLine += ' ' + command.data['url'];\n        } else if (command.getParam('elementId')) {\n          logLine += \" (\".concat(command.getParam('elementId'), \")\");\n        }\n\n        logLine += '\\n';\n\n        _this.logStream.write(logLine);\n\n        _this.renderData(command);\n\n        _this.renderResponse(command);\n      });\n    }\n    /**\n     * Log an arbitrary event to the log file.\n     *\n     * @param msg The message to log.\n     * @param sessionId The session id associated with the event.\n     * @param elapsedMs How long the event took, in ms.\n     */\n\n  }, {\n    key: \"logEvent\",\n    value: function logEvent(msg, sessionId, elapsedMs) {\n      var elapsed = leftPad(elapsedMs.toString());\n      var logLine = \"\".concat(this.timestamp(), \" | \").concat(elapsed, \"ms | \").concat(sessionId.slice(0, 6), \" | \").concat(msg, \"\\n\");\n      this.logStream.write(logLine);\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(command) {\n      var dataLine = '';\n\n      if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n        dataLine = JSON.stringify(command.data['desiredCapabilities']);\n      } else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n        var value = command.data['value'].join('');\n        dataLine = \"Send: \".concat(value);\n      } else if (FINDERS.indexOf(command.commandName) !== -1) {\n        var using = command.data['using'];\n        var _value = command.data['value'];\n        dataLine = \"Using \".concat(using, \" '\").concat(_value, \"'\");\n      }\n\n      if (dataLine) {\n        this.logStream.write(PAD + dataLine + '\\n');\n      }\n    }\n  }, {\n    key: \"renderResponse\",\n    value: function renderResponse(command) {\n      var respLine = '';\n      var data = command.responseData;\n\n      if (data['status'] > 0) {\n        respLine = \"ERROR \".concat(data['status'], \": \").concat(data['value']['message']);\n      } else if (FINDERS.indexOf(command.commandName) !== -1) {\n        var els = command.responseData['value'];\n\n        if (!Array.isArray(els)) {\n          els = [els];\n        }\n\n        els = els.map(function (e) {\n          return e['ELEMENT'];\n        });\n        respLine = 'Elements: ' + els;\n      } else if (READERS.indexOf(command.commandName) !== -1) {\n        respLine = command.responseData['value'];\n\n        if (typeof respLine == 'object') {\n          respLine = JSON.stringify(respLine);\n        }\n      }\n\n      if (respLine) {\n        this.logStream.write(PAD + respLine + '\\n');\n      }\n    }\n  }, {\n    key: \"timestamp\",\n    value: function timestamp() {\n      var d = new Date();\n      var hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n      var minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n      var seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n      var millis = d.getMilliseconds().toString();\n      millis = '000'.slice(0, 3 - millis.length) + millis;\n      return \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds, \".\").concat(millis);\n    }\n  }]);\n\n  return WebDriverLogger;\n}();\n\nexports.WebDriverLogger = WebDriverLogger;","map":{"version":3,"sources":["../../lib/webdriver_logger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\n// Generate a random 8 character ID to avoid collisions.\nfunction getLogId() {\n    return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n}\n// Super proprietary left pad implementation. Do not copy plzkthx.\nfunction leftPad(field) {\n    const fieldWidth = 6;\n    let padding = fieldWidth - field.length;\n    if (padding > 0) {\n        return ' '.repeat(padding) + field;\n    }\n    return field;\n}\nconst FINDERS = [\n    webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements,\n    webdriver_commands_1.CommandName.FindElementsFromElement\n];\nconst READERS = [\n    webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute,\n    webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect\n];\nconst PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\nclass WebDriverLogger {\n    constructor() {\n        this.logName = `webdriver_log_${getLogId()}.txt`;\n    }\n    /**\n     * Start logging to the specified directory. Will create a file named\n     * 'webdriver_log_<process id>.txt'\n     *\n     * @param logDir The directory to create log files in.\n     */\n    setLogDir(logDir) {\n        this.logStream = fs.createWriteStream(path.join(logDir, this.logName), { flags: 'a' });\n    }\n    /**\n     * Logs a webdriver command to the log file.\n     *\n     * @param command The command to log.\n     */\n    logWebDriverCommand(command) {\n        if (!this.logStream) {\n            return;\n        }\n        let logLine;\n        logLine = `${this.timestamp()} `;\n        let started = Date.now();\n        command.on('response', () => {\n            let done = Date.now();\n            let elapsed = leftPad((done - started) + '');\n            logLine += `| ${elapsed}ms `;\n            if (command.getParam('sessionId')) {\n                let session = command.getParam('sessionId').slice(0, 6);\n                logLine += `| ${session} `;\n            }\n            else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n                // Only for new session commands, the sessionId is in the response.\n                let session = command.responseData['sessionId'].slice(0, 6);\n                logLine += `| ${session} `;\n            }\n            if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n                logLine += `| ${command.url}`;\n            }\n            else {\n                logLine += `| ${webdriver_commands_1.CommandName[command.commandName]}`;\n            }\n            if (command.commandName == webdriver_commands_1.CommandName.Go) {\n                logLine += ' ' + command.data['url'];\n            }\n            else if (command.getParam('elementId')) {\n                logLine += ` (${command.getParam('elementId')})`;\n            }\n            logLine += '\\n';\n            this.logStream.write(logLine);\n            this.renderData(command);\n            this.renderResponse(command);\n        });\n    }\n    /**\n     * Log an arbitrary event to the log file.\n     *\n     * @param msg The message to log.\n     * @param sessionId The session id associated with the event.\n     * @param elapsedMs How long the event took, in ms.\n     */\n    logEvent(msg, sessionId, elapsedMs) {\n        let elapsed = leftPad(elapsedMs.toString());\n        let logLine = `${this.timestamp()} | ${elapsed}ms | ${sessionId.slice(0, 6)} | ${msg}\\n`;\n        this.logStream.write(logLine);\n    }\n    renderData(command) {\n        let dataLine = '';\n        if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n            dataLine = JSON.stringify(command.data['desiredCapabilities']);\n        }\n        else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n            let value = command.data['value'].join('');\n            dataLine = `Send: ${value}`;\n        }\n        else if (FINDERS.indexOf(command.commandName) !== -1) {\n            const using = command.data['using'];\n            const value = command.data['value'];\n            dataLine = `Using ${using} '${value}'`;\n        }\n        if (dataLine) {\n            this.logStream.write(PAD + dataLine + '\\n');\n        }\n    }\n    renderResponse(command) {\n        let respLine = '';\n        const data = command.responseData;\n        if (data['status'] > 0) {\n            respLine = `ERROR ${data['status']}: ${data['value']['message']}`;\n        }\n        else if (FINDERS.indexOf(command.commandName) !== -1) {\n            let els = command.responseData['value'];\n            if (!Array.isArray(els)) {\n                els = [els];\n            }\n            els = els.map((e) => e['ELEMENT']);\n            respLine = 'Elements: ' + els;\n        }\n        else if (READERS.indexOf(command.commandName) !== -1) {\n            respLine = command.responseData['value'];\n            if (typeof respLine == 'object') {\n                respLine = JSON.stringify(respLine);\n            }\n        }\n        if (respLine) {\n            this.logStream.write(PAD + respLine + '\\n');\n        }\n    }\n    timestamp() {\n        let d = new Date();\n        let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n        let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n        let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n        let millis = d.getMilliseconds().toString();\n        millis = '000'.slice(0, 3 - millis.length) + millis;\n        return `${hours}:${minutes}:${seconds}.${millis}`;\n    }\n}\nexports.WebDriverLogger = WebDriverLogger;\n//# sourceMappingURL=webdriver_logger.js.map"]},"metadata":{},"sourceType":"script"}