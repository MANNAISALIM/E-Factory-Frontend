{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n'use strict';\n\nvar _get = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar url = require('url');\n\nvar _require = require('./binary'),\n    Binary = _require.Binary,\n    Channel = _require.Channel,\n    Profile = require('./profile').Profile,\n    http = require('../http'),\n    httpUtil = require('../http/util'),\n    io = require('../io'),\n    capabilities = require('../lib/capabilities'),\n    command = require('../lib/command'),\n    logging = require('../lib/logging'),\n    promise = require('../lib/promise'),\n    webdriver = require('../lib/webdriver'),\n    net = require('../net'),\n    portprober = require('../net/portprober'),\n    remote = require('../remote');\n/**\n * Configuration options for the FirefoxDriver.\n */\n\n\nvar Options = /*#__PURE__*/function () {\n  function Options() {\n    _classCallCheck(this, Options);\n\n    /** @private {Profile} */\n    this.profile_ = null;\n    /** @private {(Binary|Channel|string|null)} */\n\n    this.binary_ = null;\n    /** @private {!Array<string>} */\n\n    this.args_ = [];\n    /** @private {logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n\n\n  _createClass(Options, [{\n    key: \"addArguments\",\n    value: function addArguments() {\n      var _this$args_;\n\n      this.args_ = (_this$args_ = this.args_).concat.apply(_this$args_, arguments);\n      return this;\n    }\n    /**\n     * Configures the geckodriver to start Firefox in headless mode.\n     *\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"headless\",\n    value: function headless() {\n      return this.addArguments('-headless');\n    }\n    /**\n     * Sets the initial window size when running in\n     * {@linkplain #headless headless} mode.\n     *\n     * @param {{width: number, height: number}} size The desired window size.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} if width or height is unspecified, not a number, or\n     *     less than or equal to 0.\n     */\n\n  }, {\n    key: \"windowSize\",\n    value: function windowSize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n\n      function checkArg(arg) {\n        if (typeof arg !== 'number' || arg <= 0) {\n          throw TypeError('Arguments must be {width, height} with numbers > 0');\n        }\n      }\n\n      checkArg(width);\n      checkArg(height);\n      return this.addArguments(\"--window-size=\".concat(width, \",\").concat(height));\n    }\n    /**\n     * Sets the profile to use. The profile may be specified as a\n     * {@link Profile} object or as the path to an existing Firefox profile to use\n     * as a template.\n     *\n     * @param {(string|!Profile)} profile The profile to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(profile) {\n      if (typeof profile === 'string') {\n        profile = new Profile(profile);\n      }\n\n      this.profile_ = profile;\n      return this;\n    }\n    /**\n     * Sets the binary to use. The binary may be specified as the path to a\n     * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n     * object.\n     *\n     * @param {(string|!Binary|!Channel)} binary The binary to use.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} If `binary` is an invalid type.\n     */\n\n  }, {\n    key: \"setBinary\",\n    value: function setBinary(binary) {\n      if (binary instanceof Binary || binary instanceof Channel || typeof binary === 'string') {\n        this.binary_ = binary;\n        return this;\n      }\n\n      throw TypeError('binary must be a string path, Channel, or Binary object');\n    }\n    /**\n     * Sets the logging preferences for the new session.\n     * @param {logging.Preferences} prefs The logging preferences.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setLoggingPreferences\",\n    value: function setLoggingPreferences(prefs) {\n      this.logPrefs_ = prefs;\n      return this;\n    }\n    /**\n     * Sets the proxy to use.\n     *\n     * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n    /**\n     * Converts these options to a {@link capabilities.Capabilities} instance.\n     *\n     * @return {!capabilities.Capabilities} A new capabilities object.\n     */\n\n  }, {\n    key: \"toCapabilities\",\n    value: function toCapabilities() {\n      var caps = capabilities.Capabilities.firefox();\n      var firefoxOptions = {};\n      caps.set('moz:firefoxOptions', firefoxOptions);\n\n      if (this.logPrefs_) {\n        caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n      }\n\n      if (this.proxy_) {\n        caps.set(capabilities.Capability.PROXY, this.proxy_);\n      }\n\n      if (this.args_.length) {\n        firefoxOptions['args'] = this.args_.concat();\n      }\n\n      if (this.binary_) {\n        if (this.binary_ instanceof Binary) {\n          var exe = this.binary_.getExe();\n\n          if (exe) {\n            firefoxOptions['binary'] = exe;\n          }\n\n          var args = this.binary_.getArguments();\n\n          if (args.length) {\n            if (this.args_.length) {\n              throw Error('You may specify browser arguments with Options.addArguments' + ' (preferred) or Binary.addArguments, but not both');\n            }\n\n            firefoxOptions['args'] = args;\n          }\n        } else if (this.binary_ instanceof Channel) {\n          firefoxOptions['binary'] = this.binary_.locate();\n        } else if (typeof this.binary_ === 'string') {\n          firefoxOptions['binary'] = this.binary_;\n        }\n      }\n\n      if (this.profile_) {\n        // If the user specified a template directory or any extensions to\n        // install, we need to encode the profile as a base64 string (which\n        // requires writing it to disk first). Otherwise, if the user just\n        // specified some custom preferences, we can send those directly.\n        var profile = this.profile_;\n\n        if (profile.getTemplateDir() || profile.getExtensions().length) {\n          firefoxOptions['profile'] = profile.encode();\n        } else {\n          var prefs = profile.getPreferences();\n\n          if (Object.keys(prefs).length) {\n            firefoxOptions['prefs'] = prefs;\n          }\n        }\n      }\n\n      return caps;\n    }\n  }]);\n\n  return Options;\n}();\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\n\n\nvar Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\"\n};\nvar GECKO_DRIVER_EXE = process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n/**\n * @return {string} .\n * @throws {Error}\n */\n\nfunction findGeckoDriver() {\n  var exe = io.findInPath(GECKO_DRIVER_EXE, true);\n\n  if (!exe) {\n    throw Error('The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' + 'PATH. Please download the latest version from ' + 'https://github.com/mozilla/geckodriver/releases/ ' + 'and ensure it can be found on your PATH.');\n  }\n\n  return exe;\n}\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      var hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      var _hostAndPort = net.splitHostAndPort(config.httpProxy);\n\n      config.httpProxy = _hostAndPort.host;\n      config.httpProxyPort = _hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      var _hostAndPort2 = net.splitHostAndPort(config.sslProxy);\n\n      config.sslProxy = _hostAndPort2.host;\n      config.sslProxyPort = _hostAndPort2.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      var _hostAndPort3 = net.splitHostAndPort(config.socksProxy);\n\n      config.socksProxy = _hostAndPort3.host;\n      config.socksProxyPort = _hostAndPort3.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n\n  return config;\n}\n/** @enum {string} */\n\n\nvar ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext'\n};\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\n\nfunction createExecutor(serverUrl) {\n  var client = serverUrl.then(function (url) {\n    return new http.HttpClient(url);\n  });\n  var executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\n\n\nfunction configureExecutor(executor) {\n  executor.defineCommand(ExtensionCommand.GET_CONTEXT, 'GET', '/session/:sessionId/moz/context');\n  executor.defineCommand(ExtensionCommand.SET_CONTEXT, 'POST', '/session/:sessionId/moz/context');\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\n\n\nvar ServiceBuilder = /*#__PURE__*/function (_remote$DriverService) {\n  _inherits(ServiceBuilder, _remote$DriverService);\n\n  var _super = _createSuper(ServiceBuilder);\n\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this;\n\n    _classCallCheck(this, ServiceBuilder);\n\n    _this = _super.call(this, opt_exe || findGeckoDriver());\n\n    _this.setLoopback(true); // Required.\n\n\n    return _this;\n  }\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n\n\n  _createClass(ServiceBuilder, [{\n    key: \"enableVerboseLogging\",\n    value: function enableVerboseLogging(opt_trace) {\n      return this.addArguments(opt_trace ? '-vv' : '-v');\n    }\n  }]);\n\n  return ServiceBuilder;\n}(remote.DriverService.Builder);\n/**\n * A WebDriver client for Firefox.\n */\n\n\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n\n  var _super2 = _createSuper(Driver);\n\n  function Driver() {\n    _classCallCheck(this, Driver);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    value: function setFileDetector() {}\n    /**\n     * Get the context that is currently in effect.\n     *\n     * @return {!promise.Thenable<Context>} Current context.\n     */\n\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.schedule(new command.Command(ExtensionCommand.GET_CONTEXT), 'get WebDriver.context');\n    }\n    /**\n     * Changes target context for commands between chrome- and content.\n     *\n     * Changing the current context has a stateful impact on all subsequent\n     * commands. The {@link Context.CONTENT} context has normal web\n     * platform document permissions, as if you would evaluate arbitrary\n     * JavaScript. The {@link Context.CHROME} context gets elevated\n     * permissions that lets you manipulate the browser chrome itself,\n     * with full access to the XUL toolkit.\n     *\n     * Use your powers wisely.\n     *\n     * @param {!promise.Thenable<void>} ctx The context to switch to.\n     */\n\n  }, {\n    key: \"setContext\",\n    value: function setContext(ctx) {\n      return this.schedule(new command.Command(ExtensionCommand.SET_CONTEXT).setParameter(\"context\", ctx), 'set WebDriver.context');\n    }\n  }], [{\n    key: \"createSession\",\n\n    /**\n     * Creates a new Firefox session.\n     *\n     * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n     *    configuration options for this driver, specified as either an\n     *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n     *    object.\n     * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n     *   pre-configured command executor to use for communicating with an\n     *   externally managed remote end (which is assumed to already be running),\n     *   or the `DriverService` to use to start the geckodriver in a child\n     *   process.\n     *\n     *   If an executor is provided, care should e taken not to use reuse it with\n     *   other clients as its internal command mappings will be updated to support\n     *   Firefox-specific commands.\n     *\n     *   _This parameter may only be used with Mozilla's GeckoDriver._\n     *\n     * @param {promise.ControlFlow=} opt_flow The flow to\n     *     schedule commands through. Defaults to the active flow object.\n     * @throws {Error} If a custom command executor is provided and the driver is\n     *     configured to use the legacy FirefoxDriver from the Selenium project.\n     * @return {!Driver} A new driver instance.\n     */\n    value: function createSession(opt_config, opt_executor, opt_flow) {\n      var caps;\n\n      if (opt_config instanceof Options) {\n        caps = opt_config.toCapabilities();\n      } else {\n        caps = new capabilities.Capabilities(opt_config);\n      }\n\n      if (caps.has(capabilities.Capability.PROXY)) {\n        var proxy = normalizeProxyConfiguration(caps.get(capabilities.Capability.PROXY));\n        caps.set(capabilities.Capability.PROXY, proxy);\n      }\n\n      var executor;\n      var onQuit;\n\n      if (opt_executor instanceof http.Executor) {\n        executor = opt_executor;\n        configureExecutor(executor);\n      } else if (opt_executor instanceof remote.DriverService) {\n        executor = createExecutor(opt_executor.start());\n\n        onQuit = function onQuit() {\n          return opt_executor.kill();\n        };\n      } else {\n        var service = new ServiceBuilder().build();\n        executor = createExecutor(service.start());\n\n        onQuit = function onQuit() {\n          return service.kill();\n        };\n      }\n\n      return (\n        /** @type {!Driver} */\n        _get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, opt_flow, onQuit)\n      );\n    }\n  }]);\n\n  return Driver;\n}(webdriver.WebDriver); // PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/firefox/index.js"],"names":["url","require","Binary","Channel","Profile","http","httpUtil","io","capabilities","command","logging","promise","webdriver","net","portprober","remote","Options","profile_","binary_","args_","logPrefs_","proxy_","concat","addArguments","width","height","checkArg","arg","TypeError","profile","binary","prefs","proxy","caps","Capabilities","firefox","firefoxOptions","set","Capability","LOGGING_PREFS","PROXY","length","exe","getExe","args","getArguments","Error","locate","getTemplateDir","getExtensions","encode","getPreferences","Object","keys","Context","CONTENT","CHROME","GECKO_DRIVER_EXE","process","platform","findGeckoDriver","findInPath","normalizeProxyConfiguration","config","proxyType","ftpProxy","ftpProxyPort","hostAndPort","splitHostAndPort","host","port","httpProxy","httpProxyPort","sslProxy","sslProxyPort","socksProxy","socksProxyPort","proxyAutoconfigUrl","pacUrl","ExtensionCommand","GET_CONTEXT","SET_CONTEXT","createExecutor","serverUrl","client","then","HttpClient","executor","Executor","configureExecutor","defineCommand","ServiceBuilder","opt_exe","setLoopback","opt_trace","DriverService","Builder","Driver","schedule","Command","ctx","setParameter","opt_config","opt_executor","opt_flow","toCapabilities","has","get","onQuit","start","kill","service","build","WebDriver","exports"],"mappingsnB;;eAE0BA,OAAO,CAAC,UAAD,C;IAA1BC,M,YAAAA,M;IAAQC,O,YAAAA,O;IACXC,O,GAAUH,OAAO,CAAC,WAAD,CAAP,CAAqBG,O;IAC/BC,I,GAAOJ,OAAO,CAAC,SAAD,C;IACdK,Q,GAAWL,OAAO,CAAC,cAAD,C;IAClBM,E,GAAKN,OAAO,CAAC,OAAD,C;IACZO,Y,GAAeP,OAAO,CAAC,qBAAD,C;IACtBQ,O,GAAUR,OAAO,CAAC,gBAAD,C;IACjBS,O,GAAUT,OAAO,CAAC,gBAAD,C;IACjBU,O,GAAUV,OAAO,CAAC,gBAAD,C;IACjBW,S,GAAYX,OAAO,CAAC,kBAAD,C;IACnBY,G,GAAMZ,OAAO,CAAC,QAAD,C;IACba,U,GAAab,OAAO,CAAC,mBAAD,C;IACpBc,M,GAASd,OAAO,CAAC,WAAD,C;AAGpB;AACA;AACA;;;IACMe,O;AACJ,qBAAc;AAAA;;AACZ;AACA,SAAKC,QAAL,GAAgB,IAAhB;AAEA;;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA;;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA;;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;mCACwB;AAAA;;AACpB,WAAKF,KAAL,GAAa,oBAAKA,KAAL,EAAWG,MAAX,8BAAb;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;+BACa;AACT,aAAO,KAAKC,YAAL,CAAkB,WAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCAC8B;AAAA,UAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,UAATC,MAAS,QAATA,MAAS;;AAC1B,eAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,YAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,IAAI,CAAtC,EAAyC;AACvC,gBAAMC,SAAS,CAAC,oDAAD,CAAf;AACD;AACF;;AACDF,MAAAA,QAAQ,CAACF,KAAD,CAAR;AACAE,MAAAA,QAAQ,CAACD,MAAD,CAAR;AACA,aAAO,KAAKF,YAAL,yBAAmCC,KAAnC,cAA4CC,MAA5C,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;+BACaI,O,EAAS;AAClB,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,QAAAA,OAAO,GAAG,IAAIzB,OAAJ,CAAYyB,OAAZ,CAAV;AACD;;AACD,WAAKZ,QAAL,GAAgBY,OAAhB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACYC,M,EAAQ;AAChB,UAAIA,MAAM,YAAY5B,MAAlB,IACG4B,MAAM,YAAY3B,OADrB,IAEG,OAAO2B,MAAP,KAAkB,QAFzB,EAEmC;AACjC,aAAKZ,OAAL,GAAeY,MAAf;AACA,eAAO,IAAP;AACD;;AACD,YAAMF,SAAS,CACX,yDADW,CAAf;AAED;AAED;AACF;AACA;AACA;AACA;;;;0CACwBG,K,EAAO;AAC3B,WAAKX,SAAL,GAAiBW,KAAjB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;6BACWC,K,EAAO;AACd,WAAKX,MAAL,GAAcW,KAAd;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;qCACmB;AACf,UAAIC,IAAI,GAAGzB,YAAY,CAAC0B,YAAb,CAA0BC,OAA1B,EAAX;AACA,UAAIC,cAAc,GAAG,EAArB;AACAH,MAAAA,IAAI,CAACI,GAAL,CAAS,oBAAT,EAA+BD,cAA/B;;AAEA,UAAI,KAAKhB,SAAT,EAAoB;AAClBa,QAAAA,IAAI,CAACI,GAAL,CAAS7B,YAAY,CAAC8B,UAAb,CAAwBC,aAAjC,EAAgD,KAAKnB,SAArD;AACD;;AAED,UAAI,KAAKC,MAAT,EAAiB;AACfY,QAAAA,IAAI,CAACI,GAAL,CAAS7B,YAAY,CAAC8B,UAAb,CAAwBE,KAAjC,EAAwC,KAAKnB,MAA7C;AACD;;AAED,UAAI,KAAKF,KAAL,CAAWsB,MAAf,EAAuB;AACrBL,QAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB,KAAKjB,KAAL,CAAWG,MAAX,EAAzB;AACD;;AAED,UAAI,KAAKJ,OAAT,EAAkB;AAChB,YAAI,KAAKA,OAAL,YAAwBhB,MAA5B,EAAoC;AAClC,cAAIwC,GAAG,GAAG,KAAKxB,OAAL,CAAayB,MAAb,EAAV;;AACA,cAAID,GAAJ,EAAS;AACPN,YAAAA,cAAc,CAAC,QAAD,CAAd,GAA2BM,GAA3B;AACD;;AAED,cAAIE,IAAI,GAAG,KAAK1B,OAAL,CAAa2B,YAAb,EAAX;;AACA,cAAID,IAAI,CAACH,MAAT,EAAiB;AACf,gBAAI,KAAKtB,KAAL,CAAWsB,MAAf,EAAuB;AACrB,oBAAMK,KAAK,CACP,gEACM,mDAFC,CAAX;AAGD;;AACDV,YAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBQ,IAAzB;AACD;AACF,SAfD,MAeO,IAAI,KAAK1B,OAAL,YAAwBf,OAA5B,EAAqC;AAC1CiC,UAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B,KAAKlB,OAAL,CAAa6B,MAAb,EAA3B;AAED,SAHM,MAGA,IAAI,OAAO,KAAK7B,OAAZ,KAAwB,QAA5B,EAAsC;AAC3CkB,UAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B,KAAKlB,OAAhC;AACD;AACF;;AAED,UAAI,KAAKD,QAAT,EAAmB;AACjB;AACA;AACA;AACA;AACA,YAAIY,OAAO,GAAG,KAAKZ,QAAnB;;AACA,YAAIY,OAAO,CAACmB,cAAR,MAA4BnB,OAAO,CAACoB,aAAR,GAAwBR,MAAxD,EAAgE;AAC9DL,UAAAA,cAAc,CAAC,SAAD,CAAd,GAA4BP,OAAO,CAACqB,MAAR,EAA5B;AAED,SAHD,MAGO;AACL,cAAInB,KAAK,GAAGF,OAAO,CAACsB,cAAR,EAAZ;;AACA,cAAIC,MAAM,CAACC,IAAP,CAAYtB,KAAZ,EAAmBU,MAAvB,EAA+B;AAC7BL,YAAAA,cAAc,CAAC,OAAD,CAAd,GAA0BL,KAA1B;AACD;AACF;AACF;;AAED,aAAOE,IAAP;AACD;;;;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMqB,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE,SADK;AAEdC,EAAAA,MAAM,EAAE;AAFM,CAAhB;AAMA,IAAMC,gBAAgB,GAClBC,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+B,iBAA/B,GAAmD,aADvD;AAIA;AACA;AACA;AACA;;AACA,SAASC,eAAT,GAA2B;AACzB,MAAIlB,GAAG,GAAGnC,EAAE,CAACsD,UAAH,CAAcJ,gBAAd,EAAgC,IAAhC,CAAV;;AACA,MAAI,CAACf,GAAL,EAAU;AACR,UAAMI,KAAK,CACT,SAASW,gBAAT,GAA4B,gDAA5B,GACA,gDADA,GAEA,mDAFA,GAGA,0CAJS,CAAX;AAKD;;AACD,SAAOf,GAAP;AACD;;AAGD,SAASoB,2BAAT,CAAqCC,MAArC,EAA6C;AAC3C,MAAI,aAAaA,MAAM,CAACC,SAAxB,EAAmC;AACjC,QAAID,MAAM,CAACE,QAAP,IAAmB,CAACF,MAAM,CAACG,YAA/B,EAA6C;AAC3C,UAAIC,WAAW,GAAGtD,GAAG,CAACuD,gBAAJ,CAAqBL,MAAM,CAACE,QAA5B,CAAlB;AACAF,MAAAA,MAAM,CAACE,QAAP,GAAkBE,WAAW,CAACE,IAA9B;AACAN,MAAAA,MAAM,CAACG,YAAP,GAAsBC,WAAW,CAACG,IAAlC;AACD;;AAED,QAAIP,MAAM,CAACQ,SAAP,IAAoB,CAACR,MAAM,CAACS,aAAhC,EAA+C;AAC7C,UAAIL,YAAW,GAAGtD,GAAG,CAACuD,gBAAJ,CAAqBL,MAAM,CAACQ,SAA5B,CAAlB;;AACAR,MAAAA,MAAM,CAACQ,SAAP,GAAmBJ,YAAW,CAACE,IAA/B;AACAN,MAAAA,MAAM,CAACS,aAAP,GAAuBL,YAAW,CAACG,IAAnC;AACD;;AAED,QAAIP,MAAM,CAACU,QAAP,IAAmB,CAACV,MAAM,CAACW,YAA/B,EAA6C;AAC3C,UAAIP,aAAW,GAAGtD,GAAG,CAACuD,gBAAJ,CAAqBL,MAAM,CAACU,QAA5B,CAAlB;;AACAV,MAAAA,MAAM,CAACU,QAAP,GAAkBN,aAAW,CAACE,IAA9B;AACAN,MAAAA,MAAM,CAACW,YAAP,GAAsBP,aAAW,CAACG,IAAlC;AACD;;AAED,QAAIP,MAAM,CAACY,UAAP,IAAqB,CAACZ,MAAM,CAACa,cAAjC,EAAiD;AAC/C,UAAIT,aAAW,GAAGtD,GAAG,CAACuD,gBAAJ,CAAqBL,MAAM,CAACY,UAA5B,CAAlB;;AACAZ,MAAAA,MAAM,CAACY,UAAP,GAAoBR,aAAW,CAACE,IAAhC;AACAN,MAAAA,MAAM,CAACa,cAAP,GAAwBT,aAAW,CAACG,IAApC;AACD;AACF,GAxBD,MAwBO,IAAI,UAAUP,MAAM,CAACC,SAArB,EAAgC;AACrC,QAAID,MAAM,CAACc,kBAAP,IAA6B,CAACd,MAAM,CAACe,MAAzC,EAAiD;AAC/Cf,MAAAA,MAAM,CAACe,MAAP,GAAgBf,MAAM,CAACc,kBAAvB;AACD;AACF;;AACD,SAAOd,MAAP;AACD;AAGD;;;AACA,IAAMgB,gBAAgB,GAAG;AACvBC,EAAAA,WAAW,EAAE,YADU;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACjC,MAAIC,MAAM,GAAGD,SAAS,CAACE,IAAV,CAAe,UAAArF,GAAG;AAAA,WAAI,IAAIK,IAAI,CAACiF,UAAT,CAAoBtF,GAApB,CAAJ;AAAA,GAAlB,CAAb;AACA,MAAIuF,QAAQ,GAAG,IAAIlF,IAAI,CAACmF,QAAT,CAAkBJ,MAAlB,CAAf;AACAK,EAAAA,iBAAiB,CAACF,QAAD,CAAjB;AACA,SAAOA,QAAP;AACD;AAGD;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BF,QAA3B,EAAqC;AACnCA,EAAAA,QAAQ,CAACG,aAAT,CACIX,gBAAgB,CAACC,WADrB,EAEI,KAFJ,EAGI,iCAHJ;AAKAO,EAAAA,QAAQ,CAACG,aAAT,CACIX,gBAAgB,CAACE,WADrB,EAEI,MAFJ,EAGI,iCAHJ;AAID;AAGD;AACA;AACA;AACA;AACA;;;IACMU,c;;;;;AACJ;AACF;AACA;AACA;AACE,0BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAO,IAAIhC,eAAe,EAAhC;;AACA,UAAKiC,WAAL,CAAiB,IAAjB,EAFmB,CAEM;;;AAFN;AAGpB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;yCACuBC,S,EAAW;AAC9B,aAAO,KAAKvE,YAAL,CAAkBuE,SAAS,GAAG,KAAH,GAAW,IAAtC,CAAP;AACD;;;;EAnB0B/E,MAAM,CAACgF,aAAP,CAAqBC,O;AAuBlD;AACA;AACA;;;IACMC,M;;;;;;;;;;;;;;AA2DJ;AACF;AACA;AACA;AACA;sCACoB,CACjB;AAED;AACF;AACA;AACA;AACA;;;;iCACe;AACX,aAAO,KAAKC,QAAL,CACH,IAAIzF,OAAO,CAAC0F,OAAZ,CAAoBpB,gBAAgB,CAACC,WAArC,CADG,EAEH,uBAFG,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;+BACaoB,G,EAAK;AACd,aAAO,KAAKF,QAAL,CACH,IAAIzF,OAAO,CAAC0F,OAAZ,CAAoBpB,gBAAgB,CAACE,WAArC,EACKoB,YADL,CACkB,SADlB,EAC6BD,GAD7B,CADG,EAGH,uBAHG,CAAP;AAID;;;;AAhGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCACuBE,U,EAAYC,Y,EAAcC,Q,EAAU;AACvD,UAAIvE,IAAJ;;AACA,UAAIqE,UAAU,YAAYtF,OAA1B,EAAmC;AACjCiB,QAAAA,IAAI,GAAGqE,UAAU,CAACG,cAAX,EAAP;AACD,OAFD,MAEO;AACLxE,QAAAA,IAAI,GAAG,IAAIzB,YAAY,CAAC0B,YAAjB,CAA8BoE,UAA9B,CAAP;AACD;;AAED,UAAIrE,IAAI,CAACyE,GAAL,CAASlG,YAAY,CAAC8B,UAAb,CAAwBE,KAAjC,CAAJ,EAA6C;AAC3C,YAAIR,KAAK,GACL8B,2BAA2B,CAAC7B,IAAI,CAAC0E,GAAL,CAASnG,YAAY,CAAC8B,UAAb,CAAwBE,KAAjC,CAAD,CAD/B;AAEAP,QAAAA,IAAI,CAACI,GAAL,CAAS7B,YAAY,CAAC8B,UAAb,CAAwBE,KAAjC,EAAwCR,KAAxC;AACD;;AAED,UAAIuD,QAAJ;AACA,UAAIqB,MAAJ;;AAEA,UAAIL,YAAY,YAAYlG,IAAI,CAACmF,QAAjC,EAA2C;AACzCD,QAAAA,QAAQ,GAAGgB,YAAX;AACAd,QAAAA,iBAAiB,CAACF,QAAD,CAAjB;AACD,OAHD,MAGO,IAAIgB,YAAY,YAAYxF,MAAM,CAACgF,aAAnC,EAAkD;AACvDR,QAAAA,QAAQ,GAAGL,cAAc,CAACqB,YAAY,CAACM,KAAb,EAAD,CAAzB;;AACAD,QAAAA,MAAM,GAAG;AAAA,iBAAML,YAAY,CAACO,IAAb,EAAN;AAAA,SAAT;AACD,OAHM,MAGA;AACL,YAAIC,OAAO,GAAG,IAAIpB,cAAJ,GAAqBqB,KAArB,EAAd;AACAzB,QAAAA,QAAQ,GAAGL,cAAc,CAAC6B,OAAO,CAACF,KAAR,EAAD,CAAzB;;AACAD,QAAAA,MAAM,GAAG;AAAA,iBAAMG,OAAO,CAACD,IAAR,EAAN;AAAA,SAAT;AACD;;AAED;AAAO;AAAP,wEACIvB,QADJ,EACctD,IADd,EACoBuE,QADpB,EAC8BI,MAD9B;AAAA;AAED;;;;EAzDkBhG,SAAS,CAACqG,S,GAqG/B;;;AAGAC,OAAO,CAAChH,MAAR,GAAiBA,MAAjB;AACAgH,OAAO,CAAC/G,OAAR,GAAkBA,OAAlB;AACA+G,OAAO,CAAC5D,OAAR,GAAkBA,OAAlB;AACA4D,OAAO,CAACjB,MAAR,GAAiBA,MAAjB;AACAiB,OAAO,CAAClG,OAAR,GAAkBA,OAAlB;AACAkG,OAAO,CAAC9G,OAAR,GAAkBA,OAAlB;AACA8G,OAAO,CAACvB,cAAR,GAAyBA,cAAzB","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict';\n\nconst url = require('url');\n\nconst {Binary, Channel} = require('./binary'),\n    Profile = require('./profile').Profile,\n    http = require('../http'),\n    httpUtil = require('../http/util'),\n    io = require('../io'),\n    capabilities = require('../lib/capabilities'),\n    command = require('../lib/command'),\n    logging = require('../lib/logging'),\n    promise = require('../lib/promise'),\n    webdriver = require('../lib/webdriver'),\n    net = require('../net'),\n    portprober = require('../net/portprober'),\n    remote = require('../remote');\n\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options {\n  constructor() {\n    /** @private {Profile} */\n    this.profile_ = null;\n\n    /** @private {(Binary|Channel|string|null)} */\n    this.binary_ = null;\n\n    /** @private {!Array<string>} */\n    this.args_ = [];\n\n    /** @private {logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    this.args_ = this.args_.concat(...args);\n    return this;\n  }\n\n  /**\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n  headless() {\n    return this.addArguments('-headless');\n  }\n\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({width, height}) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`--window-size=${width},${height}`);\n  }\n\n  /**\n   * Sets the profile to use. The profile may be specified as a\n   * {@link Profile} object or as the path to an existing Firefox profile to use\n   * as a template.\n   *\n   * @param {(string|!Profile)} profile The profile to use.\n   * @return {!Options} A self reference.\n   */\n  setProfile(profile) {\n    if (typeof profile === 'string') {\n      profile = new Profile(profile);\n    }\n    this.profile_ = profile;\n    return this;\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n   * object.\n   *\n   * @param {(string|!Binary|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (binary instanceof Binary\n        || binary instanceof Channel\n        || typeof binary === 'string') {\n      this.binary_ = binary;\n      return this;\n    }\n    throw TypeError(\n        'binary must be a string path, Channel, or Binary object');\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPreferences(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Converts these options to a {@link capabilities.Capabilities} instance.\n   *\n   * @return {!capabilities.Capabilities} A new capabilities object.\n   */\n  toCapabilities() {\n    let caps = capabilities.Capabilities.firefox();\n    let firefoxOptions = {};\n    caps.set('moz:firefoxOptions', firefoxOptions);\n\n    if (this.logPrefs_) {\n      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n\n    if (this.args_.length) {\n      firefoxOptions['args'] = this.args_.concat();\n    }\n\n    if (this.binary_) {\n      if (this.binary_ instanceof Binary) {\n        let exe = this.binary_.getExe();\n        if (exe) {\n          firefoxOptions['binary'] = exe;\n        }\n\n        let args = this.binary_.getArguments();\n        if (args.length) {\n          if (this.args_.length) {\n            throw Error(\n                'You may specify browser arguments with Options.addArguments'\n                    + ' (preferred) or Binary.addArguments, but not both');\n          }\n          firefoxOptions['args'] = args;\n        }\n      } else if (this.binary_ instanceof Channel) {\n        firefoxOptions['binary'] = this.binary_.locate();\n\n      } else if (typeof this.binary_ === 'string') {\n        firefoxOptions['binary'] = this.binary_;\n      }\n    }\n\n    if (this.profile_) {\n      // If the user specified a template directory or any extensions to\n      // install, we need to encode the profile as a base64 string (which\n      // requires writing it to disk first). Otherwise, if the user just\n      // specified some custom preferences, we can send those directly.\n      let profile = this.profile_;\n      if (profile.getTemplateDir() || profile.getExtensions().length) {\n        firefoxOptions['profile'] = profile.encode();\n\n      } else {\n        let prefs = profile.getPreferences();\n        if (Object.keys(prefs).length) {\n          firefoxOptions['prefs'] = prefs;\n        }\n      }\n    }\n\n    return caps;\n  }\n}\n\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\",\n};\n\n\nconst GECKO_DRIVER_EXE =\n    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  let exe = io.findInPath(GECKO_DRIVER_EXE, true);\n  if (!exe) {\n    throw Error(\n      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +\n      'PATH. Please download the latest version from ' +\n      'https://github.com/mozilla/geckodriver/releases/ ' +\n      'and ensure it can be found on your PATH.');\n  }\n  return exe;\n}\n\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.httpProxy);\n      config.httpProxy = hostAndPort.host;\n      config.httpProxyPort = hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.sslProxy);\n      config.sslProxy = hostAndPort.host;\n      config.sslProxyPort = hostAndPort.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.socksProxy);\n      config.socksProxy = hostAndPort.host;\n      config.socksProxyPort = hostAndPort.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n  return config;\n}\n\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n};\n\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      ExtensionCommand.GET_CONTEXT,\n      'GET',\n      '/session/:sessionId/moz/context');\n\n  executor.defineCommand(\n      ExtensionCommand.SET_CONTEXT,\n      'POST',\n      '/session/:sessionId/moz/context');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true);  // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n}\n\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n   *    object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor, opt_flow) {\n    let caps;\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = new capabilities.Capabilities(opt_config);\n    }\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      let proxy =\n          normalizeProxyConfiguration(caps.get(capabilities.Capability.PROXY));\n      caps.set(capabilities.Capability.PROXY, proxy);\n    }\n\n    let executor;\n    let onQuit;\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor;\n      configureExecutor(executor);\n    } else if (opt_executor instanceof remote.DriverService) {\n      executor = createExecutor(opt_executor.start());\n      onQuit = () => opt_executor.kill();\n    } else {\n      let service = new ServiceBuilder().build();\n      executor = createExecutor(service.start());\n      onQuit = () => service.kill();\n    }\n\n    return /** @type {!Driver} */(super.createSession(\n        executor, caps, opt_flow, onQuit));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {\n  }\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!promise.Thenable<Context>} Current context.\n   */\n  getContext() {\n    return this.schedule(\n        new command.Command(ExtensionCommand.GET_CONTEXT),\n        'get WebDriver.context');\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!promise.Thenable<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.schedule(\n        new command.Command(ExtensionCommand.SET_CONTEXT)\n            .setParameter(\"context\", ctx),\n        'set WebDriver.context');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;\n"]},"metadata":{},"sourceType":"script"}