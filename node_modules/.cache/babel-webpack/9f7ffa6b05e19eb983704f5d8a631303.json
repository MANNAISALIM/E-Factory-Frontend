{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar exec = require('child_process').exec,\n    fs = require('fs'),\n    net = require('net');\n/**\n * The IANA suggested ephemeral port range.\n * @type {{min: number, max: number}}\n * @const\n * @see http://en.wikipedia.org/wiki/Ephemeral_ports\n */\n\n\nvar DEFAULT_IANA_RANGE = {\n  min: 49152,\n  max: 65535\n};\n/**\n * The epheremal port range for the current system. Lazily computed on first\n * access.\n * @type {Promise.<{min: number, max: number}>}\n */\n\nvar systemRange = null;\n/**\n * Computes the ephemeral port range for the current system. This is based on\n * http://stackoverflow.com/a/924337.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve to\n *     the ephemeral port range of the current system.\n */\n\nfunction findSystemPortRange() {\n  if (systemRange) {\n    return systemRange;\n  }\n\n  var range = process.platform === 'win32' ? findWindowsPortRange() : findUnixPortRange();\n  return systemRange = range.catch(function () {\n    return DEFAULT_IANA_RANGE;\n  });\n}\n/**\n * Executes a command and returns its output if it succeeds.\n * @param {string} cmd The command to execute.\n * @return {!Promise<string>} A promise that will resolve with the command's\n *     stdout data.\n */\n\n\nfunction execute(cmd) {\n  return new Promise(function (resolve, reject) {\n    exec(cmd, function (err, stdout) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n}\n/**\n * Computes the ephemeral port range for a Unix-like system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\n\n\nfunction findUnixPortRange() {\n  var cmd;\n\n  if (process.platform === 'sunos') {\n    cmd = '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';\n  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {\n    // Linux\n    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';\n  } else {\n    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' + ' | sed -e \"s/.*:\\\\s*//\"';\n  }\n\n  return execute(cmd).then(function (stdout) {\n    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;\n    var range = stdout.trim().split(/\\s+/).map(Number);\n    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;\n    return {\n      min: range[0],\n      max: range[1]\n    };\n  });\n}\n/**\n * Computes the ephemeral port range for a Windows system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\n\n\nfunction findWindowsPortRange() {\n  // First, check if we're running on XP.  If this initial command fails,\n  // we just fallback on the default IANA range.\n  return execute('cmd.exe /c ver').then(function (stdout) {\n    if (/Windows XP/.test(stdout)) {\n      // TODO: Try to read these values from the registry.\n      return {\n        min: 1025,\n        max: 5000\n      };\n    } else {\n      return execute('netsh int ipv4 show dynamicport tcp').then(function (stdout) {\n        /* > netsh int ipv4 show dynamicport tcp\n          Protocol tcp Dynamic Port Range\n          ---------------------------------\n          Start Port : 49152\n          Number of Ports : 16384\n         */\n        var range = stdout.split(/\\n/).filter(function (line) {\n          return /.*:\\s*\\d+/.test(line);\n        }).map(function (line) {\n          return Number(line.split(/:\\s*/)[1]);\n        });\n        return {\n          min: range[0],\n          max: range[0] + range[1]\n        };\n      });\n    }\n  });\n}\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\n\n\nfunction isFree(port, opt_host) {\n  return new Promise(function (resolve, reject) {\n    var server = net.createServer().on('error', function (e) {\n      if (e.code === 'EADDRINUSE') {\n        resolve(false);\n      } else {\n        reject(e);\n      }\n    });\n    server.listen(port, opt_host, function () {\n      server.close(function () {\n        return resolve(true);\n      });\n    });\n  });\n}\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\n\n\nfunction findFreePort(opt_host) {\n  return findSystemPortRange().then(function (range) {\n    var attempts = 0;\n    return new Promise(function (resolve, reject) {\n      findPort();\n\n      function findPort() {\n        attempts += 1;\n\n        if (attempts > 10) {\n          reject(Error('Unable to find a free port'));\n        }\n\n        var port = Math.floor(Math.random() * (range.max - range.min) + range.min);\n        isFree(port, opt_host).then(function (isFree) {\n          if (isFree) {\n            resolve(port);\n          } else {\n            findPort();\n          }\n        }, findPort);\n      }\n    });\n  });\n} // PUBLIC API\n\n\nexports.findFreePort = findFreePort;\nexports.isFree = isFree;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/net/portprober.js"],"names":["exec","require","fs","net","DEFAULT_IANA_RANGE","min","max","systemRange","findSystemPortRange","range","process","platform","findWindowsPortRange","findUnixPortRange","catch","execute","cmd","Promise","resolve","reject","err","stdout","existsSync","then","length","trim","split","map","Number","some","isNaN","test","filter","line","isFree","port","opt_host","server","createServer","on","e","code","listen","close","findFreePort","attempts","findPort","Error","Math","floor","random","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar exec = require('child_process').exec,\n    fs = require('fs'),\n    net = require('net');\n\n\n/**\n * The IANA suggested ephemeral port range.\n * @type {{min: number, max: number}}\n * @const\n * @see http://en.wikipedia.org/wiki/Ephemeral_ports\n */\nconst DEFAULT_IANA_RANGE = {min: 49152, max: 65535};\n\n\n/**\n * The epheremal port range for the current system. Lazily computed on first\n * access.\n * @type {Promise.<{min: number, max: number}>}\n */\nvar systemRange = null;\n\n\n/**\n * Computes the ephemeral port range for the current system. This is based on\n * http://stackoverflow.com/a/924337.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve to\n *     the ephemeral port range of the current system.\n */\nfunction findSystemPortRange() {\n  if (systemRange) {\n    return systemRange;\n  }\n  var range = process.platform === 'win32' ?\n      findWindowsPortRange() : findUnixPortRange();\n  return systemRange = range.catch(function() {\n    return DEFAULT_IANA_RANGE;\n  });\n}\n\n\n/**\n * Executes a command and returns its output if it succeeds.\n * @param {string} cmd The command to execute.\n * @return {!Promise<string>} A promise that will resolve with the command's\n *     stdout data.\n */\nfunction execute(cmd) {\n  return new Promise((resolve, reject) => {\n    exec(cmd, function(err, stdout) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n}\n\n\n/**\n * Computes the ephemeral port range for a Unix-like system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\nfunction findUnixPortRange() {\n  var cmd;\n  if (process.platform === 'sunos') {\n    cmd =\n        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';\n  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {\n    // Linux\n    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';\n  } else {\n    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +\n        ' | sed -e \"s/.*:\\\\s*//\"';\n  }\n\n  return execute(cmd).then(function(stdout) {\n    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;\n    var range = stdout.trim().split(/\\s+/).map(Number);\n    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;\n    return {min: range[0], max: range[1]};\n  });\n}\n\n\n/**\n * Computes the ephemeral port range for a Windows system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\nfunction findWindowsPortRange() {\n  // First, check if we're running on XP.  If this initial command fails,\n  // we just fallback on the default IANA range.\n  return execute('cmd.exe /c ver').then(function(stdout) {\n    if (/Windows XP/.test(stdout)) {\n      // TODO: Try to read these values from the registry.\n      return {min: 1025, max: 5000};\n    } else {\n      return execute('netsh int ipv4 show dynamicport tcp').\n          then(function(stdout) {\n            /* > netsh int ipv4 show dynamicport tcp\n              Protocol tcp Dynamic Port Range\n              ---------------------------------\n              Start Port : 49152\n              Number of Ports : 16384\n             */\n            var range = stdout.split(/\\n/).filter(function(line) {\n              return /.*:\\s*\\d+/.test(line);\n            }).map(function(line) {\n              return Number(line.split(/:\\s*/)[1]);\n            });\n\n            return {\n              min: range[0],\n              max: range[0] + range[1]\n            };\n          });\n    }\n  });\n}\n\n\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\nfunction isFree(port, opt_host) {\n  return new Promise((resolve, reject) => {\n    let server = net.createServer().on('error', function(e) {\n      if (e.code === 'EADDRINUSE') {\n        resolve(false);\n      } else {\n        reject(e);\n      }\n    });\n\n    server.listen(port, opt_host, function() {\n      server.close(() => resolve(true));\n    });\n  });\n}\n\n\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\nfunction findFreePort(opt_host) {\n  return findSystemPortRange().then(function(range) {\n    var attempts = 0;\n    return new Promise((resolve, reject) => {\n      findPort();\n\n      function findPort() {\n        attempts += 1;\n        if (attempts > 10) {\n          reject(Error('Unable to find a free port'));\n        }\n\n        var port = Math.floor(\n            Math.random() * (range.max - range.min) + range.min);\n        isFree(port, opt_host).then(function(isFree) {\n          if (isFree) {\n            resolve(port);\n          } else {\n            findPort();\n          }\n        }, findPort);\n      }\n    });\n  });\n}\n\n\n// PUBLIC API\n\n\nexports.findFreePort = findFreePort;\nexports.isFree = isFree;\n"]},"metadata":{},"sourceType":"script"}