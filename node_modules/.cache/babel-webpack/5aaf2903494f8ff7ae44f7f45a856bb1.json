{"ast":null,"code":"\"use strict\";\n/*\n * This is an implementation of the SauceLabs Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar q = require(\"q\");\n\nvar util = require(\"util\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar SauceLabs = require('saucelabs');\n\nvar SAUCE_REGIONS = {\n  'us': '',\n  'eu': 'eu-central-1.'\n};\nvar logger = new logger_1.Logger('sauce');\n\nvar Sauce = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(Sauce, _driverProvider_1$Dri);\n\n  var _super = _createSuper(Sauce);\n\n  function Sauce(config) {\n    _classCallCheck(this, Sauce);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Hook to update the sauce job.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  _createClass(Sauce, [{\n    key: \"updateJob\",\n    value: function updateJob(update) {\n      var _this = this;\n\n      var deferredArray = this.drivers_.map(function (driver) {\n        var deferred = q.defer();\n        driver.getSession().then(function (session) {\n          logger.info('SauceLabs results available at http://saucelabs.com/jobs/' + session.getId());\n\n          _this.sauceServer_.updateJob(session.getId(), update, function (err) {\n            if (err) {\n              throw new Error('Error updating Sauce pass/fail status: ' + util.inspect(err));\n            }\n\n            deferred.resolve();\n          });\n        });\n        return deferred.promise;\n      });\n      return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var deferred = q.defer();\n      this.sauceServer_ = new SauceLabs({\n        hostname: this.getSauceEndpoint(this.config_.sauceRegion),\n        username: this.config_.sauceUser,\n        password: this.config_.sauceKey,\n        agent: this.config_.sauceAgent,\n        proxy: this.config_.sauceProxy\n      });\n      this.config_.capabilities['username'] = this.config_.sauceUser;\n      this.config_.capabilities['accessKey'] = this.config_.sauceKey;\n      this.config_.capabilities['build'] = this.config_.sauceBuild;\n      var protocol = this.config_.sauceSeleniumUseHttp ? 'http://' : 'https://';\n      var auth = protocol + this.config_.sauceUser + ':' + this.config_.sauceKey + '@';\n      this.config_.seleniumAddress = auth + (this.config_.sauceSeleniumAddress ? this.config_.sauceSeleniumAddress : \"ondemand.\".concat(this.getSauceEndpoint(this.config_.sauceRegion), \":443/wd/hub\")); // Append filename to capabilities.name so that it's easier to identify\n      // tests.\n\n      if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n        this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n      }\n\n      logger.info('Using SauceLabs selenium server at ' + this.config_.seleniumAddress.replace(/\\/\\/.+@/, '//'));\n      deferred.resolve();\n      return deferred.promise;\n    }\n    /**\n     * Get the Sauce Labs endpoint\n     * @private\n     * @param {string} region\n     * @return {string} The endpoint that needs to be used\n     */\n\n  }, {\n    key: \"getSauceEndpoint\",\n    value: function getSauceEndpoint(region) {\n      var dc = region ? typeof SAUCE_REGIONS[region] !== 'undefined' ? SAUCE_REGIONS[region] : region + '.' : '';\n      return \"\".concat(dc, \"saucelabs.com\");\n    }\n  }]);\n\n  return Sauce;\n}(driverProvider_1.DriverProvider);\n\nexports.Sauce = Sauce;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/sauce.js"],"names":["Object","defineProperty","exports","value","q","require","util","logger_1","driverProvider_1","SauceLabs","SAUCE_REGIONS","logger","Logger","Sauce","config","update","deferredArray","drivers_","map","driver","deferred","defer","getSession","then","session","info","getId","sauceServer_","updateJob","err","Error","inspect","resolve","promise","all","hostname","getSauceEndpoint","config_","sauceRegion","username","sauceUser","password","sauceKey","agent","sauceAgent","proxy","sauceProxy","capabilities","sauceBuild","protocol","sauceSeleniumUseHttp","auth","seleniumAddress","sauceSeleniumAddress","name","shardTestFiles","specs","toString","replace","region","dc","DriverProvider"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * This is an implementation of the SauceLabs Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst q = require(\"q\");\nconst util = require(\"util\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst SauceLabs = require('saucelabs');\nconst SAUCE_REGIONS = {\n    'us': '',\n    'eu': 'eu-central-1.'\n};\nlet logger = new logger_1.Logger('sauce');\nclass Sauce extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Hook to update the sauce job.\n     * @public\n     * @param {Object} update\n     * @return {q.promise} A promise that will resolve when the update is complete.\n     */\n    updateJob(update) {\n        let deferredArray = this.drivers_.map((driver) => {\n            let deferred = q.defer();\n            driver.getSession().then((session) => {\n                logger.info('SauceLabs results available at http://saucelabs.com/jobs/' + session.getId());\n                this.sauceServer_.updateJob(session.getId(), update, (err) => {\n                    if (err) {\n                        throw new Error('Error updating Sauce pass/fail status: ' + util.inspect(err));\n                    }\n                    deferred.resolve();\n                });\n            });\n            return deferred.promise;\n        });\n        return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.sauceServer_ = new SauceLabs({\n            hostname: this.getSauceEndpoint(this.config_.sauceRegion),\n            username: this.config_.sauceUser,\n            password: this.config_.sauceKey,\n            agent: this.config_.sauceAgent,\n            proxy: this.config_.sauceProxy\n        });\n        this.config_.capabilities['username'] = this.config_.sauceUser;\n        this.config_.capabilities['accessKey'] = this.config_.sauceKey;\n        this.config_.capabilities['build'] = this.config_.sauceBuild;\n        let protocol = this.config_.sauceSeleniumUseHttp ? 'http://' : 'https://';\n        let auth = protocol + this.config_.sauceUser + ':' + this.config_.sauceKey + '@';\n        this.config_.seleniumAddress = auth +\n            (this.config_.sauceSeleniumAddress ?\n                this.config_.sauceSeleniumAddress :\n                `ondemand.${this.getSauceEndpoint(this.config_.sauceRegion)}:443/wd/hub`);\n        // Append filename to capabilities.name so that it's easier to identify\n        // tests.\n        if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n            this.config_.capabilities.name +=\n                (':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, ''));\n        }\n        logger.info('Using SauceLabs selenium server at ' +\n            this.config_.seleniumAddress.replace(/\\/\\/.+@/, '//'));\n        deferred.resolve();\n        return deferred.promise;\n    }\n    /**\n     * Get the Sauce Labs endpoint\n     * @private\n     * @param {string} region\n     * @return {string} The endpoint that needs to be used\n     */\n    getSauceEndpoint(region) {\n        const dc = region ?\n            typeof SAUCE_REGIONS[region] !== 'undefined' ? SAUCE_REGIONS[region] : (region + '.') :\n            '';\n        return `${dc}saucelabs.com`;\n    }\n}\nexports.Sauce = Sauce;\n//# sourceMappingURL=sauce.js.map"]},"metadata":{},"sourceType":"script"}