{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar q = require(\"q\");\n\nvar util = require(\"util\");\n\nvar exitCodes_1 = require(\"../exitCodes\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar BrowserstackClient = require('browserstack');\n\nvar logger = new logger_1.Logger('browserstack');\n\nvar BrowserStack = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(BrowserStack, _driverProvider_1$Dri);\n\n  var _super = _createSuper(BrowserStack);\n\n  function BrowserStack(config) {\n    _classCallCheck(this, BrowserStack);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Hook to update the BrowserStack job status.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  _createClass(BrowserStack, [{\n    key: \"updateJob\",\n    value: function updateJob(update) {\n      var _this = this;\n\n      var deferredArray = this.drivers_.map(function (driver) {\n        var deferred = q.defer();\n        driver.getSession().then(function (session) {\n          // Fetching BrowserStack session details.\n          _this.browserstackClient.getSession(session.getId(), function (error, automate_session) {\n            if (error) {\n              logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n            } else {\n              if (automate_session && automate_session.browser_url) {\n                logger.info('BrowserStack results available at ' + automate_session.browser_url);\n              } else {\n                logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n              }\n            }\n          });\n\n          var jobStatus = update.passed ? 'completed' : 'error';\n          var statusObj = {\n            status: jobStatus\n          }; // Updating status of BrowserStack session.\n\n          _this.browserstackClient.updateSession(session.getId(), statusObj, function (error, automate_session) {\n            if (error) {\n              throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(error));\n            } else {\n              logger.info(automate_session);\n              deferred.resolve();\n            }\n          });\n        });\n        return deferred.promise;\n      });\n      return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var deferred = q.defer();\n      this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n      this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n      this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub';\n      this.browserstackClient = BrowserstackClient.createAutomateClient({\n        username: this.config_.browserstackUser,\n        password: this.config_.browserstackKey,\n        proxy: this.config_.browserstackProxy\n      }); // Append filename to capabilities.name so that it's easier to identify\n      // tests.\n\n      if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n        this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n      }\n\n      logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n      deferred.resolve();\n      return deferred.promise;\n    }\n  }]);\n\n  return BrowserStack;\n}(driverProvider_1.DriverProvider);\n\nexports.BrowserStack = BrowserStack;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/browserStack.js"],"names":["Object","defineProperty","exports","value","q","require","util","exitCodes_1","logger_1","driverProvider_1","BrowserstackClient","logger","Logger","BrowserStack","config","update","deferredArray","drivers_","map","driver","deferred","defer","getSession","then","session","browserstackClient","getId","error","automate_session","info","browser_url","jobStatus","passed","statusObj","status","updateSession","BrowserError","inspect","resolve","promise","all","config_","capabilities","browserstackUser","browserstackKey","seleniumAddress","createAutomateClient","username","password","proxy","browserstackProxy","name","shardTestFiles","specs","toString","replace","DriverProvider"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst q = require(\"q\");\nconst util = require(\"util\");\nconst exitCodes_1 = require(\"../exitCodes\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst BrowserstackClient = require('browserstack');\nlet logger = new logger_1.Logger('browserstack');\nclass BrowserStack extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Hook to update the BrowserStack job status.\n     * @public\n     * @param {Object} update\n     * @return {q.promise} A promise that will resolve when the update is complete.\n     */\n    updateJob(update) {\n        let deferredArray = this.drivers_.map((driver) => {\n            let deferred = q.defer();\n            driver.getSession().then((session) => {\n                // Fetching BrowserStack session details.\n                this.browserstackClient.getSession(session.getId(), function (error, automate_session) {\n                    if (error) {\n                        logger.info('BrowserStack results available at ' +\n                            'https://www.browserstack.com/automate');\n                    }\n                    else {\n                        if (automate_session && automate_session.browser_url) {\n                            logger.info('BrowserStack results available at ' + automate_session.browser_url);\n                        }\n                        else {\n                            logger.info('BrowserStack results available at ' +\n                                'https://www.browserstack.com/automate');\n                        }\n                    }\n                });\n                let jobStatus = update.passed ? 'completed' : 'error';\n                let statusObj = { status: jobStatus };\n                // Updating status of BrowserStack session.\n                this.browserstackClient.updateSession(session.getId(), statusObj, function (error, automate_session) {\n                    if (error) {\n                        throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(error));\n                    }\n                    else {\n                        logger.info(automate_session);\n                        deferred.resolve();\n                    }\n                });\n            });\n            return deferred.promise;\n        });\n        return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n        this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n        this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub';\n        this.browserstackClient = BrowserstackClient.createAutomateClient({\n            username: this.config_.browserstackUser,\n            password: this.config_.browserstackKey,\n            proxy: this.config_.browserstackProxy\n        });\n        // Append filename to capabilities.name so that it's easier to identify\n        // tests.\n        if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n            this.config_.capabilities.name +=\n                (':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, ''));\n        }\n        logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n        deferred.resolve();\n        return deferred.promise;\n    }\n}\nexports.BrowserStack = BrowserStack;\n//# sourceMappingURL=browserStack.js.map"]},"metadata":{},"sourceType":"script"}