{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an implementation of the TestObject Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nvar q = require(\"q\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar logger = new logger_1.Logger('testobject');\n\nvar TestObject = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(TestObject, _driverProvider_1$Dri);\n\n  var _super = _createSuper(TestObject);\n\n  function TestObject(config) {\n    _classCallCheck(this, TestObject);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *      ready to test.\n   */\n\n\n  _createClass(TestObject, [{\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var deferred = q.defer();\n      this.config_.capabilities['testobject.user'] = this.config_.testobjectUser;\n      this.config_.capabilities['testobject_api_key'] = this.config_.testobjectKey;\n      this.config_.seleniumAddress = 'https://us1.appium.testobject.com/wd/hub';\n      logger.info('Using TestObject selenium server at ' + this.config_.seleniumAddress);\n      deferred.resolve();\n      return deferred.promise;\n    }\n  }]);\n\n  return TestObject;\n}(driverProvider_1.DriverProvider);\n\nexports.TestObject = TestObject;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/testObject.js"],"names":["Object","defineProperty","exports","value","q","require","logger_1","driverProvider_1","logger","Logger","TestObject","config","deferred","defer","config_","capabilities","testobjectUser","testobjectKey","seleniumAddress","info","resolve","promise","DriverProvider"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;AACA,IAAIG,MAAM,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB,YAApB,CAAb;;IACMC,U;;;;;AACF,sBAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACVA,MADU;AAEnB;AACD;AACJ;AACA;AACA;AACA;;;;;qCACqB;AACb,UAAIC,QAAQ,GAAGR,CAAC,CAACS,KAAF,EAAf;AACA,WAAKC,OAAL,CAAaC,YAAb,CAA0B,iBAA1B,IAA+C,KAAKD,OAAL,CAAaE,cAA5D;AACA,WAAKF,OAAL,CAAaC,YAAb,CAA0B,oBAA1B,IAAkD,KAAKD,OAAL,CAAaG,aAA/D;AACA,WAAKH,OAAL,CAAaI,eAAb,GAA+B,0CAA/B;AACAV,MAAAA,MAAM,CAACW,IAAP,CAAY,yCAAyC,KAAKL,OAAL,CAAaI,eAAlE;AACAN,MAAAA,QAAQ,CAACQ,OAAT;AACA,aAAOR,QAAQ,CAACS,OAAhB;AACH;;;;EAjBoBd,gBAAgB,CAACe,c;;AAmB1CpB,OAAO,CAACQ,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * This is an implementation of the TestObject Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nlet logger = new logger_1.Logger('testobject');\nclass TestObject extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *      ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.config_.capabilities['testobject.user'] = this.config_.testobjectUser;\n        this.config_.capabilities['testobject_api_key'] = this.config_.testobjectKey;\n        this.config_.seleniumAddress = 'https://us1.appium.testobject.com/wd/hub';\n        logger.info('Using TestObject selenium server at ' + this.config_.seleniumAddress);\n        deferred.resolve();\n        return deferred.promise;\n    }\n}\nexports.TestObject = TestObject;\n//# sourceMappingURL=testObject.js.map"]},"metadata":{},"sourceType":"script"}