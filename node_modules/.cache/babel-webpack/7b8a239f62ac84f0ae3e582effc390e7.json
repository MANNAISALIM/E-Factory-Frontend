{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar child_process_1 = require(\"child_process\");\n\nvar q = require(\"q\");\n\nvar logger_1 = require(\"./logger\");\n\nvar BP_PATH = require.resolve('blocking-proxy/built/lib/bin.js');\n\nvar logger = new logger_1.Logger('BlockingProxy');\n\nvar BlockingProxyRunner = /*#__PURE__*/function () {\n  function BlockingProxyRunner(config) {\n    _classCallCheck(this, BlockingProxyRunner);\n\n    this.config = config;\n  }\n\n  _createClass(BlockingProxyRunner, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      return q.Promise(function (resolve, reject) {\n        _this.checkSupportedConfig();\n\n        var args = ['--fork', '--seleniumAddress', _this.config.seleniumAddress];\n\n        if (_this.config.webDriverLogDir) {\n          args.push('--logDir', _this.config.webDriverLogDir);\n        }\n\n        if (_this.config.highlightDelay) {\n          args.push('--highlightDelay', _this.config.highlightDelay.toString());\n        }\n\n        _this.bpProcess = child_process_1.fork(BP_PATH, args, {\n          silent: true\n        });\n        logger.info('Starting BlockingProxy with args: ' + args.toString());\n\n        _this.bpProcess.on('message', function (data) {\n          _this.port = data['port'];\n          resolve(data['port']);\n        }).on('error', function (err) {\n          reject(new Error('Unable to start BlockingProxy ' + err));\n        }).on('exit', function (code, signal) {\n          reject(new Error('BP exited with ' + code));\n          logger.error('Exited with ' + code);\n          logger.error('signal ' + signal);\n        });\n\n        _this.bpProcess.stdout.on('data', function (msg) {\n          logger.debug(msg.toString().trim());\n        });\n\n        _this.bpProcess.stderr.on('data', function (msg) {\n          logger.error(msg.toString().trim());\n        });\n\n        process.on('exit', function () {\n          _this.bpProcess.kill();\n        });\n      });\n    }\n  }, {\n    key: \"checkSupportedConfig\",\n    value: function checkSupportedConfig() {\n      if (this.config.directConnect) {\n        throw new Error('BlockingProxy not yet supported with directConnect!');\n      }\n    }\n  }]);\n\n  return BlockingProxyRunner;\n}();\n\nexports.BlockingProxyRunner = BlockingProxyRunner;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/bpRunner.js"],"names":["Object","defineProperty","exports","value","child_process_1","require","q","logger_1","BP_PATH","resolve","logger","Logger","BlockingProxyRunner","config","Promise","reject","checkSupportedConfig","args","seleniumAddress","webDriverLogDir","push","highlightDelay","toString","bpProcess","fork","silent","info","on","data","port","err","Error","code","signal","error","stdout","msg","debug","trim","stderr","process","kill","directConnect"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst q = require(\"q\");\nconst logger_1 = require(\"./logger\");\nconst BP_PATH = require.resolve('blocking-proxy/built/lib/bin.js');\nlet logger = new logger_1.Logger('BlockingProxy');\nclass BlockingProxyRunner {\n    constructor(config) {\n        this.config = config;\n    }\n    start() {\n        return q.Promise((resolve, reject) => {\n            this.checkSupportedConfig();\n            let args = [\n                '--fork',\n                '--seleniumAddress',\n                this.config.seleniumAddress,\n            ];\n            if (this.config.webDriverLogDir) {\n                args.push('--logDir', this.config.webDriverLogDir);\n            }\n            if (this.config.highlightDelay) {\n                args.push('--highlightDelay', this.config.highlightDelay.toString());\n            }\n            this.bpProcess = child_process_1.fork(BP_PATH, args, { silent: true });\n            logger.info('Starting BlockingProxy with args: ' + args.toString());\n            this.bpProcess\n                .on('message', (data) => {\n                this.port = data['port'];\n                resolve(data['port']);\n            })\n                .on('error', (err) => {\n                reject(new Error('Unable to start BlockingProxy ' + err));\n            })\n                .on('exit', (code, signal) => {\n                reject(new Error('BP exited with ' + code));\n                logger.error('Exited with ' + code);\n                logger.error('signal ' + signal);\n            });\n            this.bpProcess.stdout.on('data', (msg) => {\n                logger.debug(msg.toString().trim());\n            });\n            this.bpProcess.stderr.on('data', (msg) => {\n                logger.error(msg.toString().trim());\n            });\n            process.on('exit', () => {\n                this.bpProcess.kill();\n            });\n        });\n    }\n    checkSupportedConfig() {\n        if (this.config.directConnect) {\n            throw new Error('BlockingProxy not yet supported with directConnect!');\n        }\n    }\n}\nexports.BlockingProxyRunner = BlockingProxyRunner;\n//# sourceMappingURL=bpRunner.js.map"]},"metadata":{},"sourceType":"script"}