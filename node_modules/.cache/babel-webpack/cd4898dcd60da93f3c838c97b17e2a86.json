{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n */\n'use strict';\n\nvar _get = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar http = require('./http');\n\nvar io = require('./io');\n\nvar _require = require('./lib/capabilities'),\n    Capabilities = _require.Capabilities,\n    Capability = _require.Capability;\n\nvar command = require('./lib/command');\n\nvar error = require('./lib/error');\n\nvar logging = require('./lib/logging');\n\nvar promise = require('./lib/promise');\n\nvar Symbols = require('./lib/symbols');\n\nvar webdriver = require('./lib/webdriver');\n\nvar portprober = require('./net/portprober');\n\nvar remote = require('./remote');\n/**\n * @return {string} .\n * @throws {Error}\n */\n\n\nfunction findSafariDriver() {\n  var exe = io.findInPath('safaridriver', true);\n\n  if (!exe) {\n    throw Error(\"The safaridriver executable could not be found on the current PATH.\\n      Please ensure you are using Safari 10.0 or above.\");\n  }\n\n  return exe;\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\n\n\nvar ServiceBuilder = /*#__PURE__*/function (_remote$DriverService) {\n  _inherits(ServiceBuilder, _remote$DriverService);\n\n  var _super = _createSuper(ServiceBuilder);\n\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this;\n\n    _classCallCheck(this, ServiceBuilder);\n\n    _this = _super.call(this, opt_exe || findSafariDriver());\n\n    _this.setLoopback(true); // Required.\n\n\n    return _this;\n  }\n\n  return ServiceBuilder;\n}(remote.DriverService.Builder);\n\nvar OPTIONS_CAPABILITY_KEY = 'safari.options';\nvar TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview';\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\n\nvar Options = /*#__PURE__*/function () {\n  function Options() {\n    _classCallCheck(this, Options);\n\n    /** @private {Object<string, *>} */\n    this.options_ = null;\n    /** @private {./lib/logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?./lib/capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Extracts the SafariDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} capabilities The capabilities object.\n   * @return {!Options} The SafariDriver options.\n   */\n\n\n  _createClass(Options, [{\n    key: \"setCleanSession\",\n\n    /**\n     * Sets whether to force Safari to start with a clean session. Enabling this\n     * option will cause all global browser data to be deleted.\n     * @param {boolean} clean Whether to make sure the session has no cookies,\n     *     cache entries, local storage, or databases.\n     * @return {!Options} A self reference.\n     */\n    value: function setCleanSession(clean) {\n      if (!this.options_) {\n        this.options_ = {};\n      }\n\n      this.options_['cleanSession'] = clean;\n      return this;\n    }\n    /**\n     * Sets the logging preferences for the new session.\n     * @param {!./lib/logging.Preferences} prefs The logging preferences.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setLoggingPrefs\",\n    value: function setLoggingPrefs(prefs) {\n      this.logPrefs_ = prefs;\n      return this;\n    }\n    /**\n     * Sets the proxy to use.\n     *\n     * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n    /**\n     * Instruct the SafariDriver to use the Safari Technology Preview if true.\n     * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n     *\n     * @param {boolean} useTechnologyPreview\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setTechnologyPreview\",\n    value: function setTechnologyPreview(useTechnologyPreview) {\n      if (!this.options_) {\n        this.options_ = {};\n      }\n\n      this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview;\n      return this;\n    }\n    /**\n     * Converts this options instance to a {@link Capabilities} object.\n     * @param {Capabilities=} opt_capabilities The capabilities to\n     *     merge these options into, if any.\n     * @return {!Capabilities} The capabilities.\n     */\n\n  }, {\n    key: \"toCapabilities\",\n    value: function toCapabilities(opt_capabilities) {\n      var caps = opt_capabilities || Capabilities.safari();\n\n      if (this.logPrefs_) {\n        caps.set(Capability.LOGGING_PREFS, this.logPrefs_);\n      }\n\n      if (this.proxy_) {\n        caps.set(Capability.PROXY, this.proxy_);\n      }\n\n      if (this.options_) {\n        caps.set(OPTIONS_CAPABILITY_KEY, this);\n      }\n\n      return caps;\n    }\n    /**\n     * Converts this instance to its JSON wire protocol representation. Note this\n     * function is an implementation detail not intended for general use.\n     * @return {!Object<string, *>} The JSON wire protocol representation of this\n     *     instance.\n     */\n\n  }, {\n    key: Symbols.serialize,\n    value: function value() {\n      return this.options_ || {};\n    }\n  }], [{\n    key: \"fromCapabilities\",\n    value: function fromCapabilities(capabilities) {\n      var options = new Options();\n      var o = capabilities.get(OPTIONS_CAPABILITY_KEY);\n\n      if (o instanceof Options) {\n        options = o;\n      } else if (o) {\n        options.setCleanSession(o.cleanSession);\n        options.setTechnologyPreview(o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n      }\n\n      if (capabilities.has(Capability.PROXY)) {\n        options.setProxy(capabilities.get(Capability.PROXY));\n      }\n\n      if (capabilities.has(Capability.LOGGING_PREFS)) {\n        options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));\n      }\n\n      return options;\n    }\n  }]);\n\n  return Options;\n}();\n/**\n * @param  {(Options|Object<string, *>)=} o The options object\n * @return {boolean}\n */\n\n\nfunction useTechnologyPreview(o) {\n  if (o instanceof Options) {\n    return !!(o.options_ && o.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n  }\n\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY];\n  }\n\n  return false;\n}\n\nvar SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver';\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\n\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n\n  var _super2 = _createSuper(Driver);\n\n  function Driver() {\n    _classCallCheck(this, Driver);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Driver, null, [{\n    key: \"createSession\",\n\n    /**\n     * Creates a new Safari session.\n     *\n     * @param {(Options|Capabilities)=} opt_config The configuration\n     *     options for the new session.\n     * @param {promise.ControlFlow=} opt_flow The control flow to create\n     *     the driver under.\n     * @return {!Driver} A new driver instance.\n     */\n    value: function createSession(opt_config, opt_flow) {\n      var caps, exe;\n\n      if (opt_config instanceof Options) {\n        caps = opt_config.toCapabilities();\n      } else {\n        caps = opt_config || Capabilities.safari();\n      }\n\n      if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n        exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE;\n      }\n\n      var service = new ServiceBuilder(exe).build();\n      var executor = new http.Executor(service.start().then(function (url) {\n        return new http.HttpClient(url);\n      }));\n      return (\n        /** @type {!Driver} */\n        _get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, opt_flow, function () {\n          return service.kill();\n        })\n      );\n    }\n  }]);\n\n  return Driver;\n}(webdriver.WebDriver); // Public API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/safari.js"],"names":["http","require","io","Capabilities","Capability","command","error","logging","promise","Symbols","webdriver","portprober","remote","findSafariDriver","exe","findInPath","Error","ServiceBuilder","opt_exe","setLoopback","DriverService","Builder","OPTIONS_CAPABILITY_KEY","TECHNOLOGY_PREVIEW_OPTIONS_KEY","Options","options_","logPrefs_","proxy_","clean","prefs","proxy","useTechnologyPreview","opt_capabilities","caps","safari","set","LOGGING_PREFS","PROXY","serialize","capabilities","options","o","get","setCleanSession","cleanSession","setTechnologyPreview","has","setProxy","setLoggingPrefs","SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE","Driver","opt_config","opt_flow","toCapabilities","service","build","executor","Executor","start","then","url","HttpClient","kill","WebDriver","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;eACmCA,OAAO,CAAC,oBAAD,C;IAAnCE,Y,YAAAA,Y;IAAcC,U,YAAAA,U;;AACrB,IAAMC,OAAO,GAAGJ,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMK,KAAK,GAAGL,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMM,OAAO,GAAGN,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMO,OAAO,GAAGP,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMQ,OAAO,GAAGR,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMS,SAAS,GAAGT,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMU,UAAU,GAAGV,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAMW,MAAM,GAAGX,OAAO,CAAC,UAAD,CAAtB;AAGA;AACA;AACA;AACA;;;AACA,SAASY,gBAAT,GAA4B;AAC1B,MAAIC,GAAG,GAAGZ,EAAE,CAACa,UAAH,CAAc,cAAd,EAA8B,IAA9B,CAAV;;AACA,MAAI,CAACD,GAAL,EAAU;AACR,UAAME,KAAK,gIAAX;AAGD;;AACD,SAAOF,GAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;IACMG,c;;;;;AACJ;AACF;AACA;AACA;AACE,0BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAO,IAAIL,gBAAgB,EAAjC;;AACA,UAAKM,WAAL,CAAiB,IAAjB,EAFmB,CAEM;;;AAFN;AAGpB;;;EAR0BP,MAAM,CAACQ,aAAP,CAAqBC,O;;AAYlD,IAAMC,sBAAsB,GAAG,gBAA/B;AACA,IAAMC,8BAA8B,GAAG,mBAAvC;AAEA;AACA;AACA;;IACMC,O;AACJ,qBAAc;AAAA;;AACZ;AACA,SAAKC,QAAL,GAAgB,IAAhB;AAEA;;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;;AAuBE;AACF;AACA;AACA;AACA;AACA;AACA;oCACkBC,K,EAAO;AACrB,UAAI,CAAC,KAAKH,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,EAAhB;AACD;;AACD,WAAKA,QAAL,CAAc,cAAd,IAAgCG,KAAhC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;oCACkBC,K,EAAO;AACrB,WAAKH,SAAL,GAAiBG,KAAjB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;6BACWC,K,EAAO;AACd,WAAKH,MAAL,GAAcG,KAAd;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;yCACuBC,oB,EAAsB;AACzC,UAAI,CAAC,KAAKN,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,EAAhB;AACD;;AAED,WAAKA,QAAL,CAAcF,8BAAd,IAAgD,CAAC,CAACQ,oBAAlD;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;mCACiBC,gB,EAAkB;AAC/B,UAAIC,IAAI,GAAGD,gBAAgB,IAAI7B,YAAY,CAAC+B,MAAb,EAA/B;;AACA,UAAI,KAAKR,SAAT,EAAoB;AAClBO,QAAAA,IAAI,CAACE,GAAL,CAAS/B,UAAU,CAACgC,aAApB,EAAmC,KAAKV,SAAxC;AACD;;AACD,UAAI,KAAKC,MAAT,EAAiB;AACfM,QAAAA,IAAI,CAACE,GAAL,CAAS/B,UAAU,CAACiC,KAApB,EAA2B,KAAKV,MAAhC;AACD;;AACD,UAAI,KAAKF,QAAT,EAAmB;AACjBQ,QAAAA,IAAI,CAACE,GAAL,CAASb,sBAAT,EAAiC,IAAjC;AACD;;AACD,aAAOW,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;SACGxB,OAAO,CAAC6B,S;4BAAa;AACpB,aAAO,KAAKb,QAAL,IAAiB,EAAxB;AACD;;;qCAtGuBc,Y,EAAc;AACpC,UAAIC,OAAO,GAAG,IAAIhB,OAAJ,EAAd;AACA,UAAIiB,CAAC,GAAGF,YAAY,CAACG,GAAb,CAAiBpB,sBAAjB,CAAR;;AAEA,UAAImB,CAAC,YAAYjB,OAAjB,EAA0B;AACxBgB,QAAAA,OAAO,GAAGC,CAAV;AACD,OAFD,MAEO,IAAIA,CAAJ,EAAO;AACZD,QAAAA,OAAO,CAACG,eAAR,CAAwBF,CAAC,CAACG,YAA1B;AACAJ,QAAAA,OAAO,CAACK,oBAAR,CAA6BJ,CAAC,CAAClB,8BAAD,CAA9B;AACD;;AAED,UAAIgB,YAAY,CAACO,GAAb,CAAiB1C,UAAU,CAACiC,KAA5B,CAAJ,EAAwC;AACtCG,QAAAA,OAAO,CAACO,QAAR,CAAiBR,YAAY,CAACG,GAAb,CAAiBtC,UAAU,CAACiC,KAA5B,CAAjB;AACD;;AAED,UAAIE,YAAY,CAACO,GAAb,CAAiB1C,UAAU,CAACgC,aAA5B,CAAJ,EAAgD;AAC9CI,QAAAA,OAAO,CAACQ,eAAR,CAAwBT,YAAY,CAACG,GAAb,CAAiBtC,UAAU,CAACgC,aAA5B,CAAxB;AACD;;AAED,aAAOI,OAAP;AACD;;;;;AAqFH;AACA;AACA;AACA;;;AACA,SAAST,oBAAT,CAA8BU,CAA9B,EAAiC;AAC/B,MAAIA,CAAC,YAAYjB,OAAjB,EAA0B;AACxB,WAAO,CAAC,EAAEiB,CAAC,CAAChB,QAAF,IAAcgB,CAAC,CAAChB,QAAF,CAAWF,8BAAX,CAAhB,CAAR;AACD;;AAED,MAAIkB,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAtB,EAAgC;AAC9B,WAAO,CAAC,CAACA,CAAC,CAAClB,8BAAD,CAAV;AACD;;AAED,SAAO,KAAP;AACD;;AAED,IAAM0B,mCAAmC,GAAG,yEAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,M;;;;;;;;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCACuBC,U,EAAYC,Q,EAAU;AACzC,UAAInB,IAAJ,EAAUnB,GAAV;;AAEA,UAAIqC,UAAU,YAAY3B,OAA1B,EAAmC;AACjCS,QAAAA,IAAI,GAAGkB,UAAU,CAACE,cAAX,EAAP;AACD,OAFD,MAEO;AACLpB,QAAAA,IAAI,GAAGkB,UAAU,IAAIhD,YAAY,CAAC+B,MAAb,EAArB;AACD;;AAED,UAAIH,oBAAoB,CAACE,IAAI,CAACS,GAAL,CAASpB,sBAAT,CAAD,CAAxB,EAA4D;AAC1DR,QAAAA,GAAG,GAAGmC,mCAAN;AACD;;AAED,UAAIK,OAAO,GAAG,IAAIrC,cAAJ,CAAmBH,GAAnB,EAAwByC,KAAxB,EAAd;AACA,UAAIC,QAAQ,GAAG,IAAIxD,IAAI,CAACyD,QAAT,CACXH,OAAO,CAACI,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,GAAG;AAAA,eAAI,IAAI5D,IAAI,CAAC6D,UAAT,CAAoBD,GAApB,CAAJ;AAAA,OAAxB,CADW,CAAf;AAGA;AAAO;AAAP,wEACIJ,QADJ,EACcvB,IADd,EACoBmB,QADpB,EAC8B;AAAA,iBAAME,OAAO,CAACQ,IAAR,EAAN;AAAA,SAD9B;AAAA;AAED;;;;EA7BkBpD,SAAS,CAACqD,S,GAiC/B;;;AAGAC,OAAO,CAACd,MAAR,GAAiBA,MAAjB;AACAc,OAAO,CAACxC,OAAR,GAAkBA,OAAlB;AACAwC,OAAO,CAAC/C,cAAR,GAAyBA,cAAzB","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n */\n\n'use strict';\n\nconst http = require('./http');\nconst io = require('./io');\nconst {Capabilities, Capability} = require('./lib/capabilities');\nconst command = require('./lib/command');\nconst error = require('./lib/error');\nconst logging = require('./lib/logging');\nconst promise = require('./lib/promise');\nconst Symbols = require('./lib/symbols');\nconst webdriver = require('./lib/webdriver');\nconst portprober = require('./net/portprober');\nconst remote = require('./remote');\n\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findSafariDriver() {\n  let exe = io.findInPath('safaridriver', true);\n  if (!exe) {\n    throw Error(\n      `The safaridriver executable could not be found on the current PATH.\n      Please ensure you are using Safari 10.0 or above.`);\n  }\n  return exe;\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findSafariDriver());\n    this.setLoopback(true);  // Required.\n  }\n}\n\n\nconst OPTIONS_CAPABILITY_KEY = 'safari.options';\nconst TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview';\n\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\nclass Options {\n  constructor() {\n    /** @private {Object<string, *>} */\n    this.options_ = null;\n\n    /** @private {./lib/logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?./lib/capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the SafariDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} capabilities The capabilities object.\n   * @return {!Options} The SafariDriver options.\n   */\n  static fromCapabilities(capabilities) {\n    var options = new Options();\n    var o = capabilities.get(OPTIONS_CAPABILITY_KEY);\n\n    if (o instanceof Options) {\n      options = o;\n    } else if (o) {\n      options.setCleanSession(o.cleanSession);\n      options.setTechnologyPreview(o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n    }\n\n    if (capabilities.has(Capability.PROXY)) {\n      options.setProxy(capabilities.get(Capability.PROXY));\n    }\n\n    if (capabilities.has(Capability.LOGGING_PREFS)) {\n      options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));\n    }\n\n    return options;\n  }\n\n  /**\n   * Sets whether to force Safari to start with a clean session. Enabling this\n   * option will cause all global browser data to be deleted.\n   * @param {boolean} clean Whether to make sure the session has no cookies,\n   *     cache entries, local storage, or databases.\n   * @return {!Options} A self reference.\n   */\n  setCleanSession(clean) {\n    if (!this.options_) {\n      this.options_ = {};\n    }\n    this.options_['cleanSession'] = clean;\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {!./lib/logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Instruct the SafariDriver to use the Safari Technology Preview if true.\n   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n   *\n   * @param {boolean} useTechnologyPreview\n   * @return {!Options} A self reference.\n   */\n  setTechnologyPreview(useTechnologyPreview) {\n    if (!this.options_) {\n      this.options_ = {};\n    }\n\n    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview;\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link Capabilities} object.\n   * @param {Capabilities=} opt_capabilities The capabilities to\n   *     merge these options into, if any.\n   * @return {!Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    var caps = opt_capabilities || Capabilities.safari();\n    if (this.logPrefs_) {\n      caps.set(Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n    if (this.proxy_) {\n      caps.set(Capability.PROXY, this.proxy_);\n    }\n    if (this.options_) {\n      caps.set(OPTIONS_CAPABILITY_KEY, this);\n    }\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation detail not intended for general use.\n   * @return {!Object<string, *>} The JSON wire protocol representation of this\n   *     instance.\n   */\n  [Symbols.serialize]() {\n    return this.options_ || {};\n  }\n}\n\n/**\n * @param  {(Options|Object<string, *>)=} o The options object\n * @return {boolean}\n */\nfunction useTechnologyPreview(o) {\n  if (o instanceof Options) {\n    return !!(o.options_ && o.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n  }\n\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY];\n  }\n\n  return false;\n}\n\nconst SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver';\n\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Safari session.\n   *\n   * @param {(Options|Capabilities)=} opt_config The configuration\n   *     options for the new session.\n   * @param {promise.ControlFlow=} opt_flow The control flow to create\n   *     the driver under.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_flow) {\n    let caps, exe;\n\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = opt_config || Capabilities.safari();\n    }\n\n    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE;\n    }\n\n    let service = new ServiceBuilder(exe).build();\n    let executor = new http.Executor(\n        service.start().then(url => new http.HttpClient(url)));\n\n    return /** @type {!Driver} */(super.createSession(\n        executor, caps, opt_flow, () => service.kill()));\n  }\n}\n\n\n// Public API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\n"]},"metadata":{},"sourceType":"script"}