{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar cli_1 = require(\"./cli\");\n\nvar logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\n\nvar Config = /*#__PURE__*/function () {\n  function Config() {\n    _classCallCheck(this, Config);\n  }\n\n  _createClass(Config, null, [{\n    key: \"osArch\",\n    value: function osArch() {\n      return Config.osArch_;\n    }\n  }, {\n    key: \"osType\",\n    value: function osType() {\n      return Config.osType_;\n    }\n  }, {\n    key: \"noProxy\",\n    value: function noProxy() {\n      return Config.noProxy_;\n    }\n  }, {\n    key: \"httpProxy\",\n    value: function httpProxy() {\n      return Config.httpProxy_;\n    }\n  }, {\n    key: \"httpsProxy\",\n    value: function httpsProxy() {\n      return Config.httpsProxy_;\n    }\n  }, {\n    key: \"getConfigFile_\",\n    value: function getConfigFile_() {\n      return path.resolve(Config.dir, '..', Config.configFile);\n    }\n  }, {\n    key: \"getPackageFile_\",\n    value: function getPackageFile_() {\n      return path.resolve(Config.dir, '..', Config.packageFile);\n    }\n  }, {\n    key: \"getSeleniumDir\",\n    value: function getSeleniumDir() {\n      return path.resolve(Config.dir, '..', '..', 'selenium/');\n    }\n  }, {\n    key: \"getBaseDir\",\n    value: function getBaseDir() {\n      return path.resolve(Config.dir, '..', '..');\n    }\n    /**\n     * Get the binary versions from the configuration file.\n     * @returns A map of the versions defined in the configuration file.\n     */\n\n  }, {\n    key: \"binaryVersions\",\n    value: function binaryVersions() {\n      var configFile = require(Config.getConfigFile_());\n\n      var configVersions = {};\n      configVersions.selenium = configFile.webdriverVersions.selenium;\n      configVersions.chrome = configFile.webdriverVersions.chromedriver;\n      configVersions.gecko = configFile.webdriverVersions.geckodriver;\n      configVersions.ie = configFile.webdriverVersions.iedriver;\n      configVersions.android = configFile.webdriverVersions.androidsdk;\n      configVersions.appium = configFile.webdriverVersions.appium;\n      configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n      return configVersions;\n    }\n    /**\n     * Get the CDN urls from the configuration file.\n     * @returns A map of the CDN versions defined in the configuration file.\n     */\n\n  }, {\n    key: \"cdnUrls\",\n    value: function cdnUrls() {\n      var configFile = require(Config.getConfigFile_());\n\n      var configCdnUrls = {};\n      configCdnUrls.selenium = configFile.cdnUrls.selenium;\n      configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n      configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n      configCdnUrls.ie = configFile.cdnUrls.iedriver;\n      configCdnUrls.android = configFile.cdnUrls.androidsdk;\n      return configCdnUrls;\n    }\n    /**\n     * Get the package version.\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      var packageFile = require(Config.getPackageFile_());\n\n      return packageFile.version;\n    }\n  }]);\n\n  return Config;\n}();\n\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config;","map":{"version":3,"sources":["../../lib/config.ts"],"names":[],"mappings":";;;;;;;;;;AACA,IAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,IAAI,MAAM,GAAG,IAAI,KAAA,CAAA,MAAJ,CAAW,QAAX,CAAb;AAaA;;;;;;AAMG;;IACH,M;;;;;;;6BAsBe;AACX,aAAO,MAAM,CAAC,OAAd;AACD;;;6BAEY;AACX,aAAO,MAAM,CAAC,OAAd;AACD;;;8BAEa;AACZ,aAAO,MAAM,CAAC,QAAd;AACD;;;gCAEe;AACd,aAAO,MAAM,CAAC,UAAd;AACD;;;iCAEgB;AACf,aAAO,MAAM,CAAC,WAAd;AACD;;;qCAEoB;AACnB,aAAO,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,GAApB,EAAyB,IAAzB,EAA+B,MAAM,CAAC,UAAtC,CAAP;AACD;;;sCAEqB;AACpB,aAAO,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,GAApB,EAAyB,IAAzB,EAA+B,MAAM,CAAC,WAAtC,CAAP;AACD;;;qCAEoB;AACnB,aAAO,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,GAApB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,WAArC,CAAP;AACD;;;iCACgB;AACf,aAAO,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,GAApB,EAAyB,IAAzB,EAA+B,IAA/B,CAAP;AACD;AAED;;;AAGG;;;;qCACkB;AACnB,UAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,cAAP,EAAD,CAAxB;;AACA,UAAI,cAAc,GAAe,EAAjC;AACA,MAAA,cAAc,CAAC,QAAf,GAA0B,UAAU,CAAC,iBAAX,CAA6B,QAAvD;AACA,MAAA,cAAc,CAAC,MAAf,GAAwB,UAAU,CAAC,iBAAX,CAA6B,YAArD;AACA,MAAA,cAAc,CAAC,KAAf,GAAuB,UAAU,CAAC,iBAAX,CAA6B,WAApD;AACA,MAAA,cAAc,CAAC,EAAf,GAAoB,UAAU,CAAC,iBAAX,CAA6B,QAAjD;AACA,MAAA,cAAc,CAAC,OAAf,GAAyB,UAAU,CAAC,iBAAX,CAA6B,UAAtD;AACA,MAAA,cAAc,CAAC,MAAf,GAAwB,UAAU,CAAC,iBAAX,CAA6B,MAArD;AACA,MAAA,cAAc,CAAC,SAAf,GAA2B,UAAU,CAAC,iBAAX,CAA6B,eAAxD;AACA,aAAO,cAAP;AACD;AAED;;;AAGG;;;;8BACW;AACZ,UAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,cAAP,EAAD,CAAxB;;AACA,UAAI,aAAa,GAAe,EAAhC;AACA,MAAA,aAAa,CAAC,QAAd,GAAyB,UAAU,CAAC,OAAX,CAAmB,QAA5C;AACA,MAAA,aAAa,CAAC,MAAd,GAAuB,UAAU,CAAC,OAAX,CAAmB,YAA1C;AACA,MAAA,aAAa,CAAC,KAAd,GAAsB,UAAU,CAAC,OAAX,CAAmB,WAAzC;AACA,MAAA,aAAa,CAAC,EAAd,GAAmB,UAAU,CAAC,OAAX,CAAmB,QAAtC;AACA,MAAA,aAAa,CAAC,OAAd,GAAwB,UAAU,CAAC,OAAX,CAAmB,UAA3C;AACA,aAAO,aAAP;AACD;AAED;;AAEG;;;;iCACc;AACf,UAAI,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,eAAP,EAAD,CAAzB;;AACA,aAAO,WAAW,CAAC,OAAnB;AACD;;;;;;AA5FM,MAAA,CAAA,UAAA,GAAqB,aAArB;AACA,MAAA,CAAA,WAAA,GAAsB,cAAtB;AACA,MAAA,CAAA,cAAA,GAAiB,mBAAjB;AAEA,MAAA,CAAA,GAAA,GAAM,OAAO,CAAC,GAAR,EAAN;AAEA,MAAA,CAAA,UAAA,GAAa,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,GAApB,EAAyB,IAAzB,CAAb;AACA,MAAA,CAAA,GAAA,GAAM,SAAN;AACA,MAAA,CAAA,MAAA,GAAS,MAAM,CAAC,GAAP,CAAW,OAAX,CAAmB,MAAM,CAAC,UAA1B,EAAsC,EAAtC,EAA0C,SAA1C,CAAoD,CAApD,CAAT;AAEA,MAAA,CAAA,gBAAA,GAAmB,MAAM,CAAC,MAAP,KAAkB,MAAM,CAAC,cAA5C;AACA,MAAA,CAAA,cAAA,GAAiB,KAAjB;AAEA,MAAA,CAAA,OAAA,GAAU,EAAE,CAAC,IAAH,EAAV;AACA,MAAA,CAAA,OAAA,GAAU,EAAE,CAAC,IAAH,EAAV;AACA,MAAA,CAAA,QAAA,GAAW,OAAO,CAAC,GAAR,CAAY,QAAZ,IAAwB,OAAO,CAAC,GAAR,CAAY,QAA/C;AACA,MAAA,CAAA,WAAA,GAAc,OAAO,CAAC,GAAR,CAAY,WAAZ,IAA2B,OAAO,CAAC,GAAR,CAAY,WAArD;AACA,MAAA,CAAA,UAAA,GAAa,OAAO,CAAC,GAAR,CAAY,UAAZ,IAA0B,OAAO,CAAC,GAAR,CAAY,UAAnD;AApBT,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst cli_1 = require(\"./cli\");\nlet logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\nclass Config {\n    static osArch() {\n        return Config.osArch_;\n    }\n    static osType() {\n        return Config.osType_;\n    }\n    static noProxy() {\n        return Config.noProxy_;\n    }\n    static httpProxy() {\n        return Config.httpProxy_;\n    }\n    static httpsProxy() {\n        return Config.httpsProxy_;\n    }\n    static getConfigFile_() {\n        return path.resolve(Config.dir, '..', Config.configFile);\n    }\n    static getPackageFile_() {\n        return path.resolve(Config.dir, '..', Config.packageFile);\n    }\n    static getSeleniumDir() {\n        return path.resolve(Config.dir, '..', '..', 'selenium/');\n    }\n    static getBaseDir() {\n        return path.resolve(Config.dir, '..', '..');\n    }\n    /**\n     * Get the binary versions from the configuration file.\n     * @returns A map of the versions defined in the configuration file.\n     */\n    static binaryVersions() {\n        let configFile = require(Config.getConfigFile_());\n        let configVersions = {};\n        configVersions.selenium = configFile.webdriverVersions.selenium;\n        configVersions.chrome = configFile.webdriverVersions.chromedriver;\n        configVersions.gecko = configFile.webdriverVersions.geckodriver;\n        configVersions.ie = configFile.webdriverVersions.iedriver;\n        configVersions.android = configFile.webdriverVersions.androidsdk;\n        configVersions.appium = configFile.webdriverVersions.appium;\n        configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n        return configVersions;\n    }\n    /**\n     * Get the CDN urls from the configuration file.\n     * @returns A map of the CDN versions defined in the configuration file.\n     */\n    static cdnUrls() {\n        let configFile = require(Config.getConfigFile_());\n        let configCdnUrls = {};\n        configCdnUrls.selenium = configFile.cdnUrls.selenium;\n        configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n        configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n        configCdnUrls.ie = configFile.cdnUrls.iedriver;\n        configCdnUrls.android = configFile.cdnUrls.androidsdk;\n        return configCdnUrls;\n    }\n    /**\n     * Get the package version.\n     */\n    static getVersion() {\n        let packageFile = require(Config.getPackageFile_());\n        return packageFile.version;\n    }\n}\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config;\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"script"}