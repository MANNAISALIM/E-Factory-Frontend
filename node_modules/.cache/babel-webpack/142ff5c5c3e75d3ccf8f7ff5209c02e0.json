{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Utilities for parsing WebDriver commands from HTTP Requests.\n */\n\nvar events = require(\"events\");\n\nvar CommandName;\n\n(function (CommandName) {\n  CommandName[CommandName[\"NewSession\"] = 0] = \"NewSession\";\n  CommandName[CommandName[\"DeleteSession\"] = 1] = \"DeleteSession\";\n  CommandName[CommandName[\"Status\"] = 2] = \"Status\";\n  CommandName[CommandName[\"GetTimeouts\"] = 3] = \"GetTimeouts\";\n  CommandName[CommandName[\"SetTimeouts\"] = 4] = \"SetTimeouts\";\n  CommandName[CommandName[\"Go\"] = 5] = \"Go\";\n  CommandName[CommandName[\"GetCurrentURL\"] = 6] = \"GetCurrentURL\";\n  CommandName[CommandName[\"Back\"] = 7] = \"Back\";\n  CommandName[CommandName[\"Forward\"] = 8] = \"Forward\";\n  CommandName[CommandName[\"Refresh\"] = 9] = \"Refresh\";\n  CommandName[CommandName[\"GetTitle\"] = 10] = \"GetTitle\";\n  CommandName[CommandName[\"FindElement\"] = 11] = \"FindElement\";\n  CommandName[CommandName[\"FindElements\"] = 12] = \"FindElements\";\n  CommandName[CommandName[\"FindElementFromElement\"] = 13] = \"FindElementFromElement\";\n  CommandName[CommandName[\"FindElementsFromElement\"] = 14] = \"FindElementsFromElement\";\n  CommandName[CommandName[\"IsElementSelected\"] = 15] = \"IsElementSelected\";\n  CommandName[CommandName[\"GetElementAttribute\"] = 16] = \"GetElementAttribute\";\n  CommandName[CommandName[\"GetElementProperty\"] = 17] = \"GetElementProperty\";\n  CommandName[CommandName[\"GetElementCSSValue\"] = 18] = \"GetElementCSSValue\";\n  CommandName[CommandName[\"GetElementText\"] = 19] = \"GetElementText\";\n  CommandName[CommandName[\"GetElementTagName\"] = 20] = \"GetElementTagName\";\n  CommandName[CommandName[\"GetElementRect\"] = 21] = \"GetElementRect\";\n  CommandName[CommandName[\"IsElementEnabled\"] = 22] = \"IsElementEnabled\";\n  CommandName[CommandName[\"ElementClick\"] = 23] = \"ElementClick\";\n  CommandName[CommandName[\"ElementClear\"] = 24] = \"ElementClear\";\n  CommandName[CommandName[\"ElementSendKeys\"] = 25] = \"ElementSendKeys\";\n  CommandName[CommandName[\"WireMoveTo\"] = 26] = \"WireMoveTo\";\n  CommandName[CommandName[\"WireButtonDown\"] = 27] = \"WireButtonDown\";\n  CommandName[CommandName[\"WireButtonUp\"] = 28] = \"WireButtonUp\";\n  CommandName[CommandName[\"GetAlertText\"] = 29] = \"GetAlertText\";\n  CommandName[CommandName[\"AcceptAlert\"] = 30] = \"AcceptAlert\";\n  CommandName[CommandName[\"DismissAlert\"] = 31] = \"DismissAlert\";\n  CommandName[CommandName[\"UNKNOWN\"] = 32] = \"UNKNOWN\";\n})(CommandName = exports.CommandName || (exports.CommandName = {}));\n/**\n * Represents an endpoint in the WebDriver spec. Endpoints are defined by\n * the CommandName enum and the url pattern that they match.\n *\n * For example, the pattern\n *     /session/:sessionId/element/:elementId/click\n * will match urls such as\n *     /session/d9e52b96-9b6a-4cb3-b017-76e8b4236646/element/1c2855ba-213d-4466-ba16-b14a7e6c3699/click\n *\n * @param pattern The url pattern\n * @param method The HTTP method, ie GET, POST, DELETE\n * @param name The CommandName of this endpoint.\n */\n\n\nvar Endpoint = /*#__PURE__*/function () {\n  function Endpoint(pattern, method, name) {\n    _classCallCheck(this, Endpoint);\n\n    this.pattern = pattern;\n    this.method = method;\n    this.name = name;\n  }\n  /**\n   * Tests whether a given url from a request matches this endpoint.\n   *\n   * @param url A url from a request to test against the endpoint.\n   * @param method The HTTP method.\n   * @returns {boolean} Whether the endpoint matches.\n   */\n\n\n  _createClass(Endpoint, [{\n    key: \"matches\",\n    value: function matches(url, method) {\n      var urlParts = url.split('/');\n      var patternParts = this.pattern.split('/');\n\n      if (method != this.method || urlParts.length != patternParts.length) {\n        return false;\n      } // TODO: Replace this naive search with better parsing.\n\n\n      for (var idx in patternParts) {\n        if (!patternParts[idx].startsWith(':') && patternParts[idx] != urlParts[idx]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Given a url from a http request, create an object containing parameters from the URL.\n     *\n     * Parameters are the parts of the endpoint's pattern that start with ':'. The ':' is dropped\n     * from the parameter key.\n     *\n     * @param url The url from the request.\n     * @returns An object mapping parameter keys to values from the url.\n     */\n\n  }, {\n    key: \"getParams\",\n    value: function getParams(url) {\n      var urlParts = url.split('/');\n      var patternParts = this.pattern.split('/');\n      var params = {};\n\n      for (var idx in patternParts) {\n        if (patternParts[idx].startsWith(':')) {\n          var paramName = patternParts[idx].slice(1);\n          params[paramName] = urlParts[idx];\n        }\n      }\n\n      return params;\n    }\n  }]);\n\n  return Endpoint;\n}();\n/**\n * An instance of a WebDriver command, containing the params and data for that request.\n *\n * @param commandName The enum identifying the command.\n * @param params Parameters for the command taken from the request's url.\n * @param data Optional data included with the command, taken from the body of the request.\n */\n\n\nvar WebDriverCommand = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(WebDriverCommand, _events$EventEmitter);\n\n  var _super = _createSuper(WebDriverCommand);\n\n  function WebDriverCommand(commandName, url, method, params) {\n    var _this;\n\n    _classCallCheck(this, WebDriverCommand);\n\n    _this = _super.call(this);\n    _this.commandName = commandName;\n    _this.url = url;\n    _this.method = method;\n    _this.params = params;\n    return _this;\n  } // All WebDriver commands have a session Id, except for two.\n  // NewSession will have a session Id in the data\n  // Status just doesn't\n\n\n  _createClass(WebDriverCommand, [{\n    key: \"getParam\",\n    value: function getParam(key) {\n      return this.params[key];\n    }\n  }, {\n    key: \"handleData\",\n    value: function handleData(data) {\n      try {\n        this.data = JSON.parse(data);\n      } catch (err) {\n        this.data = data;\n      }\n\n      this.emit('data');\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(statusCode, data) {\n      this.responseStatus = statusCode;\n\n      try {\n        this.responseData = JSON.parse(data);\n      } catch (err) {\n        this.responseData = data;\n      }\n\n      this.emit('response');\n    }\n  }, {\n    key: \"sessionId\",\n    get: function get() {\n      if (!this.getParam('sessionId') && this.url.startsWith('/session')) {\n        return this.url.split('/')[2];\n      }\n\n      return this.getParam('sessionId');\n    }\n  }]);\n\n  return WebDriverCommand;\n}(events.EventEmitter);\n\nexports.WebDriverCommand = WebDriverCommand;\n/**\n * The set of known endpoints.\n */\n\nvar endpoints = [];\n\nfunction addWebDriverCommand(command, method, pattern) {\n  endpoints.push(new Endpoint(pattern, method, command));\n}\n/**\n * Returns a new WebdriverCommand object for the resource at the given URL.\n */\n\n\nfunction parseWebDriverCommand(url, method) {\n  var _iterator = _createForOfIteratorHelper(endpoints),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var endpoint = _step.value;\n\n      if (endpoint.matches(url, method)) {\n        var params = endpoint.getParams(url);\n        return new WebDriverCommand(endpoint.name, url, method, params);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return new WebDriverCommand(CommandName.UNKNOWN, url, method, {});\n}\n\nexports.parseWebDriverCommand = parseWebDriverCommand;\nvar sessionPrefix = '/session/:sessionId';\naddWebDriverCommand(CommandName.NewSession, 'POST', '/session');\naddWebDriverCommand(CommandName.DeleteSession, 'DELETE', '/session/:sessionId');\naddWebDriverCommand(CommandName.Status, 'GET', '/status');\naddWebDriverCommand(CommandName.GetTimeouts, 'GET', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.SetTimeouts, 'POST', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.Go, 'POST', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.GetCurrentURL, 'GET', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.Back, 'POST', sessionPrefix + '/back');\naddWebDriverCommand(CommandName.Forward, 'POST', sessionPrefix + '/forward');\naddWebDriverCommand(CommandName.Refresh, 'POST', sessionPrefix + '/refresh');\naddWebDriverCommand(CommandName.GetTitle, 'GET', sessionPrefix + '/title');\naddWebDriverCommand(CommandName.FindElement, 'POST', sessionPrefix + '/element');\naddWebDriverCommand(CommandName.FindElements, 'POST', sessionPrefix + '/elements');\naddWebDriverCommand(CommandName.FindElementFromElement, 'POST', sessionPrefix + '/element/:elementId/element');\naddWebDriverCommand(CommandName.FindElementsFromElement, 'POST', sessionPrefix + '/element/:elementId/elements');\naddWebDriverCommand(CommandName.IsElementSelected, 'POST', sessionPrefix + '/element/:elementId/selected');\naddWebDriverCommand(CommandName.GetElementAttribute, 'GET', sessionPrefix + '/element/:elementId/attribute/:attributeName');\naddWebDriverCommand(CommandName.GetElementProperty, 'GET', sessionPrefix + '/element/:elementId/property/:propertyName');\naddWebDriverCommand(CommandName.GetElementCSSValue, 'GET', sessionPrefix + '/element/:elementId/css/:cssPropertyName');\naddWebDriverCommand(CommandName.GetElementText, 'GET', sessionPrefix + '/element/:elementId/text');\naddWebDriverCommand(CommandName.GetElementTagName, 'GET', sessionPrefix + '/element/:elementId/name');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/rect');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/size');\naddWebDriverCommand(CommandName.IsElementEnabled, 'GET', sessionPrefix + '/element/:elementId/enabled');\naddWebDriverCommand(CommandName.ElementClick, 'POST', sessionPrefix + '/element/:elementId/click');\naddWebDriverCommand(CommandName.ElementClear, 'POST', sessionPrefix + '/element/:elementId/clear');\naddWebDriverCommand(CommandName.ElementSendKeys, 'POST', sessionPrefix + '/element/:elementId/value');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert_text');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert/text');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/alert/accept');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/accept_alert');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/alert/dismiss');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/dismiss_alert'); // These commands are part of the JSON protocol, and were replaced by Perform Actions in the W3C\n// spec\n\naddWebDriverCommand(CommandName.WireMoveTo, 'POST', sessionPrefix + '/moveto');\naddWebDriverCommand(CommandName.WireButtonDown, 'POST', sessionPrefix + '/buttondown');\naddWebDriverCommand(CommandName.WireButtonUp, 'POST', sessionPrefix + '/buttonup');","map":{"version":3,"sources":["../../lib/webdriver_commands.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Utilities for parsing WebDriver commands from HTTP Requests.\n */\nconst events = require(\"events\");\nvar CommandName;\n(function (CommandName) {\n    CommandName[CommandName[\"NewSession\"] = 0] = \"NewSession\";\n    CommandName[CommandName[\"DeleteSession\"] = 1] = \"DeleteSession\";\n    CommandName[CommandName[\"Status\"] = 2] = \"Status\";\n    CommandName[CommandName[\"GetTimeouts\"] = 3] = \"GetTimeouts\";\n    CommandName[CommandName[\"SetTimeouts\"] = 4] = \"SetTimeouts\";\n    CommandName[CommandName[\"Go\"] = 5] = \"Go\";\n    CommandName[CommandName[\"GetCurrentURL\"] = 6] = \"GetCurrentURL\";\n    CommandName[CommandName[\"Back\"] = 7] = \"Back\";\n    CommandName[CommandName[\"Forward\"] = 8] = \"Forward\";\n    CommandName[CommandName[\"Refresh\"] = 9] = \"Refresh\";\n    CommandName[CommandName[\"GetTitle\"] = 10] = \"GetTitle\";\n    CommandName[CommandName[\"FindElement\"] = 11] = \"FindElement\";\n    CommandName[CommandName[\"FindElements\"] = 12] = \"FindElements\";\n    CommandName[CommandName[\"FindElementFromElement\"] = 13] = \"FindElementFromElement\";\n    CommandName[CommandName[\"FindElementsFromElement\"] = 14] = \"FindElementsFromElement\";\n    CommandName[CommandName[\"IsElementSelected\"] = 15] = \"IsElementSelected\";\n    CommandName[CommandName[\"GetElementAttribute\"] = 16] = \"GetElementAttribute\";\n    CommandName[CommandName[\"GetElementProperty\"] = 17] = \"GetElementProperty\";\n    CommandName[CommandName[\"GetElementCSSValue\"] = 18] = \"GetElementCSSValue\";\n    CommandName[CommandName[\"GetElementText\"] = 19] = \"GetElementText\";\n    CommandName[CommandName[\"GetElementTagName\"] = 20] = \"GetElementTagName\";\n    CommandName[CommandName[\"GetElementRect\"] = 21] = \"GetElementRect\";\n    CommandName[CommandName[\"IsElementEnabled\"] = 22] = \"IsElementEnabled\";\n    CommandName[CommandName[\"ElementClick\"] = 23] = \"ElementClick\";\n    CommandName[CommandName[\"ElementClear\"] = 24] = \"ElementClear\";\n    CommandName[CommandName[\"ElementSendKeys\"] = 25] = \"ElementSendKeys\";\n    CommandName[CommandName[\"WireMoveTo\"] = 26] = \"WireMoveTo\";\n    CommandName[CommandName[\"WireButtonDown\"] = 27] = \"WireButtonDown\";\n    CommandName[CommandName[\"WireButtonUp\"] = 28] = \"WireButtonUp\";\n    CommandName[CommandName[\"GetAlertText\"] = 29] = \"GetAlertText\";\n    CommandName[CommandName[\"AcceptAlert\"] = 30] = \"AcceptAlert\";\n    CommandName[CommandName[\"DismissAlert\"] = 31] = \"DismissAlert\";\n    CommandName[CommandName[\"UNKNOWN\"] = 32] = \"UNKNOWN\";\n})(CommandName = exports.CommandName || (exports.CommandName = {}));\n/**\n * Represents an endpoint in the WebDriver spec. Endpoints are defined by\n * the CommandName enum and the url pattern that they match.\n *\n * For example, the pattern\n *     /session/:sessionId/element/:elementId/click\n * will match urls such as\n *     /session/d9e52b96-9b6a-4cb3-b017-76e8b4236646/element/1c2855ba-213d-4466-ba16-b14a7e6c3699/click\n *\n * @param pattern The url pattern\n * @param method The HTTP method, ie GET, POST, DELETE\n * @param name The CommandName of this endpoint.\n */\nclass Endpoint {\n    constructor(pattern, method, name) {\n        this.pattern = pattern;\n        this.method = method;\n        this.name = name;\n    }\n    /**\n     * Tests whether a given url from a request matches this endpoint.\n     *\n     * @param url A url from a request to test against the endpoint.\n     * @param method The HTTP method.\n     * @returns {boolean} Whether the endpoint matches.\n     */\n    matches(url, method) {\n        let urlParts = url.split('/');\n        let patternParts = this.pattern.split('/');\n        if (method != this.method || urlParts.length != patternParts.length) {\n            return false;\n        }\n        // TODO: Replace this naive search with better parsing.\n        for (let idx in patternParts) {\n            if (!patternParts[idx].startsWith(':') && patternParts[idx] != urlParts[idx]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Given a url from a http request, create an object containing parameters from the URL.\n     *\n     * Parameters are the parts of the endpoint's pattern that start with ':'. The ':' is dropped\n     * from the parameter key.\n     *\n     * @param url The url from the request.\n     * @returns An object mapping parameter keys to values from the url.\n     */\n    getParams(url) {\n        let urlParts = url.split('/');\n        let patternParts = this.pattern.split('/');\n        let params = {};\n        for (let idx in patternParts) {\n            if (patternParts[idx].startsWith(':')) {\n                let paramName = patternParts[idx].slice(1);\n                params[paramName] = urlParts[idx];\n            }\n        }\n        return params;\n    }\n}\n/**\n * An instance of a WebDriver command, containing the params and data for that request.\n *\n * @param commandName The enum identifying the command.\n * @param params Parameters for the command taken from the request's url.\n * @param data Optional data included with the command, taken from the body of the request.\n */\nclass WebDriverCommand extends events.EventEmitter {\n    constructor(commandName, url, method, params) {\n        super();\n        this.commandName = commandName;\n        this.url = url;\n        this.method = method;\n        this.params = params;\n    }\n    // All WebDriver commands have a session Id, except for two.\n    // NewSession will have a session Id in the data\n    // Status just doesn't\n    get sessionId() {\n        if (!this.getParam('sessionId') && this.url.startsWith('/session')) {\n            return this.url.split('/')[2];\n        }\n        return this.getParam('sessionId');\n    }\n    getParam(key) {\n        return this.params[key];\n    }\n    handleData(data) {\n        try {\n            this.data = JSON.parse(data);\n        }\n        catch (err) {\n            this.data = data;\n        }\n        this.emit('data');\n    }\n    handleResponse(statusCode, data) {\n        this.responseStatus = statusCode;\n        try {\n            this.responseData = JSON.parse(data);\n        }\n        catch (err) {\n            this.responseData = data;\n        }\n        this.emit('response');\n    }\n}\nexports.WebDriverCommand = WebDriverCommand;\n/**\n * The set of known endpoints.\n */\nlet endpoints = [];\nfunction addWebDriverCommand(command, method, pattern) {\n    endpoints.push(new Endpoint(pattern, method, command));\n}\n/**\n * Returns a new WebdriverCommand object for the resource at the given URL.\n */\nfunction parseWebDriverCommand(url, method) {\n    for (let endpoint of endpoints) {\n        if (endpoint.matches(url, method)) {\n            let params = endpoint.getParams(url);\n            return new WebDriverCommand(endpoint.name, url, method, params);\n        }\n    }\n    return new WebDriverCommand(CommandName.UNKNOWN, url, method, {});\n}\nexports.parseWebDriverCommand = parseWebDriverCommand;\nlet sessionPrefix = '/session/:sessionId';\naddWebDriverCommand(CommandName.NewSession, 'POST', '/session');\naddWebDriverCommand(CommandName.DeleteSession, 'DELETE', '/session/:sessionId');\naddWebDriverCommand(CommandName.Status, 'GET', '/status');\naddWebDriverCommand(CommandName.GetTimeouts, 'GET', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.SetTimeouts, 'POST', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.Go, 'POST', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.GetCurrentURL, 'GET', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.Back, 'POST', sessionPrefix + '/back');\naddWebDriverCommand(CommandName.Forward, 'POST', sessionPrefix + '/forward');\naddWebDriverCommand(CommandName.Refresh, 'POST', sessionPrefix + '/refresh');\naddWebDriverCommand(CommandName.GetTitle, 'GET', sessionPrefix + '/title');\naddWebDriverCommand(CommandName.FindElement, 'POST', sessionPrefix + '/element');\naddWebDriverCommand(CommandName.FindElements, 'POST', sessionPrefix + '/elements');\naddWebDriverCommand(CommandName.FindElementFromElement, 'POST', sessionPrefix + '/element/:elementId/element');\naddWebDriverCommand(CommandName.FindElementsFromElement, 'POST', sessionPrefix + '/element/:elementId/elements');\naddWebDriverCommand(CommandName.IsElementSelected, 'POST', sessionPrefix + '/element/:elementId/selected');\naddWebDriverCommand(CommandName.GetElementAttribute, 'GET', sessionPrefix + '/element/:elementId/attribute/:attributeName');\naddWebDriverCommand(CommandName.GetElementProperty, 'GET', sessionPrefix + '/element/:elementId/property/:propertyName');\naddWebDriverCommand(CommandName.GetElementCSSValue, 'GET', sessionPrefix + '/element/:elementId/css/:cssPropertyName');\naddWebDriverCommand(CommandName.GetElementText, 'GET', sessionPrefix + '/element/:elementId/text');\naddWebDriverCommand(CommandName.GetElementTagName, 'GET', sessionPrefix + '/element/:elementId/name');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/rect');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/size');\naddWebDriverCommand(CommandName.IsElementEnabled, 'GET', sessionPrefix + '/element/:elementId/enabled');\naddWebDriverCommand(CommandName.ElementClick, 'POST', sessionPrefix + '/element/:elementId/click');\naddWebDriverCommand(CommandName.ElementClear, 'POST', sessionPrefix + '/element/:elementId/clear');\naddWebDriverCommand(CommandName.ElementSendKeys, 'POST', sessionPrefix + '/element/:elementId/value');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert_text');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert/text');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/alert/accept');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/accept_alert');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/alert/dismiss');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/dismiss_alert');\n// These commands are part of the JSON protocol, and were replaced by Perform Actions in the W3C\n// spec\naddWebDriverCommand(CommandName.WireMoveTo, 'POST', sessionPrefix + '/moveto');\naddWebDriverCommand(CommandName.WireButtonDown, 'POST', sessionPrefix + '/buttondown');\naddWebDriverCommand(CommandName.WireButtonUp, 'POST', sessionPrefix + '/buttonup');\n//# sourceMappingURL=webdriver_commands.js.map"]},"metadata":{},"sourceType":"script"}