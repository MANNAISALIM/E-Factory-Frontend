{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar command = require('./command');\n\nvar error = require('./error');\n\nvar input = require('./input');\n/**\n * @param {!IArrayLike} args .\n * @return {!Array} .\n */\n\n\nfunction flatten(args) {\n  var result = [];\n\n  for (var i = 0; i < args.length; i++) {\n    var element = args[i];\n\n    if (Array.isArray(element)) {\n      result.push.apply(result, flatten(element));\n    } else {\n      result.push(element);\n    }\n  }\n\n  return result;\n}\n\nvar MODIFIER_KEYS = new Set([input.Key.ALT, input.Key.CONTROL, input.Key.SHIFT, input.Key.COMMAND]);\n/**\n * Checks that a key is a modifier key.\n * @param {!input.Key} key The key to check.\n * @throws {error.InvalidArgumentError} If the key is not a modifier key.\n * @private\n */\n\nfunction checkModifierKey(key) {\n  if (!MODIFIER_KEYS.has(key)) {\n    throw new error.InvalidArgumentError('Not a modifier key');\n  }\n}\n/**\n * Class for defining sequences of complex user interactions. Each sequence\n * will not be executed until {@link #perform} is called.\n *\n * This class should not be instantiated directly. Instead, obtain an instance\n * using {@link ./webdriver.WebDriver#actions() WebDriver.actions()}.\n *\n * Sample usage:\n *\n *     driver.actions().\n *         keyDown(Key.SHIFT).\n *         click(element1).\n *         click(element2).\n *         dragAndDrop(element3, element4).\n *         keyUp(Key.SHIFT).\n *         perform();\n *\n */\n\n\nvar ActionSequence = /*#__PURE__*/function () {\n  /**\n   * @param {!./webdriver.WebDriver} driver The driver that should be used to\n   *     perform this action sequence.\n   */\n  function ActionSequence(driver) {\n    _classCallCheck(this, ActionSequence);\n\n    /** @private {!./webdriver.WebDriver} */\n    this.driver_ = driver;\n    /** @private {!Array<{description: string, command: !command.Command}>} */\n\n    this.actions_ = [];\n  }\n  /**\n   * Schedules an action to be executed each time {@link #perform} is called on\n   * this instance.\n   *\n   * @param {string} description A description of the command.\n   * @param {!command.Command} command The command.\n   * @private\n   */\n\n\n  _createClass(ActionSequence, [{\n    key: \"schedule_\",\n    value: function schedule_(description, command) {\n      this.actions_.push({\n        description: description,\n        command: command\n      });\n    }\n    /**\n     * Executes this action sequence.\n     *\n     * @return {!./promise.Thenable} A promise that will be resolved once\n     *     this sequence has completed.\n     */\n\n  }, {\n    key: \"perform\",\n    value: function perform() {\n      // Make a protected copy of the scheduled actions. This will protect against\n      // users defining additional commands before this sequence is actually\n      // executed.\n      var actions = this.actions_.concat();\n      var driver = this.driver_;\n      return driver.controlFlow().execute(function () {\n        var results = actions.map(function (action) {\n          return driver.schedule(action.command, action.description);\n        });\n        return Promise.all(results);\n      }, 'ActionSequence.perform');\n    }\n    /**\n     * Moves the mouse. The location to move to may be specified in terms of the\n     * mouse's current location, an offset relative to the top-left corner of an\n     * element, or an element (in which case the middle of the element is used).\n     *\n     * @param {(!./webdriver.WebElement|{x: number, y: number})} location The\n     *     location to drag to, as either another WebElement or an offset in\n     *     pixels.\n     * @param {{x: number, y: number}=} opt_offset If the target {@code location}\n     *     is defined as a {@link ./webdriver.WebElement}, this parameter defines\n     *     an offset within that element. The offset should be specified in pixels\n     *     relative to the top-left corner of the element's bounding box. If\n     *     omitted, the element's center will be used as the target offset.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"mouseMove\",\n    value: function mouseMove(location, opt_offset) {\n      var cmd = new command.Command(command.Name.MOVE_TO);\n\n      if (typeof location.x === 'number') {\n        setOffset(\n        /** @type {{x: number, y: number}} */\n        location);\n      } else {\n        cmd.setParameter('element', location.getId());\n\n        if (opt_offset) {\n          setOffset(opt_offset);\n        }\n      }\n\n      this.schedule_('mouseMove', cmd);\n      return this;\n      /** @param {{x: number, y: number}} offset The offset to use. */\n\n      function setOffset(offset) {\n        cmd.setParameter('xoffset', offset.x || 0);\n        cmd.setParameter('yoffset', offset.y || 0);\n      }\n    }\n    /**\n     * Schedules a mouse action.\n     * @param {string} description A simple descriptive label for the scheduled\n     *     action.\n     * @param {!command.Name} commandName The name of the command.\n     * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n     *     the element to interact with or the button to click with.\n     *     Defaults to {@link input.Button.LEFT} if neither an element nor\n     *     button is specified.\n     * @param {input.Button=} opt_button The button to use. Defaults to\n     *     {@link input.Button.LEFT}. Ignored if the previous argument is\n     *     provided as a button.\n     * @return {!ActionSequence} A self reference.\n     * @private\n     */\n\n  }, {\n    key: \"scheduleMouseAction_\",\n    value: function scheduleMouseAction_(description, commandName, opt_elementOrButton, opt_button) {\n      var button;\n\n      if (typeof opt_elementOrButton === 'number') {\n        button = opt_elementOrButton;\n      } else {\n        if (opt_elementOrButton) {\n          this.mouseMove(\n          /** @type {!./webdriver.WebElement} */\n          opt_elementOrButton);\n        }\n\n        button = opt_button !== void 0 ? opt_button : input.Button.LEFT;\n      }\n\n      var cmd = new command.Command(commandName).setParameter('button', button);\n      this.schedule_(description, cmd);\n      return this;\n    }\n    /**\n     * Presses a mouse button. The mouse button will not be released until\n     * {@link #mouseUp} is called, regardless of whether that call is made in this\n     * sequence or another. The behavior for out-of-order events (e.g. mouseDown,\n     * click) is undefined.\n     *\n     * If an element is provided, the mouse will first be moved to the center\n     * of that element. This is equivalent to:\n     *\n     *     sequence.mouseMove(element).mouseDown()\n     *\n     * Warning: this method currently only supports the left mouse button. See\n     * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n     *\n     * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n     *     the element to interact with or the button to click with.\n     *     Defaults to {@link input.Button.LEFT} if neither an element nor\n     *     button is specified.\n     * @param {input.Button=} opt_button The button to use. Defaults to\n     *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n     *     first argument.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"mouseDown\",\n    value: function mouseDown(opt_elementOrButton, opt_button) {\n      return this.scheduleMouseAction_('mouseDown', command.Name.MOUSE_DOWN, opt_elementOrButton, opt_button);\n    }\n    /**\n     * Releases a mouse button. Behavior is undefined for calling this function\n     * without a previous call to {@link #mouseDown}.\n     *\n     * If an element is provided, the mouse will first be moved to the center\n     * of that element. This is equivalent to:\n     *\n     *     sequence.mouseMove(element).mouseUp()\n     *\n     * Warning: this method currently only supports the left mouse button. See\n     * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n     *\n     * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n     *     the element to interact with or the button to click with.\n     *     Defaults to {@link input.Button.LEFT} if neither an element nor\n     *     button is specified.\n     * @param {input.Button=} opt_button The button to use. Defaults to\n     *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n     *     first argument.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"mouseUp\",\n    value: function mouseUp(opt_elementOrButton, opt_button) {\n      return this.scheduleMouseAction_('mouseUp', command.Name.MOUSE_UP, opt_elementOrButton, opt_button);\n    }\n    /**\n     * Convenience function for performing a \"drag and drop\" manuever. The target\n     * element may be moved to the location of another element, or by an offset (in\n     * pixels).\n     *\n     * @param {!./webdriver.WebElement} element The element to drag.\n     * @param {(!./webdriver.WebElement|{x: number, y: number})} location The\n     *     location to drag to, either as another WebElement or an offset in\n     *     pixels.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"dragAndDrop\",\n    value: function dragAndDrop(element, location) {\n      return this.mouseDown(element).mouseMove(location).mouseUp();\n    }\n    /**\n     * Clicks a mouse button.\n     *\n     * If an element is provided, the mouse will first be moved to the center\n     * of that element. This is equivalent to:\n     *\n     *     sequence.mouseMove(element).click()\n     *\n     * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n     *     the element to interact with or the button to click with.\n     *     Defaults to {@link input.Button.LEFT} if neither an element nor\n     *     button is specified.\n     * @param {input.Button=} opt_button The button to use. Defaults to\n     *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n     *     first argument.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"click\",\n    value: function click(opt_elementOrButton, opt_button) {\n      return this.scheduleMouseAction_('click', command.Name.CLICK, opt_elementOrButton, opt_button);\n    }\n    /**\n     * Double-clicks a mouse button.\n     *\n     * If an element is provided, the mouse will first be moved to the center of\n     * that element. This is equivalent to:\n     *\n     *     sequence.mouseMove(element).doubleClick()\n     *\n     * Warning: this method currently only supports the left mouse button. See\n     * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n     *\n     * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n     *     the element to interact with or the button to click with.\n     *     Defaults to {@link input.Button.LEFT} if neither an element nor\n     *     button is specified.\n     * @param {input.Button=} opt_button The button to use. Defaults to\n     *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n     *     first argument.\n     * @return {!ActionSequence} A self reference.\n     */\n\n  }, {\n    key: \"doubleClick\",\n    value: function doubleClick(opt_elementOrButton, opt_button) {\n      return this.scheduleMouseAction_('doubleClick', command.Name.DOUBLE_CLICK, opt_elementOrButton, opt_button);\n    }\n    /**\n     * Schedules a keyboard action.\n     *\n     * @param {string} description A simple descriptive label for the scheduled\n     *     action.\n     * @param {!Array<(string|!input.Key)>} keys The keys to send.\n     * @return {!ActionSequence} A self reference.\n     * @private\n     */\n\n  }, {\n    key: \"scheduleKeyboardAction_\",\n    value: function scheduleKeyboardAction_(description, keys) {\n      var cmd = new command.Command(command.Name.SEND_KEYS_TO_ACTIVE_ELEMENT).setParameter('value', keys);\n      this.schedule_(description, cmd);\n      return this;\n    }\n    /**\n     * Performs a modifier key press. The modifier key is <em>not released</em>\n     * until {@link #keyUp} or {@link #sendKeys} is called. The key press will be\n     * targeted at the currently focused element.\n     *\n     * @param {!input.Key} key The modifier key to push. Must be one of\n     *     {ALT, CONTROL, SHIFT, COMMAND, META}.\n     * @return {!ActionSequence} A self reference.\n     * @throws {error.InvalidArgumentError} If the key is not a valid modifier\n     *     key.\n     */\n\n  }, {\n    key: \"keyDown\",\n    value: function keyDown(key) {\n      checkModifierKey(key);\n      return this.scheduleKeyboardAction_('keyDown', [key]);\n    }\n    /**\n     * Performs a modifier key release. The release is targeted at the currently\n     * focused element.\n     * @param {!input.Key} key The modifier key to release. Must be one of\n     *     {ALT, CONTROL, SHIFT, COMMAND, META}.\n     * @return {!ActionSequence} A self reference.\n     * @throws {error.InvalidArgumentError} If the key is not a valid modifier\n     *     key.\n     */\n\n  }, {\n    key: \"keyUp\",\n    value: function keyUp(key) {\n      checkModifierKey(key);\n      return this.scheduleKeyboardAction_('keyUp', [key]);\n    }\n    /**\n     * Simulates typing multiple keys. Each modifier key encountered in the\n     * sequence will not be released until it is encountered again. All key events\n     * will be targeted at the currently focused element.\n     *\n     * @param {...(string|!input.Key|!Array<(string|!input.Key)>)} var_args\n     *     The keys to type.\n     * @return {!ActionSequence} A self reference.\n     * @throws {Error} If the key is not a valid modifier key.\n     */\n\n  }, {\n    key: \"sendKeys\",\n    value: function sendKeys(var_args) {\n      var keys = flatten(arguments);\n      return this.scheduleKeyboardAction_('sendKeys', keys);\n    }\n  }]);\n\n  return ActionSequence;\n}();\n/**\n * Class for defining sequences of user touch interactions. Each sequence\n * will not be executed until {@link #perform} is called.\n *\n * This class should not be instantiated directly. Instead, obtain an instance\n * using {@link ./webdriver.WebDriver#touchActions() WebDriver.touchActions()}.\n *\n * Sample usage:\n *\n *     driver.touchActions().\n *         tapAndHold({x: 0, y: 0}).\n *         move({x: 3, y: 4}).\n *         release({x: 10, y: 10}).\n *         perform();\n *\n */\n\n\nvar TouchSequence = /*#__PURE__*/function () {\n  /**\n   * @param {!./webdriver.WebDriver} driver The driver that should be used to\n   *     perform this action sequence.\n   */\n  function TouchSequence(driver) {\n    _classCallCheck(this, TouchSequence);\n\n    /** @private {!./webdriver.WebDriver} */\n    this.driver_ = driver;\n    /** @private {!Array<{description: string, command: !command.Command}>} */\n\n    this.actions_ = [];\n  }\n  /**\n   * Schedules an action to be executed each time {@link #perform} is called on\n   * this instance.\n   * @param {string} description A description of the command.\n   * @param {!command.Command} command The command.\n   * @private\n   */\n\n\n  _createClass(TouchSequence, [{\n    key: \"schedule_\",\n    value: function schedule_(description, command) {\n      this.actions_.push({\n        description: description,\n        command: command\n      });\n    }\n    /**\n     * Executes this action sequence.\n     * @return {!./promise.Thenable} A promise that will be resolved once\n     *     this sequence has completed.\n     */\n\n  }, {\n    key: \"perform\",\n    value: function perform() {\n      // Make a protected copy of the scheduled actions. This will protect against\n      // users defining additional commands before this sequence is actually\n      // executed.\n      var actions = this.actions_.concat();\n      var driver = this.driver_;\n      return driver.controlFlow().execute(function () {\n        var results = actions.map(function (action) {\n          return driver.schedule(action.command, action.description);\n        });\n        return Promise.all(results);\n      }, 'TouchSequence.perform');\n    }\n    /**\n     * Taps an element.\n     *\n     * @param {!./webdriver.WebElement} elem The element to tap.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"tap\",\n    value: function tap(elem) {\n      var cmd = new command.Command(command.Name.TOUCH_SINGLE_TAP).setParameter('element', elem.getId());\n      this.schedule_('tap', cmd);\n      return this;\n    }\n    /**\n     * Double taps an element.\n     *\n     * @param {!./webdriver.WebElement} elem The element to double tap.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"doubleTap\",\n    value: function doubleTap(elem) {\n      var cmd = new command.Command(command.Name.TOUCH_DOUBLE_TAP).setParameter('element', elem.getId());\n      this.schedule_('doubleTap', cmd);\n      return this;\n    }\n    /**\n     * Long press on an element.\n     *\n     * @param {!./webdriver.WebElement} elem The element to long press.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"longPress\",\n    value: function longPress(elem) {\n      var cmd = new command.Command(command.Name.TOUCH_LONG_PRESS).setParameter('element', elem.getId());\n      this.schedule_('longPress', cmd);\n      return this;\n    }\n    /**\n     * Touch down at the given location.\n     *\n     * @param {{x: number, y: number}} location The location to touch down at.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"tapAndHold\",\n    value: function tapAndHold(location) {\n      var cmd = new command.Command(command.Name.TOUCH_DOWN).setParameter('x', location.x).setParameter('y', location.y);\n      this.schedule_('tapAndHold', cmd);\n      return this;\n    }\n    /**\n     * Move a held {@linkplain #tapAndHold touch} to the specified location.\n     *\n     * @param {{x: number, y: number}} location The location to move to.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(location) {\n      var cmd = new command.Command(command.Name.TOUCH_MOVE).setParameter('x', location.x).setParameter('y', location.y);\n      this.schedule_('move', cmd);\n      return this;\n    }\n    /**\n     * Release a held {@linkplain #tapAndHold touch} at the specified location.\n     *\n     * @param {{x: number, y: number}} location The location to release at.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(location) {\n      var cmd = new command.Command(command.Name.TOUCH_UP).setParameter('x', location.x).setParameter('y', location.y);\n      this.schedule_('release', cmd);\n      return this;\n    }\n    /**\n     * Scrolls the touch screen by the given offset.\n     *\n     * @param {{x: number, y: number}} offset The offset to scroll to.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"scroll\",\n    value: function scroll(offset) {\n      var cmd = new command.Command(command.Name.TOUCH_SCROLL).setParameter('xoffset', offset.x).setParameter('yoffset', offset.y);\n      this.schedule_('scroll', cmd);\n      return this;\n    }\n    /**\n     * Scrolls the touch screen, starting on `elem` and moving by the specified\n     * offset.\n     *\n     * @param {!./webdriver.WebElement} elem The element where scroll starts.\n     * @param {{x: number, y: number}} offset The offset to scroll to.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"scrollFromElement\",\n    value: function scrollFromElement(elem, offset) {\n      var cmd = new command.Command(command.Name.TOUCH_SCROLL).setParameter('element', elem.getId()).setParameter('xoffset', offset.x).setParameter('yoffset', offset.y);\n      this.schedule_('scrollFromElement', cmd);\n      return this;\n    }\n    /**\n     * Flick, starting anywhere on the screen, at speed xspeed and yspeed.\n     *\n     * @param {{xspeed: number, yspeed: number}} speed The speed to flick in each\n           direction, in pixels per second.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"flick\",\n    value: function flick(speed) {\n      var cmd = new command.Command(command.Name.TOUCH_FLICK).setParameter('xspeed', speed.xspeed).setParameter('yspeed', speed.yspeed);\n      this.schedule_('flick', cmd);\n      return this;\n    }\n    /**\n     * Flick starting at elem and moving by x and y at specified speed.\n     *\n     * @param {!./webdriver.WebElement} elem The element where flick starts.\n     * @param {{x: number, y: number}} offset The offset to flick to.\n     * @param {number} speed The speed to flick at in pixels per second.\n     * @return {!TouchSequence} A self reference.\n     */\n\n  }, {\n    key: \"flickElement\",\n    value: function flickElement(elem, offset, speed) {\n      var cmd = new command.Command(command.Name.TOUCH_FLICK).setParameter('element', elem.getId()).setParameter('xoffset', offset.x).setParameter('yoffset', offset.y).setParameter('speed', speed);\n      this.schedule_('flickElement', cmd);\n      return this;\n    }\n  }]);\n\n  return TouchSequence;\n}(); // PUBLIC API\n\n\nmodule.exports = {\n  ActionSequence: ActionSequence,\n  TouchSequence: TouchSequence\n};","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/lib/actions.js"],"names":["command","require","error","input","flatten","args","result","i","length","element","Array","isArray","push","apply","MODIFIER_KEYS","Set","Key","ALT","CONTROL","SHIFT","COMMAND","checkModifierKey","key","has","InvalidArgumentError","ActionSequence","driver","driver_","actions_","description","actions","concat","controlFlow","execute","results","map","action","schedule","Promise","all","location","opt_offset","cmd","Command","Name","MOVE_TO","x","setOffset","setParameter","getId","schedule_","offset","y","commandName","opt_elementOrButton","opt_button","button","mouseMove","Button","LEFT","scheduleMouseAction_","MOUSE_DOWN","MOUSE_UP","mouseDown","mouseUp","CLICK","DOUBLE_CLICK","keys","SEND_KEYS_TO_ACTIVE_ELEMENT","scheduleKeyboardAction_","var_args","arguments","TouchSequence","elem","TOUCH_SINGLE_TAP","TOUCH_DOUBLE_TAP","TOUCH_LONG_PRESS","TOUCH_DOWN","TOUCH_MOVE","TOUCH_UP","TOUCH_SCROLL","speed","TOUCH_FLICK","xspeed","yspeed","module","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst command = require('./command');\nconst error = require('./error');\nconst input = require('./input');\n\n\n/**\n * @param {!IArrayLike} args .\n * @return {!Array} .\n */\nfunction flatten(args) {\n  let result = [];\n  for (let i = 0; i < args.length; i++) {\n    let element = args[i];\n    if (Array.isArray(element)) {\n      result.push.apply(result, flatten(element));\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n}\n\n\nconst MODIFIER_KEYS = new Set([\n  input.Key.ALT,\n  input.Key.CONTROL,\n  input.Key.SHIFT,\n  input.Key.COMMAND\n]);\n\n\n/**\n * Checks that a key is a modifier key.\n * @param {!input.Key} key The key to check.\n * @throws {error.InvalidArgumentError} If the key is not a modifier key.\n * @private\n */\nfunction checkModifierKey(key) {\n  if (!MODIFIER_KEYS.has(key)) {\n    throw new error.InvalidArgumentError('Not a modifier key');\n  }\n}\n\n\n/**\n * Class for defining sequences of complex user interactions. Each sequence\n * will not be executed until {@link #perform} is called.\n *\n * This class should not be instantiated directly. Instead, obtain an instance\n * using {@link ./webdriver.WebDriver#actions() WebDriver.actions()}.\n *\n * Sample usage:\n *\n *     driver.actions().\n *         keyDown(Key.SHIFT).\n *         click(element1).\n *         click(element2).\n *         dragAndDrop(element3, element4).\n *         keyUp(Key.SHIFT).\n *         perform();\n *\n */\nclass ActionSequence {\n  /**\n   * @param {!./webdriver.WebDriver} driver The driver that should be used to\n   *     perform this action sequence.\n   */\n  constructor(driver) {\n    /** @private {!./webdriver.WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!Array<{description: string, command: !command.Command}>} */\n    this.actions_ = [];\n  }\n\n  /**\n   * Schedules an action to be executed each time {@link #perform} is called on\n   * this instance.\n   *\n   * @param {string} description A description of the command.\n   * @param {!command.Command} command The command.\n   * @private\n   */\n  schedule_(description, command) {\n    this.actions_.push({\n      description: description,\n      command: command\n    });\n  }\n\n  /**\n   * Executes this action sequence.\n   *\n   * @return {!./promise.Thenable} A promise that will be resolved once\n   *     this sequence has completed.\n   */\n  perform() {\n    // Make a protected copy of the scheduled actions. This will protect against\n    // users defining additional commands before this sequence is actually\n    // executed.\n    let actions = this.actions_.concat();\n    let driver = this.driver_;\n    return driver.controlFlow().execute(function() {\n      let results = actions.map(action => {\n        return driver.schedule(action.command, action.description);\n      });\n      return Promise.all(results);\n    }, 'ActionSequence.perform');\n  }\n\n  /**\n   * Moves the mouse. The location to move to may be specified in terms of the\n   * mouse's current location, an offset relative to the top-left corner of an\n   * element, or an element (in which case the middle of the element is used).\n   *\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The\n   *     location to drag to, as either another WebElement or an offset in\n   *     pixels.\n   * @param {{x: number, y: number}=} opt_offset If the target {@code location}\n   *     is defined as a {@link ./webdriver.WebElement}, this parameter defines\n   *     an offset within that element. The offset should be specified in pixels\n   *     relative to the top-left corner of the element's bounding box. If\n   *     omitted, the element's center will be used as the target offset.\n   * @return {!ActionSequence} A self reference.\n   */\n  mouseMove(location, opt_offset) {\n    let cmd = new command.Command(command.Name.MOVE_TO);\n\n    if (typeof location.x === 'number') {\n      setOffset(/** @type {{x: number, y: number}} */(location));\n    } else {\n      cmd.setParameter('element', location.getId());\n      if (opt_offset) {\n        setOffset(opt_offset);\n      }\n    }\n\n    this.schedule_('mouseMove', cmd);\n    return this;\n\n    /** @param {{x: number, y: number}} offset The offset to use. */\n    function setOffset(offset) {\n      cmd.setParameter('xoffset', offset.x || 0);\n      cmd.setParameter('yoffset', offset.y || 0);\n    }\n  }\n\n  /**\n   * Schedules a mouse action.\n   * @param {string} description A simple descriptive label for the scheduled\n   *     action.\n   * @param {!command.Name} commandName The name of the command.\n   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n   *     the element to interact with or the button to click with.\n   *     Defaults to {@link input.Button.LEFT} if neither an element nor\n   *     button is specified.\n   * @param {input.Button=} opt_button The button to use. Defaults to\n   *     {@link input.Button.LEFT}. Ignored if the previous argument is\n   *     provided as a button.\n   * @return {!ActionSequence} A self reference.\n   * @private\n   */\n  scheduleMouseAction_(\n      description, commandName, opt_elementOrButton, opt_button) {\n    let button;\n    if (typeof opt_elementOrButton === 'number') {\n      button = opt_elementOrButton;\n    } else {\n      if (opt_elementOrButton) {\n        this.mouseMove(\n            /** @type {!./webdriver.WebElement} */ (opt_elementOrButton));\n      }\n      button = opt_button !== void(0) ? opt_button : input.Button.LEFT;\n    }\n\n    let cmd = new command.Command(commandName).\n        setParameter('button', button);\n    this.schedule_(description, cmd);\n    return this;\n  }\n\n  /**\n   * Presses a mouse button. The mouse button will not be released until\n   * {@link #mouseUp} is called, regardless of whether that call is made in this\n   * sequence or another. The behavior for out-of-order events (e.g. mouseDown,\n   * click) is undefined.\n   *\n   * If an element is provided, the mouse will first be moved to the center\n   * of that element. This is equivalent to:\n   *\n   *     sequence.mouseMove(element).mouseDown()\n   *\n   * Warning: this method currently only supports the left mouse button. See\n   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n   *\n   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n   *     the element to interact with or the button to click with.\n   *     Defaults to {@link input.Button.LEFT} if neither an element nor\n   *     button is specified.\n   * @param {input.Button=} opt_button The button to use. Defaults to\n   *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n   *     first argument.\n   * @return {!ActionSequence} A self reference.\n   */\n  mouseDown(opt_elementOrButton, opt_button) {\n    return this.scheduleMouseAction_('mouseDown',\n        command.Name.MOUSE_DOWN, opt_elementOrButton, opt_button);\n  }\n\n  /**\n   * Releases a mouse button. Behavior is undefined for calling this function\n   * without a previous call to {@link #mouseDown}.\n   *\n   * If an element is provided, the mouse will first be moved to the center\n   * of that element. This is equivalent to:\n   *\n   *     sequence.mouseMove(element).mouseUp()\n   *\n   * Warning: this method currently only supports the left mouse button. See\n   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n   *\n   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n   *     the element to interact with or the button to click with.\n   *     Defaults to {@link input.Button.LEFT} if neither an element nor\n   *     button is specified.\n   * @param {input.Button=} opt_button The button to use. Defaults to\n   *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n   *     first argument.\n   * @return {!ActionSequence} A self reference.\n   */\n  mouseUp(opt_elementOrButton, opt_button) {\n    return this.scheduleMouseAction_('mouseUp',\n        command.Name.MOUSE_UP, opt_elementOrButton, opt_button);\n  }\n\n  /**\n   * Convenience function for performing a \"drag and drop\" manuever. The target\n   * element may be moved to the location of another element, or by an offset (in\n   * pixels).\n   *\n   * @param {!./webdriver.WebElement} element The element to drag.\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The\n   *     location to drag to, either as another WebElement or an offset in\n   *     pixels.\n   * @return {!ActionSequence} A self reference.\n   */\n  dragAndDrop(element, location) {\n    return this.mouseDown(element).mouseMove(location).mouseUp();\n  }\n\n  /**\n   * Clicks a mouse button.\n   *\n   * If an element is provided, the mouse will first be moved to the center\n   * of that element. This is equivalent to:\n   *\n   *     sequence.mouseMove(element).click()\n   *\n   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n   *     the element to interact with or the button to click with.\n   *     Defaults to {@link input.Button.LEFT} if neither an element nor\n   *     button is specified.\n   * @param {input.Button=} opt_button The button to use. Defaults to\n   *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n   *     first argument.\n   * @return {!ActionSequence} A self reference.\n   */\n  click(opt_elementOrButton, opt_button) {\n    return this.scheduleMouseAction_('click',\n        command.Name.CLICK, opt_elementOrButton, opt_button);\n  }\n\n  /**\n   * Double-clicks a mouse button.\n   *\n   * If an element is provided, the mouse will first be moved to the center of\n   * that element. This is equivalent to:\n   *\n   *     sequence.mouseMove(element).doubleClick()\n   *\n   * Warning: this method currently only supports the left mouse button. See\n   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).\n   *\n   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either\n   *     the element to interact with or the button to click with.\n   *     Defaults to {@link input.Button.LEFT} if neither an element nor\n   *     button is specified.\n   * @param {input.Button=} opt_button The button to use. Defaults to\n   *     {@link input.Button.LEFT}. Ignored if a button is provided as the\n   *     first argument.\n   * @return {!ActionSequence} A self reference.\n   */\n  doubleClick(opt_elementOrButton, opt_button) {\n    return this.scheduleMouseAction_('doubleClick',\n        command.Name.DOUBLE_CLICK, opt_elementOrButton, opt_button);\n  }\n\n  /**\n   * Schedules a keyboard action.\n   *\n   * @param {string} description A simple descriptive label for the scheduled\n   *     action.\n   * @param {!Array<(string|!input.Key)>} keys The keys to send.\n   * @return {!ActionSequence} A self reference.\n   * @private\n   */\n  scheduleKeyboardAction_(description, keys) {\n    let cmd = new command.Command(command.Name.SEND_KEYS_TO_ACTIVE_ELEMENT)\n        .setParameter('value', keys);\n    this.schedule_(description, cmd);\n    return this;\n  }\n\n  /**\n   * Performs a modifier key press. The modifier key is <em>not released</em>\n   * until {@link #keyUp} or {@link #sendKeys} is called. The key press will be\n   * targeted at the currently focused element.\n   *\n   * @param {!input.Key} key The modifier key to push. Must be one of\n   *     {ALT, CONTROL, SHIFT, COMMAND, META}.\n   * @return {!ActionSequence} A self reference.\n   * @throws {error.InvalidArgumentError} If the key is not a valid modifier\n   *     key.\n   */\n  keyDown(key) {\n    checkModifierKey(key);\n    return this.scheduleKeyboardAction_('keyDown', [key]);\n  }\n\n  /**\n   * Performs a modifier key release. The release is targeted at the currently\n   * focused element.\n   * @param {!input.Key} key The modifier key to release. Must be one of\n   *     {ALT, CONTROL, SHIFT, COMMAND, META}.\n   * @return {!ActionSequence} A self reference.\n   * @throws {error.InvalidArgumentError} If the key is not a valid modifier\n   *     key.\n   */\n  keyUp(key) {\n    checkModifierKey(key);\n    return this.scheduleKeyboardAction_('keyUp', [key]);\n  }\n\n  /**\n   * Simulates typing multiple keys. Each modifier key encountered in the\n   * sequence will not be released until it is encountered again. All key events\n   * will be targeted at the currently focused element.\n   *\n   * @param {...(string|!input.Key|!Array<(string|!input.Key)>)} var_args\n   *     The keys to type.\n   * @return {!ActionSequence} A self reference.\n   * @throws {Error} If the key is not a valid modifier key.\n   */\n  sendKeys(var_args) {\n    let keys = flatten(arguments);\n    return this.scheduleKeyboardAction_('sendKeys', keys);\n  }\n}\n\n\n/**\n * Class for defining sequences of user touch interactions. Each sequence\n * will not be executed until {@link #perform} is called.\n *\n * This class should not be instantiated directly. Instead, obtain an instance\n * using {@link ./webdriver.WebDriver#touchActions() WebDriver.touchActions()}.\n *\n * Sample usage:\n *\n *     driver.touchActions().\n *         tapAndHold({x: 0, y: 0}).\n *         move({x: 3, y: 4}).\n *         release({x: 10, y: 10}).\n *         perform();\n *\n */\nclass TouchSequence {\n  /**\n   * @param {!./webdriver.WebDriver} driver The driver that should be used to\n   *     perform this action sequence.\n   */\n  constructor(driver) {\n    /** @private {!./webdriver.WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!Array<{description: string, command: !command.Command}>} */\n    this.actions_ = [];\n  }\n\n  /**\n   * Schedules an action to be executed each time {@link #perform} is called on\n   * this instance.\n   * @param {string} description A description of the command.\n   * @param {!command.Command} command The command.\n   * @private\n   */\n  schedule_(description, command) {\n    this.actions_.push({\n      description: description,\n      command: command\n    });\n  }\n\n  /**\n   * Executes this action sequence.\n   * @return {!./promise.Thenable} A promise that will be resolved once\n   *     this sequence has completed.\n   */\n  perform() {\n    // Make a protected copy of the scheduled actions. This will protect against\n    // users defining additional commands before this sequence is actually\n    // executed.\n    let actions = this.actions_.concat();\n    let driver = this.driver_;\n    return driver.controlFlow().execute(function() {\n      let results = actions.map(action => {\n        return driver.schedule(action.command, action.description);\n      });\n      return Promise.all(results);\n    }, 'TouchSequence.perform');\n  }\n\n  /**\n   * Taps an element.\n   *\n   * @param {!./webdriver.WebElement} elem The element to tap.\n   * @return {!TouchSequence} A self reference.\n   */\n  tap(elem) {\n    let cmd = new command.Command(command.Name.TOUCH_SINGLE_TAP).\n        setParameter('element', elem.getId());\n\n    this.schedule_('tap', cmd);\n    return this;\n  }\n\n  /**\n   * Double taps an element.\n   *\n   * @param {!./webdriver.WebElement} elem The element to double tap.\n   * @return {!TouchSequence} A self reference.\n   */\n  doubleTap(elem) {\n    let cmd = new command.Command(command.Name.TOUCH_DOUBLE_TAP).\n        setParameter('element', elem.getId());\n\n    this.schedule_('doubleTap', cmd);\n    return this;\n  }\n\n  /**\n   * Long press on an element.\n   *\n   * @param {!./webdriver.WebElement} elem The element to long press.\n   * @return {!TouchSequence} A self reference.\n   */\n  longPress(elem) {\n    let cmd = new command.Command(command.Name.TOUCH_LONG_PRESS).\n        setParameter('element', elem.getId());\n\n    this.schedule_('longPress', cmd);\n    return this;\n  }\n\n  /**\n   * Touch down at the given location.\n   *\n   * @param {{x: number, y: number}} location The location to touch down at.\n   * @return {!TouchSequence} A self reference.\n   */\n  tapAndHold(location) {\n    let cmd = new command.Command(command.Name.TOUCH_DOWN).\n        setParameter('x', location.x).\n        setParameter('y', location.y);\n\n    this.schedule_('tapAndHold', cmd);\n    return this;\n  }\n\n  /**\n   * Move a held {@linkplain #tapAndHold touch} to the specified location.\n   *\n   * @param {{x: number, y: number}} location The location to move to.\n   * @return {!TouchSequence} A self reference.\n   */\n  move(location) {\n    let cmd = new command.Command(command.Name.TOUCH_MOVE).\n        setParameter('x', location.x).\n        setParameter('y', location.y);\n\n    this.schedule_('move', cmd);\n    return this;\n  }\n\n  /**\n   * Release a held {@linkplain #tapAndHold touch} at the specified location.\n   *\n   * @param {{x: number, y: number}} location The location to release at.\n   * @return {!TouchSequence} A self reference.\n   */\n  release(location) {\n    let cmd = new command.Command(command.Name.TOUCH_UP).\n        setParameter('x', location.x).\n        setParameter('y', location.y);\n\n    this.schedule_('release', cmd);\n    return this;\n  }\n\n  /**\n   * Scrolls the touch screen by the given offset.\n   *\n   * @param {{x: number, y: number}} offset The offset to scroll to.\n   * @return {!TouchSequence} A self reference.\n   */\n  scroll(offset) {\n    let cmd = new command.Command(command.Name.TOUCH_SCROLL).\n        setParameter('xoffset', offset.x).\n        setParameter('yoffset', offset.y);\n\n    this.schedule_('scroll', cmd);\n    return this;\n  }\n\n  /**\n   * Scrolls the touch screen, starting on `elem` and moving by the specified\n   * offset.\n   *\n   * @param {!./webdriver.WebElement} elem The element where scroll starts.\n   * @param {{x: number, y: number}} offset The offset to scroll to.\n   * @return {!TouchSequence} A self reference.\n   */\n  scrollFromElement(elem, offset) {\n    let cmd = new command.Command(command.Name.TOUCH_SCROLL).\n        setParameter('element', elem.getId()).\n        setParameter('xoffset', offset.x).\n        setParameter('yoffset', offset.y);\n\n    this.schedule_('scrollFromElement', cmd);\n    return this;\n  }\n\n  /**\n   * Flick, starting anywhere on the screen, at speed xspeed and yspeed.\n   *\n   * @param {{xspeed: number, yspeed: number}} speed The speed to flick in each\n         direction, in pixels per second.\n   * @return {!TouchSequence} A self reference.\n   */\n  flick(speed) {\n    let cmd = new command.Command(command.Name.TOUCH_FLICK).\n        setParameter('xspeed', speed.xspeed).\n        setParameter('yspeed', speed.yspeed);\n\n    this.schedule_('flick', cmd);\n    return this;\n  }\n\n  /**\n   * Flick starting at elem and moving by x and y at specified speed.\n   *\n   * @param {!./webdriver.WebElement} elem The element where flick starts.\n   * @param {{x: number, y: number}} offset The offset to flick to.\n   * @param {number} speed The speed to flick at in pixels per second.\n   * @return {!TouchSequence} A self reference.\n   */\n  flickElement(elem, offset, speed) {\n    let cmd = new command.Command(command.Name.TOUCH_FLICK).\n        setParameter('element', elem.getId()).\n        setParameter('xoffset', offset.x).\n        setParameter('yoffset', offset.y).\n        setParameter('speed', speed);\n\n    this.schedule_('flickElement', cmd);\n    return this;\n  }\n}\n\n\n// PUBLIC API\n\nmodule.exports = {\n  ActionSequence: ActionSequence,\n  TouchSequence: TouchSequence,\n};\n"]},"metadata":{},"sourceType":"script"}