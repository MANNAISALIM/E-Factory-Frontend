{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar clientSideScripts = require('./clientsidescripts'); // Explicitly define webdriver.By.\n// We do this because we want to inherit the static methods of webdriver.By, as opposed to\n// inheriting from the webdriver.By class itself, which is actually analogous to ProtractorLocator.\n\n\nvar WebdriverBy = function WebdriverBy() {\n  _classCallCheck(this, WebdriverBy);\n\n  this.className = selenium_webdriver_1.By.className;\n  this.css = selenium_webdriver_1.By.css;\n  this.id = selenium_webdriver_1.By.id;\n  this.linkText = selenium_webdriver_1.By.linkText;\n  this.js = selenium_webdriver_1.By.js;\n  this.name = selenium_webdriver_1.By.name;\n  this.partialLinkText = selenium_webdriver_1.By.partialLinkText;\n  this.tagName = selenium_webdriver_1.By.tagName;\n  this.xpath = selenium_webdriver_1.By.xpath;\n};\n\nexports.WebdriverBy = WebdriverBy;\n\nfunction isProtractorLocator(x) {\n  return x && typeof x.findElementsOverride === 'function';\n}\n\nexports.isProtractorLocator = isProtractorLocator;\n/**\n * The Protractor Locators. These provide ways of finding elements in\n * Angular applications by binding, model, etc.\n *\n * @alias by\n * @extends {webdriver.By}\n */\n\nvar ProtractorBy = /*#__PURE__*/function (_WebdriverBy) {\n  _inherits(ProtractorBy, _WebdriverBy);\n\n  var _super = _createSuper(ProtractorBy);\n\n  function ProtractorBy() {\n    _classCallCheck(this, ProtractorBy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ProtractorBy, [{\n    key: \"addLocator\",\n\n    /**\n     * Add a locator to this instance of ProtractorBy. This locator can then be\n     * used with element(by.locatorName(args)).\n     *\n     * @view\n     * <button ng-click=\"doAddition()\">Go!</button>\n     *\n     * @example\n     * // Add the custom locator.\n     * by.addLocator('buttonTextSimple',\n     *     function(buttonText, opt_parentElement, opt_rootSelector) {\n     *   // This function will be serialized as a string and will execute in the\n     *   // browser. The first argument is the text for the button. The second\n     *   // argument is the parent element, if any.\n     *   var using = opt_parentElement || document,\n     *       buttons = using.querySelectorAll('button');\n     *\n     *   // Return an array of buttons with the text.\n     *   return Array.prototype.filter.call(buttons, function(button) {\n     *     return button.textContent === buttonText;\n     *   });\n     * });\n     *\n     * // Use the custom locator.\n     * element(by.buttonTextSimple('Go!')).click();\n     *\n     * @alias by.addLocator(locatorName, functionOrScript)\n     * @param {string} name The name of the new locator.\n     * @param {Function|string} script A script to be run in the context of\n     *     the browser. This script will be passed an array of arguments\n     *     that contains any args passed into the locator followed by the\n     *     element scoping the search and the css selector for the root angular\n     *     element. It should return an array of elements.\n     */\n    value: function addLocator(name, script) {\n      this[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var locatorArguments = args;\n        return {\n          findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n            var findElementArguments = [script];\n\n            for (var i = 0; i < locatorArguments.length; i++) {\n              findElementArguments.push(locatorArguments[i]);\n            }\n\n            findElementArguments.push(using);\n            findElementArguments.push(rootSelector);\n            return driver.findElements(selenium_webdriver_1.By.js.apply(selenium_webdriver_1.By, findElementArguments));\n          },\n          toString: function toString() {\n            return 'by.' + name + '(\"' + Array.prototype.join.call(locatorArguments, '\", \"') + '\")';\n          }\n        };\n      };\n    }\n  }, {\n    key: \"binding\",\n\n    /**\n     * Find an element by text binding. Does a partial match, so any elements\n     * bound to variables containing the input string will be returned.\n     *\n     * Note: For AngularJS version 1.2, the interpolation brackets, (usually\n     * {{}}), are optionally allowed in the binding description string. For\n     * Angular version 1.3+, they are not allowed, and no elements will be found\n     * if they are used.\n     *\n     * @view\n     * <span>{{person.name}}</span>\n     * <span ng-bind=\"person.email\"></span>\n     *\n     * @example\n     * var span1 = element(by.binding('person.name'));\n     * expect(span1.getText()).toBe('Foo');\n     *\n     * var span2 = element(by.binding('person.email'));\n     * expect(span2.getText()).toBe('foo@bar.com');\n     *\n     * // You can also use a substring for a partial match\n     * var span1alt = element(by.binding('name'));\n     * expect(span1alt.getText()).toBe('Foo');\n     *\n     * // This works for sites using Angular 1.2 but NOT 1.3\n     * var deprecatedSyntax = element(by.binding('{{person.name}}'));\n     *\n     * @param {string} bindingDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function binding(bindingDescriptor) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, false, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.binding(\"' + bindingDescriptor + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"exactBinding\",\n\n    /**\n     * Find an element by exact binding.\n     *\n     * @view\n     * <span>{{ person.name }}</span>\n     * <span ng-bind=\"person-email\"></span>\n     * <span>{{person_phone|uppercase}}</span>\n     *\n     * @example\n     * expect(element(by.exactBinding('person.name')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person-email')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person')).isPresent()).toBe(false);\n     * expect(element(by.exactBinding('person_phone')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person_phone|uppercase')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('phone')).isPresent()).toBe(false);\n     *\n     * @param {string} bindingDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function exactBinding(bindingDescriptor) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, true, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.exactBinding(\"' + bindingDescriptor + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"model\",\n\n    /**\n     * Find an element by ng-model expression.\n     *\n     * @alias by.model(modelName)\n     * @view\n     * <input type=\"text\" ng-model=\"person.name\">\n     *\n     * @example\n     * var input = element(by.model('person.name'));\n     * input.sendKeys('123');\n     * expect(input.getAttribute('value')).toBe('Foo123');\n     *\n     * @param {string} model ng-model expression.\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function model(_model) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByModel, _model, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.model(\"' + _model + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"buttonText\",\n\n    /**\n     * Find a button by text.\n     *\n     * @view\n     * <button>Save</button>\n     *\n     * @example\n     * element(by.buttonText('Save'));\n     *\n     * @param {string} searchText\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function buttonText(searchText) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByButtonText, searchText, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.buttonText(\"' + searchText + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"partialButtonText\",\n\n    /**\n     * Find a button by partial text.\n     *\n     * @view\n     * <button>Save my file</button>\n     *\n     * @example\n     * element(by.partialButtonText('Save'));\n     *\n     * @param {string} searchText\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function partialButtonText(searchText) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByPartialButtonText, searchText, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.partialButtonText(\"' + searchText + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"byRepeaterInner\",\n    // Generate either by.repeater or by.exactRepeater\n    value: function byRepeaterInner(exact, repeatDescriptor) {\n      var name = 'by.' + (exact ? 'exactR' : 'r') + 'epeater';\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findAllRepeaterRows, repeatDescriptor, exact, using, rootSelector));\n        },\n        toString: function toString() {\n          return name + '(\"' + repeatDescriptor + '\")';\n        },\n        row: function row(index) {\n          return {\n            findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n              return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterRows, repeatDescriptor, exact, index, using, rootSelector));\n            },\n            toString: function toString() {\n              return name + '(' + repeatDescriptor + '\").row(\"' + index + '\")\"';\n            },\n            column: function column(binding) {\n              return {\n                findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n                  return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n                },\n                toString: function toString() {\n                  return name + '(\"' + repeatDescriptor + '\").row(\"' + index + '\").column(\"' + binding + '\")';\n                }\n              };\n            }\n          };\n        },\n        column: function column(binding) {\n          return {\n            findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n              return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterColumn, repeatDescriptor, exact, binding, using, rootSelector));\n            },\n            toString: function toString() {\n              return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\")';\n            },\n            row: function row(index) {\n              return {\n                findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n                  return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n                },\n                toString: function toString() {\n                  return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\").row(\"' + index + '\")';\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n    /**\n     * Find elements inside an ng-repeat.\n     *\n     * @view\n     * <div ng-repeat=\"cat in pets\">\n     *   <span>{{cat.name}}</span>\n     *   <span>{{cat.age}}</span>\n     * </div>\n     *\n     * <div class=\"book-img\" ng-repeat-start=\"book in library\">\n     *   <span>{{$index}}</span>\n     * </div>\n     * <div class=\"book-info\" ng-repeat-end>\n     *   <h4>{{book.name}}</h4>\n     *   <p>{{book.blurb}}</p>\n     * </div>\n     *\n     * @example\n     * // Returns the DIV for the second cat.\n     * var secondCat = element(by.repeater('cat in pets').row(1));\n     *\n     * // Returns the SPAN for the first cat's name.\n     * var firstCatName = element(by.repeater('cat in pets').\n     *     row(0).column('cat.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements from a column\n     * var ages = element.all(\n     *     by.repeater('cat in pets').column('cat.age'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all top level elements repeated by the repeater. For 2 pets rows\n     * // resolves to an array of 2 elements.\n     * var rows = element.all(by.repeater('cat in pets'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all the elements with a binding to the book's name.\n     * var divs = element.all(by.repeater('book in library').column('book.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // the DIVs for the second book.\n     * var bookInfo = element.all(by.repeater('book in library').row(1));\n     *\n     * // Returns the H4 for the first book's name.\n     * var firstBookName = element(by.repeater('book in library').\n     *     row(0).column('book.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all top level elements repeated by the repeater. For 2 books divs\n     * // resolves to an array of 4 elements.\n     * var divs = element.all(by.repeater('book in library'));\n     *\n     * @param {string} repeatDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n\n  }, {\n    key: \"repeater\",\n    value: function repeater(repeatDescriptor) {\n      return this.byRepeaterInner(false, repeatDescriptor);\n    }\n    /**\n     * Find an element by exact repeater.\n     *\n     * @view\n     * <li ng-repeat=\"person in peopleWithRedHair\"></li>\n     * <li ng-repeat=\"car in cars | orderBy:year\"></li>\n     *\n     * @example\n     * expect(element(by.exactRepeater('person in\n     * peopleWithRedHair')).isPresent())\n     *     .toBe(true);\n     * expect(element(by.exactRepeater('person in\n     * people')).isPresent()).toBe(false);\n     * expect(element(by.exactRepeater('car in cars')).isPresent()).toBe(true);\n     *\n     * @param {string} repeatDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n\n  }, {\n    key: \"exactRepeater\",\n    value: function exactRepeater(repeatDescriptor) {\n      return this.byRepeaterInner(true, repeatDescriptor);\n    }\n    /**\n     * Find elements by CSS which contain a certain string.\n     *\n     * @view\n     * <ul>\n     *   <li class=\"pet\">Dog</li>\n     *   <li class=\"pet\">Cat</li>\n     * </ul>\n     *\n     * @example\n     * // Returns the li for the dog, but not cat.\n     * var dog = element(by.cssContainingText('.pet', 'Dog'));\n     *\n     * @param {string} cssSelector css selector\n     * @param {string|RegExp} searchString text search\n     * @returns {ProtractorLocator} location strategy\n     */\n\n  }, {\n    key: \"cssContainingText\",\n    value: function cssContainingText(cssSelector, searchText) {\n      searchText = searchText instanceof RegExp ? '__REGEXP__' + searchText.toString() : searchText;\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByCssContainingText, cssSelector, searchText, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.cssContainingText(\"' + cssSelector + '\", \"' + searchText + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"options\",\n\n    /**\n     * Find an element by ng-options expression.\n     *\n     * @alias by.options(optionsDescriptor)\n     * @view\n     * <select ng-model=\"color\" ng-options=\"c for c in colors\">\n     *   <option value=\"0\" selected=\"selected\">red</option>\n     *   <option value=\"1\">green</option>\n     * </select>\n     *\n     * @example\n     * var allOptions = element.all(by.options('c for c in colors'));\n     * expect(allOptions.count()).toEqual(2);\n     * var firstOption = allOptions.first();\n     * expect(firstOption.getText()).toEqual('red');\n     *\n     * @param {string} optionsDescriptor ng-options expression.\n     * @returns {ProtractorLocator} location strategy\n     */\n    value: function options(optionsDescriptor) {\n      return {\n        findElementsOverride: function findElementsOverride(driver, using, rootSelector) {\n          return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByOptions, optionsDescriptor, using, rootSelector));\n        },\n        toString: function toString() {\n          return 'by.option(\"' + optionsDescriptor + '\")';\n        }\n      };\n    }\n  }, {\n    key: \"deepCss\",\n\n    /**\n     * Find an element by css selector within the Shadow DOM.\n     *\n     * @alias by.deepCss(selector)\n     * @view\n     * <div>\n     *   <span id=\"outerspan\">\n     *   <\"shadow tree\">\n     *     <span id=\"span1\"></span>\n     *     <\"shadow tree\">\n     *       <span id=\"span2\"></span>\n     *     </>\n     *   </>\n     * </div>\n     * @example\n     * var spans = element.all(by.deepCss('span'));\n     * expect(spans.count()).toEqual(3);\n     *\n     * @param {string} selector a css selector within the Shadow DOM.\n     * @returns {Locator} location strategy\n     */\n    value: function deepCss(selector) {\n      // TODO(julie): syntax will change from /deep/ to >>> at some point.\n      // When that is supported, switch it here.\n      return selenium_webdriver_1.By.css('* /deep/ ' + selector);\n    }\n  }]);\n\n  return ProtractorBy;\n}(WebdriverBy);\n\nexports.ProtractorBy = ProtractorBy;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/locators.js"],"names":["Object","defineProperty","exports","value","selenium_webdriver_1","require","clientSideScripts","WebdriverBy","className","By","css","id","linkText","js","name","partialLinkText","tagName","xpath","isProtractorLocator","x","findElementsOverride","ProtractorBy","script","args","locatorArguments","driver","using","rootSelector","findElementArguments","i","length","push","findElements","apply","toString","Array","prototype","join","call","bindingDescriptor","findBindings","model","findByModel","searchText","findByButtonText","findByPartialButtonText","exact","repeatDescriptor","findAllRepeaterRows","row","index","findRepeaterRows","column","binding","findRepeaterElement","findRepeaterColumn","byRepeaterInner","cssSelector","RegExp","findByCssContainingText","optionsDescriptor","findByOptions","selector"],"mappings":"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yBAAOF,MAAM,CAACO,YAAP,CAAoB5B,oBAAoB,CAACK,EAArB,CAAwBI,EAAxB,CAA2BP,iBAAiB,CAACgD,mBAA7C,EAAkEP,gBAAlE,EAAoFD,KAApF,EAA2FI,KAA3F,EAAkGG,OAAlG,EAA2G3B,KAA3G,EAAkHC,YAAlH,CAApB,CAAP;AACH,iBAHE;AAIHO,gBAAAA,QAAQ,EAAE,oBAAM;AACZ,yBAAOpB,IAAI,GAAG,IAAP,GAAciC,gBAAd,GAAiC,aAAjC,GAAiDM,OAAjD,GAA2D,UAA3D,GACHH,KADG,GACK,IADZ;AAEH;AAPE,eAAP;AASH;AAjBE,WAAP;AAmBH;AAhDE,OAAP;AAkDH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BACaH,gB,EAAkB;AACvB,aAAO,KAAKS,eAAL,CAAqB,KAArB,EAA4BT,gBAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACkBA,gB,EAAkB;AAC5B,aAAO,KAAKS,eAAL,CAAqB,IAArB,EAA2BT,gBAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCACsBU,W,EAAad,U,EAAY;AACvCA,MAAAA,UAAU,GAAIA,UAAU,YAAYe,MAAvB,GAAiC,eAAef,UAAU,CAACT,QAAX,EAAhD,GAAwES,UAArF;AACA,aAAO;AACHvB,QAAAA,oBAAoB,EAAE,8BAACK,MAAD,EAASC,KAAT,EAAgBC,YAAhB,EAAiC;AACnD,iBAAOF,MAAM,CAACO,YAAP,CAAoB5B,oBAAoB,CAACK,EAArB,CAAwBI,EAAxB,CAA2BP,iBAAiB,CAACqD,uBAA7C,EAAsEF,WAAtE,EAAmFd,UAAnF,EAA+FjB,KAA/F,EAAsGC,YAAtG,CAApB,CAAP;AACH,SAHE;AAIHO,QAAAA,QAAQ,EAAE,oBAAM;AACZ,iBAAO,2BAA2BuB,WAA3B,GAAyC,MAAzC,GAAkDd,UAAlD,GAA+D,IAAtE;AACH;AANE,OAAP;AAQH;;;;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4BACYiB,iB,EAAmB;AACvB,aAAO;AACHxC,QAAAA,oBAAoB,EAAE,8BAACK,MAAD,EAASC,KAAT,EAAgBC,YAAhB,EAAiC;AACnD,iBAAOF,MAAM,CAACO,YAAP,CAAoB5B,oBAAoB,CAACK,EAArB,CAAwBI,EAAxB,CAA2BP,iBAAiB,CAACuD,aAA7C,EAA4DD,iBAA5D,EAA+ElC,KAA/E,EAAsFC,YAAtF,CAApB,CAAP;AACH,SAHE;AAIHO,QAAAA,QAAQ,EAAE,oBAAM;AACZ,iBAAO,gBAAgB0B,iBAAhB,GAAoC,IAA3C;AACH;AANE,OAAP;AAQH;;;;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4BACYE,Q,EAAU;AACd;AACA;AACA,aAAO1D,oBAAoB,CAACK,EAArB,CAAwBC,GAAxB,CAA4B,cAAcoD,QAA1C,CAAP;AACH;;;;EA9ZsBvD,W;;AAia3BL,OAAO,CAACmB,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nlet clientSideScripts = require('./clientsidescripts');\n// Explicitly define webdriver.By.\n// We do this because we want to inherit the static methods of webdriver.By, as opposed to\n// inheriting from the webdriver.By class itself, which is actually analogous to ProtractorLocator.\nclass WebdriverBy {\n    constructor() {\n        this.className = selenium_webdriver_1.By.className;\n        this.css = selenium_webdriver_1.By.css;\n        this.id = selenium_webdriver_1.By.id;\n        this.linkText = selenium_webdriver_1.By.linkText;\n        this.js = selenium_webdriver_1.By.js;\n        this.name = selenium_webdriver_1.By.name;\n        this.partialLinkText = selenium_webdriver_1.By.partialLinkText;\n        this.tagName = selenium_webdriver_1.By.tagName;\n        this.xpath = selenium_webdriver_1.By.xpath;\n    }\n}\nexports.WebdriverBy = WebdriverBy;\nfunction isProtractorLocator(x) {\n    return x && (typeof x.findElementsOverride === 'function');\n}\nexports.isProtractorLocator = isProtractorLocator;\n/**\n * The Protractor Locators. These provide ways of finding elements in\n * Angular applications by binding, model, etc.\n *\n * @alias by\n * @extends {webdriver.By}\n */\nclass ProtractorBy extends WebdriverBy {\n    /**\n     * Add a locator to this instance of ProtractorBy. This locator can then be\n     * used with element(by.locatorName(args)).\n     *\n     * @view\n     * <button ng-click=\"doAddition()\">Go!</button>\n     *\n     * @example\n     * // Add the custom locator.\n     * by.addLocator('buttonTextSimple',\n     *     function(buttonText, opt_parentElement, opt_rootSelector) {\n     *   // This function will be serialized as a string and will execute in the\n     *   // browser. The first argument is the text for the button. The second\n     *   // argument is the parent element, if any.\n     *   var using = opt_parentElement || document,\n     *       buttons = using.querySelectorAll('button');\n     *\n     *   // Return an array of buttons with the text.\n     *   return Array.prototype.filter.call(buttons, function(button) {\n     *     return button.textContent === buttonText;\n     *   });\n     * });\n     *\n     * // Use the custom locator.\n     * element(by.buttonTextSimple('Go!')).click();\n     *\n     * @alias by.addLocator(locatorName, functionOrScript)\n     * @param {string} name The name of the new locator.\n     * @param {Function|string} script A script to be run in the context of\n     *     the browser. This script will be passed an array of arguments\n     *     that contains any args passed into the locator followed by the\n     *     element scoping the search and the css selector for the root angular\n     *     element. It should return an array of elements.\n     */\n    addLocator(name, script) {\n        this[name] = (...args) => {\n            let locatorArguments = args;\n            return {\n                findElementsOverride: (driver, using, rootSelector) => {\n                    let findElementArguments = [script];\n                    for (let i = 0; i < locatorArguments.length; i++) {\n                        findElementArguments.push(locatorArguments[i]);\n                    }\n                    findElementArguments.push(using);\n                    findElementArguments.push(rootSelector);\n                    return driver.findElements(selenium_webdriver_1.By.js.apply(selenium_webdriver_1.By, findElementArguments));\n                },\n                toString: () => {\n                    return 'by.' + name + '(\"' + Array.prototype.join.call(locatorArguments, '\", \"') + '\")';\n                }\n            };\n        };\n    }\n    ;\n    /**\n     * Find an element by text binding. Does a partial match, so any elements\n     * bound to variables containing the input string will be returned.\n     *\n     * Note: For AngularJS version 1.2, the interpolation brackets, (usually\n     * {{}}), are optionally allowed in the binding description string. For\n     * Angular version 1.3+, they are not allowed, and no elements will be found\n     * if they are used.\n     *\n     * @view\n     * <span>{{person.name}}</span>\n     * <span ng-bind=\"person.email\"></span>\n     *\n     * @example\n     * var span1 = element(by.binding('person.name'));\n     * expect(span1.getText()).toBe('Foo');\n     *\n     * var span2 = element(by.binding('person.email'));\n     * expect(span2.getText()).toBe('foo@bar.com');\n     *\n     * // You can also use a substring for a partial match\n     * var span1alt = element(by.binding('name'));\n     * expect(span1alt.getText()).toBe('Foo');\n     *\n     * // This works for sites using Angular 1.2 but NOT 1.3\n     * var deprecatedSyntax = element(by.binding('{{person.name}}'));\n     *\n     * @param {string} bindingDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    binding(bindingDescriptor) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, false, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.binding(\"' + bindingDescriptor + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find an element by exact binding.\n     *\n     * @view\n     * <span>{{ person.name }}</span>\n     * <span ng-bind=\"person-email\"></span>\n     * <span>{{person_phone|uppercase}}</span>\n     *\n     * @example\n     * expect(element(by.exactBinding('person.name')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person-email')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person')).isPresent()).toBe(false);\n     * expect(element(by.exactBinding('person_phone')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('person_phone|uppercase')).isPresent()).toBe(true);\n     * expect(element(by.exactBinding('phone')).isPresent()).toBe(false);\n     *\n     * @param {string} bindingDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    exactBinding(bindingDescriptor) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, true, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.exactBinding(\"' + bindingDescriptor + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find an element by ng-model expression.\n     *\n     * @alias by.model(modelName)\n     * @view\n     * <input type=\"text\" ng-model=\"person.name\">\n     *\n     * @example\n     * var input = element(by.model('person.name'));\n     * input.sendKeys('123');\n     * expect(input.getAttribute('value')).toBe('Foo123');\n     *\n     * @param {string} model ng-model expression.\n     * @returns {ProtractorLocator} location strategy\n     */\n    model(model) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByModel, model, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.model(\"' + model + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find a button by text.\n     *\n     * @view\n     * <button>Save</button>\n     *\n     * @example\n     * element(by.buttonText('Save'));\n     *\n     * @param {string} searchText\n     * @returns {ProtractorLocator} location strategy\n     */\n    buttonText(searchText) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByButtonText, searchText, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.buttonText(\"' + searchText + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find a button by partial text.\n     *\n     * @view\n     * <button>Save my file</button>\n     *\n     * @example\n     * element(by.partialButtonText('Save'));\n     *\n     * @param {string} searchText\n     * @returns {ProtractorLocator} location strategy\n     */\n    partialButtonText(searchText) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByPartialButtonText, searchText, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.partialButtonText(\"' + searchText + '\")';\n            }\n        };\n    }\n    ;\n    // Generate either by.repeater or by.exactRepeater\n    byRepeaterInner(exact, repeatDescriptor) {\n        let name = 'by.' + (exact ? 'exactR' : 'r') + 'epeater';\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findAllRepeaterRows, repeatDescriptor, exact, using, rootSelector));\n            },\n            toString: () => {\n                return name + '(\"' + repeatDescriptor + '\")';\n            },\n            row: (index) => {\n                return {\n                    findElementsOverride: (driver, using, rootSelector) => {\n                        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterRows, repeatDescriptor, exact, index, using, rootSelector));\n                    },\n                    toString: () => {\n                        return name + '(' + repeatDescriptor + '\").row(\"' + index + '\")\"';\n                    },\n                    column: (binding) => {\n                        return {\n                            findElementsOverride: (driver, using, rootSelector) => {\n                                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n                            },\n                            toString: () => {\n                                return name + '(\"' + repeatDescriptor + '\").row(\"' + index + '\").column(\"' +\n                                    binding + '\")';\n                            }\n                        };\n                    }\n                };\n            },\n            column: (binding) => {\n                return {\n                    findElementsOverride: (driver, using, rootSelector) => {\n                        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterColumn, repeatDescriptor, exact, binding, using, rootSelector));\n                    },\n                    toString: () => {\n                        return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\")';\n                    },\n                    row: (index) => {\n                        return {\n                            findElementsOverride: (driver, using, rootSelector) => {\n                                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n                            },\n                            toString: () => {\n                                return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\").row(\"' +\n                                    index + '\")';\n                            }\n                        };\n                    }\n                };\n            }\n        };\n    }\n    /**\n     * Find elements inside an ng-repeat.\n     *\n     * @view\n     * <div ng-repeat=\"cat in pets\">\n     *   <span>{{cat.name}}</span>\n     *   <span>{{cat.age}}</span>\n     * </div>\n     *\n     * <div class=\"book-img\" ng-repeat-start=\"book in library\">\n     *   <span>{{$index}}</span>\n     * </div>\n     * <div class=\"book-info\" ng-repeat-end>\n     *   <h4>{{book.name}}</h4>\n     *   <p>{{book.blurb}}</p>\n     * </div>\n     *\n     * @example\n     * // Returns the DIV for the second cat.\n     * var secondCat = element(by.repeater('cat in pets').row(1));\n     *\n     * // Returns the SPAN for the first cat's name.\n     * var firstCatName = element(by.repeater('cat in pets').\n     *     row(0).column('cat.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements from a column\n     * var ages = element.all(\n     *     by.repeater('cat in pets').column('cat.age'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all top level elements repeated by the repeater. For 2 pets rows\n     * // resolves to an array of 2 elements.\n     * var rows = element.all(by.repeater('cat in pets'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all the elements with a binding to the book's name.\n     * var divs = element.all(by.repeater('book in library').column('book.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // the DIVs for the second book.\n     * var bookInfo = element.all(by.repeater('book in library').row(1));\n     *\n     * // Returns the H4 for the first book's name.\n     * var firstBookName = element(by.repeater('book in library').\n     *     row(0).column('book.name'));\n     *\n     * // Returns a promise that resolves to an array of WebElements containing\n     * // all top level elements repeated by the repeater. For 2 books divs\n     * // resolves to an array of 4 elements.\n     * var divs = element.all(by.repeater('book in library'));\n     *\n     * @param {string} repeatDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    repeater(repeatDescriptor) {\n        return this.byRepeaterInner(false, repeatDescriptor);\n    }\n    /**\n     * Find an element by exact repeater.\n     *\n     * @view\n     * <li ng-repeat=\"person in peopleWithRedHair\"></li>\n     * <li ng-repeat=\"car in cars | orderBy:year\"></li>\n     *\n     * @example\n     * expect(element(by.exactRepeater('person in\n     * peopleWithRedHair')).isPresent())\n     *     .toBe(true);\n     * expect(element(by.exactRepeater('person in\n     * people')).isPresent()).toBe(false);\n     * expect(element(by.exactRepeater('car in cars')).isPresent()).toBe(true);\n     *\n     * @param {string} repeatDescriptor\n     * @returns {ProtractorLocator} location strategy\n     */\n    exactRepeater(repeatDescriptor) {\n        return this.byRepeaterInner(true, repeatDescriptor);\n    }\n    /**\n     * Find elements by CSS which contain a certain string.\n     *\n     * @view\n     * <ul>\n     *   <li class=\"pet\">Dog</li>\n     *   <li class=\"pet\">Cat</li>\n     * </ul>\n     *\n     * @example\n     * // Returns the li for the dog, but not cat.\n     * var dog = element(by.cssContainingText('.pet', 'Dog'));\n     *\n     * @param {string} cssSelector css selector\n     * @param {string|RegExp} searchString text search\n     * @returns {ProtractorLocator} location strategy\n     */\n    cssContainingText(cssSelector, searchText) {\n        searchText = (searchText instanceof RegExp) ? '__REGEXP__' + searchText.toString() : searchText;\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByCssContainingText, cssSelector, searchText, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.cssContainingText(\"' + cssSelector + '\", \"' + searchText + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find an element by ng-options expression.\n     *\n     * @alias by.options(optionsDescriptor)\n     * @view\n     * <select ng-model=\"color\" ng-options=\"c for c in colors\">\n     *   <option value=\"0\" selected=\"selected\">red</option>\n     *   <option value=\"1\">green</option>\n     * </select>\n     *\n     * @example\n     * var allOptions = element.all(by.options('c for c in colors'));\n     * expect(allOptions.count()).toEqual(2);\n     * var firstOption = allOptions.first();\n     * expect(firstOption.getText()).toEqual('red');\n     *\n     * @param {string} optionsDescriptor ng-options expression.\n     * @returns {ProtractorLocator} location strategy\n     */\n    options(optionsDescriptor) {\n        return {\n            findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByOptions, optionsDescriptor, using, rootSelector));\n            },\n            toString: () => {\n                return 'by.option(\"' + optionsDescriptor + '\")';\n            }\n        };\n    }\n    ;\n    /**\n     * Find an element by css selector within the Shadow DOM.\n     *\n     * @alias by.deepCss(selector)\n     * @view\n     * <div>\n     *   <span id=\"outerspan\">\n     *   <\"shadow tree\">\n     *     <span id=\"span1\"></span>\n     *     <\"shadow tree\">\n     *       <span id=\"span2\"></span>\n     *     </>\n     *   </>\n     * </div>\n     * @example\n     * var spans = element.all(by.deepCss('span'));\n     * expect(spans.count()).toEqual(3);\n     *\n     * @param {string} selector a css selector within the Shadow DOM.\n     * @returns {Locator} location strategy\n     */\n    deepCss(selector) {\n        // TODO(julie): syntax will change from /deep/ to >>> at some point.\n        // When that is supported, switch it here.\n        return selenium_webdriver_1.By.css('* /deep/ ' + selector);\n    }\n    ;\n}\nexports.ProtractorBy = ProtractorBy;\n//# sourceMappingURL=locators.js.map"]},"metadata":{},"sourceType":"script"}