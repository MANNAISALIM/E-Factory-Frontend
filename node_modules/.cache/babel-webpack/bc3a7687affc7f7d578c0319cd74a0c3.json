{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Direct Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar chrome_1 = require(\"selenium-webdriver/chrome\");\n\nvar exitCodes_1 = require(\"../exitCodes\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\n\nvar logger = new logger_1.Logger('direct');\n\nvar Direct = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(Direct, _driverProvider_1$Dri);\n\n  var _super = _createSuper(Direct);\n\n  function Direct(config) {\n    _classCallCheck(this, Direct);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  _createClass(Direct, [{\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      switch (this.config_.capabilities.browserName) {\n        case 'chrome':\n          logger.info('Using ChromeDriver directly...');\n          break;\n\n        case 'firefox':\n          logger.info('Using FirefoxDriver directly...');\n          break;\n\n        default:\n          throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n      }\n\n      return q.fcall(function () {});\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var driver;\n\n      switch (this.config_.capabilities.browserName) {\n        case 'chrome':\n          var chromeDriverFile;\n\n          if (this.config_.chromeDriver) {\n            chromeDriverFile = this.config_.chromeDriver;\n          } else {\n            try {\n              var updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n              var updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n              chromeDriverFile = updateConfig.chrome.last;\n            } catch (e) {\n              throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n            }\n          }\n\n          if (!fs.existsSync(chromeDriverFile)) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + chromeDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n          }\n\n          var chromeService = new chrome_1.ServiceBuilder(chromeDriverFile).build(); // driver = ChromeDriver.createSession(new Capabilities(this.config_.capabilities),\n          // chromeService);\n          // TODO(ralphj): fix typings\n\n          driver = require('selenium-webdriver/chrome').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), chromeService);\n          break;\n\n        case 'firefox':\n          var geckoDriverFile;\n\n          if (this.config_.geckoDriver) {\n            geckoDriverFile = this.config_.geckoDriver;\n          } else {\n            try {\n              var _updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n\n              var _updateConfig = JSON.parse(fs.readFileSync(_updateJson).toString());\n\n              geckoDriverFile = _updateConfig.gecko.last;\n            } catch (e) {\n              throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n            }\n          }\n\n          if (!fs.existsSync(geckoDriverFile)) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find geckodriver at ' + geckoDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n          } // TODO (mgiambalvo): Turn this into an import when the selenium typings are updated.\n\n\n          var FirefoxServiceBuilder = require('selenium-webdriver/firefox').ServiceBuilder;\n\n          var firefoxService = new FirefoxServiceBuilder(geckoDriverFile).build(); // TODO(mgiambalvo): Fix typings.\n\n          driver = require('selenium-webdriver/firefox').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), firefoxService);\n          break;\n\n        default:\n          throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n      }\n\n      this.drivers_.push(driver);\n      return driver;\n    }\n  }]);\n\n  return Direct;\n}(driverProvider_1.DriverProvider);\n\nexports.Direct = Direct;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/direct.js"],"names":["Object","defineProperty","exports","value","fs","require","path","q","selenium_webdriver_1","chrome_1","exitCodes_1","logger_1","driverProvider_1","SeleniumConfig","Config","logger","Logger","Direct","config","config_","capabilities","browserName","info","BrowserError","fcall","driver","chromeDriverFile","chromeDriver","updateJson","resolve","getSeleniumDir","updateConfig","JSON","parse","readFileSync","toString","chrome","last","e","existsSync","chromeService","ServiceBuilder","build","Driver","createSession","Capabilities","geckoDriverFile","geckoDriver","gecko","FirefoxServiceBuilder","firefoxService","drivers_","push","DriverProvider"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n *  This is an implementation of the Direct Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst chrome_1 = require(\"selenium-webdriver/chrome\");\nconst exitCodes_1 = require(\"../exitCodes\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\nlet logger = new logger_1.Logger('direct');\nclass Direct extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        switch (this.config_.capabilities.browserName) {\n            case 'chrome':\n                logger.info('Using ChromeDriver directly...');\n                break;\n            case 'firefox':\n                logger.info('Using FirefoxDriver directly...');\n                break;\n            default:\n                throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName +\n                    ' is not supported with directConnect.');\n        }\n        return q.fcall(function () { });\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n    getNewDriver() {\n        let driver;\n        switch (this.config_.capabilities.browserName) {\n            case 'chrome':\n                let chromeDriverFile;\n                if (this.config_.chromeDriver) {\n                    chromeDriverFile = this.config_.chromeDriver;\n                }\n                else {\n                    try {\n                        let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                        let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                        chromeDriverFile = updateConfig.chrome.last;\n                    }\n                    catch (e) {\n                        throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' +\n                            'Run \\'webdriver-manager update\\' to download binaries.');\n                    }\n                }\n                if (!fs.existsSync(chromeDriverFile)) {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + chromeDriverFile +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n                let chromeService = new chrome_1.ServiceBuilder(chromeDriverFile).build();\n                // driver = ChromeDriver.createSession(new Capabilities(this.config_.capabilities),\n                // chromeService);\n                // TODO(ralphj): fix typings\n                driver =\n                    require('selenium-webdriver/chrome')\n                        .Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), chromeService);\n                break;\n            case 'firefox':\n                let geckoDriverFile;\n                if (this.config_.geckoDriver) {\n                    geckoDriverFile = this.config_.geckoDriver;\n                }\n                else {\n                    try {\n                        let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                        let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                        geckoDriverFile = updateConfig.gecko.last;\n                    }\n                    catch (e) {\n                        throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' +\n                            'Run \\'webdriver-manager update\\' to download binaries.');\n                    }\n                }\n                if (!fs.existsSync(geckoDriverFile)) {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find geckodriver at ' + geckoDriverFile +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n                // TODO (mgiambalvo): Turn this into an import when the selenium typings are updated.\n                const FirefoxServiceBuilder = require('selenium-webdriver/firefox').ServiceBuilder;\n                let firefoxService = new FirefoxServiceBuilder(geckoDriverFile).build();\n                // TODO(mgiambalvo): Fix typings.\n                driver =\n                    require('selenium-webdriver/firefox')\n                        .Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), firefoxService);\n                break;\n            default:\n                throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName +\n                    ' is not supported with directConnect.');\n        }\n        this.drivers_.push(driver);\n        return driver;\n    }\n}\nexports.Direct = Direct;\n//# sourceMappingURL=direct.js.map"]},"metadata":{},"sourceType":"script"}