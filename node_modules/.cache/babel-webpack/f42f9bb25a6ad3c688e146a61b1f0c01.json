{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Command = require('selenium-webdriver/lib/command').Command;\n\nvar Extender = /*#__PURE__*/function () {\n  function Extender(driver) {\n    _classCallCheck(this, Extender);\n\n    this.driver_ = driver;\n    this.params_ = {};\n    this.executor_ = driver.getExecutor ? driver.getExecutor() : driver.executor_;\n  }\n  /**\n   * Defines a new command. When a command is sent, the {@code path} will be\n   * preprocessed using the command's parameters; any path segments prefixed\n   * with \":\" will be replaced by the parameter of the same name. For example,\n   * given \"/person/:name\" and the parameters \"{name: 'Bob'}\", the final command\n   * path will be \"/person/Bob\".\n   *\n   * @param {string} name The command name.\n   * @param {string} params The names of the parameters to the command\n   * @param {string} method The HTTP method to use when sending this command.\n   * @param {string} path The path to send the command to, relative to\n   *     the WebDriver server's command root and of the form\n   *     \"/path/:variable/segment\".\n   */\n\n\n  _createClass(Extender, [{\n    key: \"defineCommand\",\n    value: function defineCommand(name, params, method, path) {\n      this.executor_.defineCommand(name, method, path);\n      this.params_[method + ':' + name] = params;\n    }\n    /**\n     * Executes a command which was defined by defineCommand()\n     *\n     * @param {string} name The command name.\n     * @param {*[]} params The parameters to the command\n     * @return {webdriver.promise.Promise<*>} A promise that will be resolved with\n     *     the command result\n     */\n\n  }, {\n    key: \"execCommand\",\n    value: function execCommand(name, method, params) {\n      var paramNames = this.params_[method + ':' + name];\n\n      if (paramNames === undefined) {\n        throw new RangeError('The command \"' + name + '\" has not yet been defined');\n      }\n\n      if (paramNames.length !== params.length) {\n        throw new RangeError('The command \"' + name + '\" expected ' + paramNames.length + ' parameters, got ' + params.length);\n      }\n\n      var command = new Command(name);\n\n      for (var i = 0; i < params.length; i++) {\n        if (params[i] !== undefined) {\n          command.setParameter(paramNames[i], params[i]);\n        }\n      }\n\n      return this.driver_.schedule(command, 'Custom Command: ' + name + '(' + params.map(function (x) {\n        if (typeof x == 'number' || typeof x == 'boolean' || typeof x == 'function') {\n          return x.toString();\n        } else if (x == null) {\n          return '' + x;\n        } else {\n          return JSON.stringify(x);\n        }\n      }).join(', ') + ')');\n    }\n  }]);\n\n  return Extender;\n}();\n\nexports.Extender = Extender;","map":{"version":3,"sources":["../../lib/extender.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAI,OAAO,GAAG,OAAO,CAAC,gCAAD,CAAP,CAA0C,OAAxD;;IAEA,Q;AAME,oBAAY,MAAZ,EAA6B;AAAA;;AAC3B,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,SAAL,GACK,MAAc,CAAC,WAAf,GAA8B,MAAc,CAAC,WAAf,EAA9B,GAA8D,MAAc,CAAC,SADlF;AAED;AAED;;;;;;;;;;;;;AAaG;;;;;kCACW,I,EAAc,M,EAAkB,M,EAAgB,I,EAAY;AACxE,WAAK,SAAL,CAAe,aAAf,CAA6B,IAA7B,EAAmC,MAAnC,EAA2C,IAA3C;AACA,WAAK,OAAL,CAAa,MAAM,GAAG,GAAT,GAAe,IAA5B,IAAoC,MAApC;AACD;AAED;;;;;;;AAOG;;;;gCACY,I,EAAc,M,EAAgB,M,EAAa;AACxD,UAAI,UAAU,GAAG,KAAK,OAAL,CAAa,MAAM,GAAG,GAAT,GAAe,IAA5B,CAAjB;;AACA,UAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,cAAM,IAAI,UAAJ,CAAe,kBAAkB,IAAlB,GAAyB,4BAAxC,CAAN;AACD;;AACD,UAAI,UAAU,CAAC,MAAX,KAAsB,MAAM,CAAC,MAAjC,EAAyC;AACvC,cAAM,IAAI,UAAJ,CACF,kBAAkB,IAAlB,GAAyB,aAAzB,GAAyC,UAAU,CAAC,MAApD,GAA6D,mBAA7D,GACA,MAAM,CAAC,MAFL,CAAN;AAGD;;AACD,UAAI,OAAO,GAAG,IAAI,OAAJ,CAAY,IAAZ,CAAd;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,YAAI,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAC3B,UAAA,OAAO,CAAC,YAAR,CAAqB,UAAU,CAAC,CAAD,CAA/B,EAAoC,MAAM,CAAC,CAAD,CAA1C;AACD;AACF;;AACD,aAAO,KAAK,OAAL,CAAa,QAAb,CACH,OADG,EAEH,qBAAqB,IAArB,GAA4B,GAA5B,GACI,MAAM,CACD,GADL,CACS,UAAC,CAAD,EAAW;AACd,YAAK,OAAO,CAAP,IAAY,QAAb,IAA2B,OAAO,CAAP,IAAY,SAAvC,IACC,OAAO,CAAP,IAAY,UADjB,EAC8B;AAC5B,iBAAO,CAAC,CAAC,QAAF,EAAP;AACD,SAHD,MAGO,IAAI,CAAC,IAAI,IAAT,EAAe;AACpB,iBAAO,KAAK,CAAZ;AACD,SAFM,MAEA;AACL,iBAAO,IAAI,CAAC,SAAL,CAAe,CAAf,CAAP;AACD;AACF,OAVL,EAWK,IAXL,CAWU,IAXV,CADJ,GAaI,GAfD,CAAP;AAgBD;;;;;;AAxEH,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet Command = require('selenium-webdriver/lib/command').Command;\nclass Extender {\n    constructor(driver) {\n        this.driver_ = driver;\n        this.params_ = {};\n        this.executor_ =\n            driver.getExecutor ? driver.getExecutor() : driver.executor_;\n    }\n    /**\n     * Defines a new command. When a command is sent, the {@code path} will be\n     * preprocessed using the command's parameters; any path segments prefixed\n     * with \":\" will be replaced by the parameter of the same name. For example,\n     * given \"/person/:name\" and the parameters \"{name: 'Bob'}\", the final command\n     * path will be \"/person/Bob\".\n     *\n     * @param {string} name The command name.\n     * @param {string} params The names of the parameters to the command\n     * @param {string} method The HTTP method to use when sending this command.\n     * @param {string} path The path to send the command to, relative to\n     *     the WebDriver server's command root and of the form\n     *     \"/path/:variable/segment\".\n     */\n    defineCommand(name, params, method, path) {\n        this.executor_.defineCommand(name, method, path);\n        this.params_[method + ':' + name] = params;\n    }\n    /**\n     * Executes a command which was defined by defineCommand()\n     *\n     * @param {string} name The command name.\n     * @param {*[]} params The parameters to the command\n     * @return {webdriver.promise.Promise<*>} A promise that will be resolved with\n     *     the command result\n     */\n    execCommand(name, method, params) {\n        var paramNames = this.params_[method + ':' + name];\n        if (paramNames === undefined) {\n            throw new RangeError('The command \"' + name + '\" has not yet been defined');\n        }\n        if (paramNames.length !== params.length) {\n            throw new RangeError('The command \"' + name + '\" expected ' + paramNames.length + ' parameters, got ' +\n                params.length);\n        }\n        var command = new Command(name);\n        for (var i = 0; i < params.length; i++) {\n            if (params[i] !== undefined) {\n                command.setParameter(paramNames[i], params[i]);\n            }\n        }\n        return this.driver_.schedule(command, 'Custom Command: ' + name + '(' +\n            params\n                .map((x) => {\n                if ((typeof x == 'number') || (typeof x == 'boolean') ||\n                    (typeof x == 'function')) {\n                    return x.toString();\n                }\n                else if (x == null) {\n                    return '' + x;\n                }\n                else {\n                    return JSON.stringify(x);\n                }\n            })\n                .join(', ') +\n            ')');\n    }\n}\nexports.Extender = Extender;\n//# sourceMappingURL=extender.js.map"]},"metadata":{},"sourceType":"script"}