{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\n\n\nvar SimpleWebDriverClient = /*#__PURE__*/function () {\n  function SimpleWebDriverClient(seleniumAddress) {\n    _classCallCheck(this, SimpleWebDriverClient);\n\n    this.seleniumAddress = seleniumAddress;\n  }\n  /**\n   * Send an execute script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  _createClass(SimpleWebDriverClient, [{\n    key: \"execute\",\n    value: function execute(sessionId, data) {\n      var url = ['session', sessionId, 'execute'].join('/');\n      return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Send an execute async script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n\n  }, {\n    key: \"executeAsync\",\n    value: function executeAsync(sessionId, data) {\n      var url = ['session', sessionId, 'execute_async'].join('/');\n      return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Get the location of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n     */\n\n  }, {\n    key: \"getLocation\",\n    value: function getLocation(sessionId, elementId) {\n      var url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n      return this.createSeleniumRequest('GET', url);\n    }\n    /**\n     * Get the size of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the height and width of the element.\n     */\n\n  }, {\n    key: \"getSize\",\n    value: function getSize(sessionId, elementId) {\n      var url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n      return this.createSeleniumRequest('GET', url);\n    }\n  }, {\n    key: \"createSeleniumRequest\",\n    value: function createSeleniumRequest(method, messageUrl, data) {\n      var parsedUrl = url.parse(this.seleniumAddress);\n      var options = {};\n      options['method'] = method;\n      options['path'] = parsedUrl.path + '/' + messageUrl;\n      options['hostname'] = parsedUrl.hostname;\n      options['port'] = parseInt(parsedUrl.port);\n      var request = http.request(options);\n      return new Promise(function (resolve, reject) {\n        if (data) {\n          request.write(data);\n        }\n\n        request.end();\n        request.on('response', function (resp) {\n          var respData = '';\n          resp.on('data', function (d) {\n            respData += d;\n          });\n          resp.on('error', function (err) {\n            reject(err);\n          });\n          resp.on('end', function () {\n            var response = JSON.parse(respData); // Selenium 3.5.x or greater\n\n            if (response.status && response.status > 0) {\n              console.error(\"Got status \".concat(response.status, \" from selenium\"), response.value);\n              reject(JSON.stringify(response.value));\n            } // Selenium 3.0.x\n\n\n            if (response.state && response.state !== 'success') {\n              console.error(\"Got response \".concat(response.state, \" from selenium\"), response.value);\n              reject(JSON.stringify(response.value));\n            }\n\n            resolve(response.value);\n          });\n        });\n      });\n    }\n  }]);\n\n  return SimpleWebDriverClient;\n}();\n\nexports.SimpleWebDriverClient = SimpleWebDriverClient;","map":{"version":3,"sources":["../../lib/simple_webdriver_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\nclass SimpleWebDriverClient {\n    constructor(seleniumAddress) {\n        this.seleniumAddress = seleniumAddress;\n    }\n    /**\n     * Send an execute script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n    execute(sessionId, data) {\n        const url = ['session', sessionId, 'execute'].join('/');\n        return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Send an execute async script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n    executeAsync(sessionId, data) {\n        const url = ['session', sessionId, 'execute_async'].join('/');\n        return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Get the location of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n     */\n    getLocation(sessionId, elementId) {\n        const url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n        return this.createSeleniumRequest('GET', url);\n    }\n    /**\n     * Get the size of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the height and width of the element.\n     */\n    getSize(sessionId, elementId) {\n        const url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n        return this.createSeleniumRequest('GET', url);\n    }\n    createSeleniumRequest(method, messageUrl, data) {\n        let parsedUrl = url.parse(this.seleniumAddress);\n        let options = {};\n        options['method'] = method;\n        options['path'] = parsedUrl.path + '/' + messageUrl;\n        options['hostname'] = parsedUrl.hostname;\n        options['port'] = parseInt(parsedUrl.port);\n        let request = http.request(options);\n        return new Promise((resolve, reject) => {\n            if (data) {\n                request.write(data);\n            }\n            request.end();\n            request.on('response', (resp) => {\n                let respData = '';\n                resp.on('data', (d) => {\n                    respData += d;\n                });\n                resp.on('error', (err) => {\n                    reject(err);\n                });\n                resp.on('end', () => {\n                    let response = JSON.parse(respData);\n                    // Selenium 3.5.x or greater\n                    if (response.status && response.status > 0) {\n                        console.error(`Got status ${response.status} from selenium`, response.value);\n                        reject(JSON.stringify(response.value));\n                    }\n                    // Selenium 3.0.x\n                    if (response.state && response.state !== 'success') {\n                        console.error(`Got response ${response.state} from selenium`, response.value);\n                        reject(JSON.stringify(response.value));\n                    }\n                    resolve(response.value);\n                });\n            });\n        });\n    }\n    ;\n}\nexports.SimpleWebDriverClient = SimpleWebDriverClient;\n//# sourceMappingURL=simple_webdriver_client.js.map"]},"metadata":{},"sourceType":"script"}