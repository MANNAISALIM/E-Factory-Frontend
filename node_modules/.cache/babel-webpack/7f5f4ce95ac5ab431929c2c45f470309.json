{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The heart of the WebDriver JavaScript API.\n */\n'use strict';\n\nvar _defineProperty = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _actions = require('./actions');\n\nvar by = require('./by');\n\nvar Capabilities = require('./capabilities').Capabilities;\n\nvar command = require('./command');\n\nvar error = require('./error');\n\nvar input = require('./input');\n\nvar logging = require('./logging');\n\nvar _require = require('./session'),\n    Session = _require.Session;\n\nvar Symbols = require('./symbols');\n\nvar promise = require('./promise');\n/**\n * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait\n * command}.\n *\n * @template OUT\n */\n\n\nvar Condition = /*#__PURE__*/function () {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): OUT} fn The condition function to\n   *     evaluate on each iteration of the wait loop.\n   */\n  function Condition(message, fn) {\n    _classCallCheck(this, Condition);\n\n    /** @private {string} */\n    this.description_ = 'Waiting ' + message;\n    /** @type {function(!WebDriver): OUT} */\n\n    this.fn = fn;\n  }\n  /** @return {string} A description of this condition. */\n\n\n  _createClass(Condition, [{\n    key: \"description\",\n    value: function description() {\n      return this.description_;\n    }\n  }]);\n\n  return Condition;\n}();\n/**\n * Defines a condition that will result in a {@link WebElement}.\n *\n * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}\n */\n\n\nvar WebElementCondition = /*#__PURE__*/function (_Condition) {\n  _inherits(WebElementCondition, _Condition);\n\n  var _super = _createSuper(WebElementCondition);\n\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}\n   *     fn The condition function to evaluate on each iteration of the wait\n   *     loop.\n   */\n  function WebElementCondition(message, fn) {\n    _classCallCheck(this, WebElementCondition);\n\n    return _super.call(this, message, fn);\n  }\n\n  return WebElementCondition;\n}(Condition); //////////////////////////////////////////////////////////////////////////////\n//\n//  WebDriver\n//\n//////////////////////////////////////////////////////////////////////////////\n\n/**\n * Translates a command to its wire-protocol representation before passing it\n * to the given `executor` for execution.\n * @param {!command.Executor} executor The executor to use.\n * @param {!command.Command} command The command to execute.\n * @return {!Promise} A promise that will resolve with the command response.\n */\n\n\nfunction executeCommand(executor, command) {\n  return toWireValue(command.getParameters()).then(function (parameters) {\n    command.setParameters(parameters);\n    return executor.execute(command);\n  });\n}\n/**\n * Converts an object to its JSON representation in the WebDriver wire protocol.\n * When converting values of type object, the following steps will be taken:\n * <ol>\n * <li>if the object is a WebElement, the return value will be the element's\n *     server ID\n * <li>if the object defines a {@link Symbols.serialize} method, this algorithm\n *     will be recursively applied to the object's serialized representation\n * <li>if the object provides a \"toJSON\" function, this algorithm will\n *     recursively be applied to the result of that function\n * <li>otherwise, the value of each key will be recursively converted according\n *     to the rules above.\n * </ol>\n *\n * @param {*} obj The object to convert.\n * @return {!Promise<?>} A promise that will resolve to the input value's JSON\n *     representation.\n */\n\n\nfunction toWireValue(obj) {\n  if (promise.isPromise(obj)) {\n    return Promise.resolve(obj).then(toWireValue);\n  }\n\n  return Promise.resolve(convertValue(obj));\n}\n\nfunction convertValue(value) {\n  if (value === void 0 || value === null) {\n    return value;\n  }\n\n  if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string') {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return convertKeys(value);\n  }\n\n  if (typeof value === 'function') {\n    return '' + value;\n  }\n\n  if (typeof value[Symbols.serialize] === 'function') {\n    return toWireValue(value[Symbols.serialize]());\n  } else if (typeof value.toJSON === 'function') {\n    return toWireValue(value.toJSON());\n  }\n\n  return convertKeys(value);\n}\n\nfunction convertKeys(obj) {\n  var isArray = Array.isArray(obj);\n  var numKeys = isArray ? obj.length : Object.keys(obj).length;\n  var ret = isArray ? new Array(numKeys) : {};\n\n  if (!numKeys) {\n    return Promise.resolve(ret);\n  }\n\n  var numResolved = 0;\n\n  function forEachKey(obj, fn) {\n    if (Array.isArray(obj)) {\n      for (var i = 0, n = obj.length; i < n; i++) {\n        fn(obj[i], i);\n      }\n    } else {\n      for (var key in obj) {\n        fn(obj[key], key);\n      }\n    }\n  }\n\n  return new Promise(function (done, reject) {\n    forEachKey(obj, function (value, key) {\n      if (promise.isPromise(value)) {\n        value.then(toWireValue).then(setValue, reject);\n      } else {\n        value = convertValue(value);\n\n        if (promise.isPromise(value)) {\n          value.then(toWireValue).then(setValue, reject);\n        } else {\n          setValue(value);\n        }\n      }\n\n      function setValue(value) {\n        ret[key] = value;\n        maybeFulfill();\n      }\n    });\n\n    function maybeFulfill() {\n      if (++numResolved === numKeys) {\n        done(ret);\n      }\n    }\n  });\n}\n/**\n * Converts a value from its JSON representation according to the WebDriver wire\n * protocol. Any JSON object that defines a WebElement ID will be decoded to a\n * {@link WebElement} object. All other values will be passed through as is.\n *\n * @param {!WebDriver} driver The driver to use as the parent of any unwrapped\n *     {@link WebElement} values.\n * @param {*} value The value to convert.\n * @return {*} The converted value.\n */\n\n\nfunction fromWireValue(driver, value) {\n  if (Array.isArray(value)) {\n    value = value.map(function (v) {\n      return fromWireValue(driver, v);\n    });\n  } else if (WebElement.isId(value)) {\n    var id = WebElement.extractId(value);\n    value = new WebElement(driver, id);\n  } else if (value && typeof value === 'object') {\n    var result = {};\n\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        result[key] = fromWireValue(driver, value[key]);\n      }\n    }\n\n    value = result;\n  }\n\n  return value;\n}\n/**\n * Structural interface for a WebDriver client.\n *\n * @record\n */\n\n\nvar IWebDriver = /*#__PURE__*/function () {\n  function IWebDriver() {\n    _classCallCheck(this, IWebDriver);\n  }\n\n  _createClass(IWebDriver, [{\n    key: \"controlFlow\",\n\n    /** @return {!promise.ControlFlow} The control flow used by this instance. */\n    value: function controlFlow() {}\n    /**\n     * Schedules a {@link command.Command} to be executed by this driver's\n     * {@link command.Executor}.\n     *\n     * @param {!command.Command} command The command to schedule.\n     * @param {string} description A description of the command for debugging.\n     * @return {!promise.Thenable<T>} A promise that will be resolved\n     *     with the command result.\n     * @template T\n     */\n\n  }, {\n    key: \"schedule\",\n    value: function schedule(command, description) {}\n    /**\n     * Sets the {@linkplain input.FileDetector file detector} that should be\n     * used with this instance.\n     * @param {input.FileDetector} detector The detector to use or {@code null}.\n     */\n\n  }, {\n    key: \"setFileDetector\",\n    value: function setFileDetector(detector) {}\n    /**\n     * @return {!command.Executor} The command executor used by this instance.\n     */\n\n  }, {\n    key: \"getExecutor\",\n    value: function getExecutor() {}\n    /**\n     * @return {!promise.Thenable<!Session>} A promise for this client's session.\n     */\n\n  }, {\n    key: \"getSession\",\n    value: function getSession() {}\n    /**\n     * @return {!promise.Thenable<!Capabilities>} A promise that will resolve with\n     *     the this instance's capabilities.\n     */\n\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {}\n    /**\n     * Terminates the browser session. After calling quit, this instance will be\n     * invalidated and may no longer be used to issue commands against the\n     * browser.\n     *\n     * @return {!promise.Thenable<void>} A promise that will be resolved when the\n     *     command has completed.\n     */\n\n  }, {\n    key: \"quit\",\n    value: function quit() {}\n    /**\n     * Creates a new action sequence using this driver. The sequence will not be\n     * scheduled for execution until {@link actions.ActionSequence#perform} is\n     * called. Example:\n     *\n     *     driver.actions().\n     *         mouseDown(element1).\n     *         mouseMove(element2).\n     *         mouseUp().\n     *         perform();\n     *\n     * @return {!actions.ActionSequence} A new action sequence for this instance.\n     */\n\n  }, {\n    key: \"actions\",\n    value: function actions() {}\n    /**\n     * Creates a new touch sequence using this driver. The sequence will not be\n     * scheduled for execution until {@link actions.TouchSequence#perform} is\n     * called. Example:\n     *\n     *     driver.touchActions().\n     *         tap(element1).\n     *         doubleTap(element2).\n     *         perform();\n     *\n     * @return {!actions.TouchSequence} A new touch sequence for this instance.\n     */\n\n  }, {\n    key: \"touchActions\",\n    value: function touchActions() {}\n    /**\n     * Schedules a command to execute JavaScript in the context of the currently\n     * selected frame or window. The script fragment will be executed as the body\n     * of an anonymous function. If the script is provided as a function object,\n     * that function will be converted to a string for injection into the target\n     * window.\n     *\n     * Any arguments provided in addition to the script will be included as script\n     * arguments and may be referenced using the {@code arguments} object.\n     * Arguments may be a boolean, number, string, or {@linkplain WebElement}.\n     * Arrays and objects may also be used as script arguments as long as each item\n     * adheres to the types previously mentioned.\n     *\n     * The script may refer to any variables accessible from the current window.\n     * Furthermore, the script will execute in the window's context, thus\n     * {@code document} may be used to refer to the current document. Any local\n     * variables will not be available once the script has finished executing,\n     * though global variables will persist.\n     *\n     * If the script has a return value (i.e. if the script contains a return\n     * statement), then the following steps will be taken for resolving this\n     * functions return value:\n     *\n     * - For a HTML element, the value will resolve to a {@linkplain WebElement}\n     * - Null and undefined return values will resolve to null</li>\n     * - Booleans, numbers, and strings will resolve as is</li>\n     * - Functions will resolve to their string representation</li>\n     * - For arrays and objects, each member item will be converted according to\n     *     the rules above\n     *\n     * @param {!(string|Function)} script The script to execute.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @return {!promise.Thenable<T>} A promise that will resolve to the\n     *    scripts return value.\n     * @template T\n     */\n\n  }, {\n    key: \"executeScript\",\n    value: function executeScript(script, var_args) {}\n    /**\n     * Schedules a command to execute asynchronous JavaScript in the context of the\n     * currently selected frame or window. The script fragment will be executed as\n     * the body of an anonymous function. If the script is provided as a function\n     * object, that function will be converted to a string for injection into the\n     * target window.\n     *\n     * Any arguments provided in addition to the script will be included as script\n     * arguments and may be referenced using the {@code arguments} object.\n     * Arguments may be a boolean, number, string, or {@code WebElement}.\n     * Arrays and objects may also be used as script arguments as long as each item\n     * adheres to the types previously mentioned.\n     *\n     * Unlike executing synchronous JavaScript with {@link #executeScript},\n     * scripts executed with this function must explicitly signal they are finished\n     * by invoking the provided callback. This callback will always be injected\n     * into the executed function as the last argument, and thus may be referenced\n     * with {@code arguments[arguments.length - 1]}. The following steps will be\n     * taken for resolving this functions return value against the first argument\n     * to the script's callback function:\n     *\n     * - For a HTML element, the value will resolve to a\n     *     {@link WebElement}\n     * - Null and undefined return values will resolve to null\n     * - Booleans, numbers, and strings will resolve as is\n     * - Functions will resolve to their string representation\n     * - For arrays and objects, each member item will be converted according to\n     *     the rules above\n     *\n     * __Example #1:__ Performing a sleep that is synchronized with the currently\n     * selected window:\n     *\n     *     var start = new Date().getTime();\n     *     driver.executeAsyncScript(\n     *         'window.setTimeout(arguments[arguments.length - 1], 500);').\n     *         then(function() {\n     *           console.log(\n     *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');\n     *         });\n     *\n     * __Example #2:__ Synchronizing a test with an AJAX application:\n     *\n     *     var button = driver.findElement(By.id('compose-button'));\n     *     button.click();\n     *     driver.executeAsyncScript(\n     *         'var callback = arguments[arguments.length - 1];' +\n     *         'mailClient.getComposeWindowWidget().onload(callback);');\n     *     driver.switchTo().frame('composeWidget');\n     *     driver.findElement(By.id('to')).sendKeys('dog@example.com');\n     *\n     * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In\n     * this example, the inject script is specified with a function literal. When\n     * using this format, the function is converted to a string for injection, so it\n     * should not reference any symbols not defined in the scope of the page under\n     * test.\n     *\n     *     driver.executeAsyncScript(function() {\n     *       var callback = arguments[arguments.length - 1];\n     *       var xhr = new XMLHttpRequest();\n     *       xhr.open(\"GET\", \"/resource/data.json\", true);\n     *       xhr.onreadystatechange = function() {\n     *         if (xhr.readyState == 4) {\n     *           callback(xhr.responseText);\n     *         }\n     *       };\n     *       xhr.send('');\n     *     }).then(function(str) {\n     *       console.log(JSON.parse(str)['food']);\n     *     });\n     *\n     * @param {!(string|Function)} script The script to execute.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @return {!promise.Thenable<T>} A promise that will resolve to the\n     *    scripts return value.\n     * @template T\n     */\n\n  }, {\n    key: \"executeAsyncScript\",\n    value: function executeAsyncScript(script, var_args) {}\n    /**\n     * Schedules a command to execute a custom function.\n     * @param {function(...): (T|IThenable<T>)} fn The function to execute.\n     * @param {Object=} opt_scope The object in whose scope to execute the function.\n     * @param {...*} var_args Any arguments to pass to the function.\n     * @return {!promise.Thenable<T>} A promise that will be resolved'\n     *     with the function's result.\n     * @template T\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(fn, opt_scope, var_args) {}\n    /**\n     * Schedules a command to wait for a condition to hold. The condition may be\n     * specified by a {@link Condition}, as a custom function, or as any\n     * promise-like thenable.\n     *\n     * For a {@link Condition} or function, the wait will repeatedly\n     * evaluate the condition until it returns a truthy value. If any errors occur\n     * while evaluating the condition, they will be allowed to propagate. In the\n     * event a condition returns a {@link promise.Promise promise}, the polling\n     * loop will wait for it to be resolved and use the resolved value for whether\n     * the condition has been satisfied. Note the resolution time for a promise\n     * is factored into whether a wait has timed out.\n     *\n     * Note, if the provided condition is a {@link WebElementCondition}, then\n     * the wait will return a {@link WebElementPromise} that will resolve to the\n     * element that satisfied the condition.\n     *\n     * _Example:_ waiting up to 10 seconds for an element to be present on the\n     * page.\n     *\n     *     var button = driver.wait(until.elementLocated(By.id('foo')), 10000);\n     *     button.click();\n     *\n     * This function may also be used to block the command flow on the resolution\n     * of any thenable promise object. When given a promise, the command will\n     * simply wait for its resolution before completing. A timeout may be provided\n     * to fail the command if the promise does not resolve before the timeout\n     * expires.\n     *\n     * _Example:_ Suppose you have a function, `startTestServer`, that returns a\n     * promise for when a server is ready for requests. You can block a WebDriver\n     * client on this promise with:\n     *\n     *     var started = startTestServer();\n     *     driver.wait(started, 5 * 1000, 'Server should start within 5 seconds');\n     *     driver.get(getServerUrl());\n     *\n     * @param {!(IThenable<T>|\n     *           Condition<T>|\n     *           function(!WebDriver): T)} condition The condition to\n     *     wait on, defined as a promise, condition object, or  a function to\n     *     evaluate as a condition.\n     * @param {number=} opt_timeout How long to wait for the condition to be true.\n     * @param {string=} opt_message An optional message to use if the wait times\n     *     out.\n     * @return {!(promise.Thenable<T>|WebElementPromise)} A promise that will be\n     *     resolved with the first truthy value returned by the condition\n     *     function, or rejected if the condition times out. If the input\n     *     input condition is an instance of a {@link WebElementCondition},\n     *     the returned value will be a {@link WebElementPromise}.\n     * @throws {TypeError} if the provided `condition` is not a valid type.\n     * @template T\n     */\n\n  }, {\n    key: \"wait\",\n    value: function wait(condition, opt_timeout, opt_message) {}\n    /**\n     * Schedules a command to make the driver sleep for the given amount of time.\n     * @param {number} ms The amount of time, in milliseconds, to sleep.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the sleep has finished.\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {}\n    /**\n     * Schedules a command to retrieve the current window handle.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the current window handle.\n     */\n\n  }, {\n    key: \"getWindowHandle\",\n    value: function getWindowHandle() {}\n    /**\n     * Schedules a command to retrieve the current list of available window handles.\n     * @return {!promise.Thenable<!Array<string>>} A promise that will\n     *     be resolved with an array of window handles.\n     */\n\n  }, {\n    key: \"getAllWindowHandles\",\n    value: function getAllWindowHandles() {}\n    /**\n     * Schedules a command to retrieve the current page's source. The page source\n     * returned is a representation of the underlying DOM: do not expect it to be\n     * formatted or escaped in the same way as the response sent from the web\n     * server.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the current page source.\n     */\n\n  }, {\n    key: \"getPageSource\",\n    value: function getPageSource() {}\n    /**\n     * Schedules a command to close the current window.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when this command has completed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {}\n    /**\n     * Schedules a command to navigate to the given URL.\n     * @param {string} url The fully qualified URL to open.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the document has finished loading.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {}\n    /**\n     * Schedules a command to retrieve the URL of the current page.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the current URL.\n     */\n\n  }, {\n    key: \"getCurrentUrl\",\n    value: function getCurrentUrl() {}\n    /**\n     * Schedules a command to retrieve the current page's title.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the current page's title.\n     */\n\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {}\n    /**\n     * Schedule a command to find an element on the page. If the element cannot be\n     * found, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned\n     * by the driver. Unlike other commands, this error cannot be suppressed. In\n     * other words, scheduling a command to find an element doubles as an assert\n     * that the element is present on the page. To test whether an element is\n     * present on the page, use {@link #findElements}:\n     *\n     *     driver.findElements(By.id('foo'))\n     *         .then(found => console.log('Element found? %s', !!found.length));\n     *\n     * The search criteria for an element may be defined using one of the\n     * factories in the {@link webdriver.By} namespace, or as a short-hand\n     * {@link webdriver.By.Hash} object. For example, the following two statements\n     * are equivalent:\n     *\n     *     var e1 = driver.findElement(By.id('foo'));\n     *     var e2 = driver.findElement({id:'foo'});\n     *\n     * You may also provide a custom locator function, which takes as input this\n     * instance and returns a {@link WebElement}, or a promise that will resolve\n     * to a WebElement. If the returned promise resolves to an array of\n     * WebElements, WebDriver will use the first element. For example, to find the\n     * first visible link on a page, you could write:\n     *\n     *     var link = driver.findElement(firstVisibleLink);\n     *\n     *     function firstVisibleLink(driver) {\n     *       var links = driver.findElements(By.tagName('a'));\n     *       return promise.filter(links, function(link) {\n     *         return link.isDisplayed();\n     *       });\n     *     }\n     *\n     * @param {!(by.By|Function)} locator The locator to use.\n     * @return {!WebElementPromise} A WebElement that can be used to issue\n     *     commands against the located element. If the element is not found, the\n     *     element will be invalidated and all scheduled commands aborted.\n     */\n\n  }, {\n    key: \"findElement\",\n    value: function findElement(locator) {}\n    /**\n     * Schedule a command to search for multiple elements on the page.\n     *\n     * @param {!(by.By|Function)} locator The locator to use.\n     * @return {!promise.Thenable<!Array<!WebElement>>} A\n     *     promise that will resolve to an array of WebElements.\n     */\n\n  }, {\n    key: \"findElements\",\n    value: function findElements(locator) {}\n    /**\n     * Schedule a command to take a screenshot. The driver makes a best effort to\n     * return a screenshot of the following, in order of preference:\n     *\n     * 1. Entire page\n     * 2. Current window\n     * 3. Visible portion of the current frame\n     * 4. The entire display containing the browser\n     *\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved to the screenshot as a base-64 encoded PNG.\n     */\n\n  }, {\n    key: \"takeScreenshot\",\n    value: function takeScreenshot() {}\n    /**\n     * @return {!Options} The options interface for this instance.\n     */\n\n  }, {\n    key: \"manage\",\n    value: function manage() {}\n    /**\n     * @return {!Navigation} The navigation interface for this instance.\n     */\n\n  }, {\n    key: \"navigate\",\n    value: function navigate() {}\n    /**\n     * @return {!TargetLocator} The target locator interface for this\n     *     instance.\n     */\n\n  }, {\n    key: \"switchTo\",\n    value: function switchTo() {}\n  }]);\n\n  return IWebDriver;\n}();\n/**\n * Each WebDriver instance provides automated control over a browser session.\n *\n * @implements {IWebDriver}\n */\n\n\nvar WebDriver = /*#__PURE__*/function () {\n  /**\n   * @param {!(Session|IThenable<!Session>)} session Either a known session or a\n   *     promise that will be resolved to a session.\n   * @param {!command.Executor} executor The executor to use when sending\n   *     commands to the browser.\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @param {(function(this: void): ?)=} opt_onQuit A function to call, if any,\n   *     when the session is terminated.\n   */\n  function WebDriver(session, executor, opt_flow, opt_onQuit) {\n    _classCallCheck(this, WebDriver);\n\n    /** @private {!promise.ControlFlow} */\n    this.flow_ = opt_flow || promise.controlFlow();\n    /** @private {!promise.Thenable<!Session>} */\n\n    this.session_ = this.flow_.promise(function (resolve) {\n      return resolve(session);\n    });\n    /** @private {!command.Executor} */\n\n    this.executor_ = executor;\n    /** @private {input.FileDetector} */\n\n    this.fileDetector_ = null;\n    /** @private @const {(function(this: void): ?|undefined)} */\n\n    this.onQuit_ = opt_onQuit;\n  }\n  /**\n   * Creates a new WebDriver client for an existing session.\n   * @param {!command.Executor} executor Command executor to use when querying\n   *     for session details.\n   * @param {string} sessionId ID of the session to attach to.\n   * @param {promise.ControlFlow=} opt_flow The control flow all\n   *     driver commands should execute under. Defaults to the\n   *     {@link promise.controlFlow() currently active}  control flow.\n   * @return {!WebDriver} A new client for the specified session.\n   */\n\n\n  _createClass(WebDriver, [{\n    key: \"controlFlow\",\n\n    /** @override */\n    value: function controlFlow() {\n      return this.flow_;\n    }\n    /** @override */\n\n  }, {\n    key: \"schedule\",\n    value: function schedule(command, description) {\n      var _this = this;\n\n      command.setParameter('sessionId', this.session_); // If any of the command parameters are rejected promises, those\n      // rejections may be reported as unhandled before the control flow\n      // attempts to execute the command. To ensure parameters errors\n      // propagate through the command itself, we resolve all of the\n      // command parameters now, but suppress any errors until the ControlFlow\n      // actually executes the command. This addresses scenarios like catching\n      // an element not found error in:\n      //\n      //     driver.findElement(By.id('foo')).click().catch(function(e) {\n      //       if (e instanceof NoSuchElementError) {\n      //         // Do something.\n      //       }\n      //     });\n\n      var prepCommand = toWireValue(command.getParameters());\n      prepCommand.catch(function () {});\n      var flow = this.flow_;\n      var executor = this.executor_;\n      return flow.execute(function () {\n        // Retrieve resolved command parameters; any previously suppressed errors\n        // will now propagate up through the control flow as part of the command\n        // execution.\n        return prepCommand.then(function (parameters) {\n          command.setParameters(parameters);\n          return executor.execute(command);\n        }).then(function (value) {\n          return fromWireValue(_this, value);\n        });\n      }, description);\n    }\n    /** @override */\n\n  }, {\n    key: \"setFileDetector\",\n    value: function setFileDetector(detector) {\n      this.fileDetector_ = detector;\n    }\n    /** @override */\n\n  }, {\n    key: \"getExecutor\",\n    value: function getExecutor() {\n      return this.executor_;\n    }\n    /** @override */\n\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return this.session_;\n    }\n    /** @override */\n\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      return this.session_.then(function (s) {\n        return s.getCapabilities();\n      });\n    }\n    /** @override */\n\n  }, {\n    key: \"quit\",\n    value: function quit() {\n      var _this2 = this;\n\n      var result = this.schedule(new command.Command(command.Name.QUIT), 'WebDriver.quit()'); // Delete our session ID when the quit command finishes; this will allow us\n      // to throw an error when attempting to use a driver post-quit.\n\n      return (\n        /** @type {!promise.Thenable} */\n        promise.finally(result, function () {\n          _this2.session_ = _this2.flow_.promise(function (_, reject) {\n            reject(new error.NoSuchSessionError('This driver instance does not have a valid session ID ' + '(did you call WebDriver.quit()?) and may no longer be used.'));\n          }); // Only want the session rejection to bubble if accessed.\n\n          _this2.session_.catch(function () {});\n\n          if (_this2.onQuit_) {\n            return _this2.onQuit_.call(void 0);\n          }\n        })\n      );\n    }\n    /** @override */\n\n  }, {\n    key: \"actions\",\n    value: function actions() {\n      return new _actions.ActionSequence(this);\n    }\n    /** @override */\n\n  }, {\n    key: \"touchActions\",\n    value: function touchActions() {\n      return new _actions.TouchSequence(this);\n    }\n    /** @override */\n\n  }, {\n    key: \"executeScript\",\n    value: function executeScript(script, var_args) {\n      if (typeof script === 'function') {\n        script = 'return (' + script + ').apply(null, arguments);';\n      }\n\n      var args = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];\n      return this.schedule(new command.Command(command.Name.EXECUTE_SCRIPT).setParameter('script', script).setParameter('args', args), 'WebDriver.executeScript()');\n    }\n    /** @override */\n\n  }, {\n    key: \"executeAsyncScript\",\n    value: function executeAsyncScript(script, var_args) {\n      if (typeof script === 'function') {\n        script = 'return (' + script + ').apply(null, arguments);';\n      }\n\n      var args = Array.prototype.slice.call(arguments, 1);\n      return this.schedule(new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).setParameter('script', script).setParameter('args', args), 'WebDriver.executeScript()');\n    }\n    /** @override */\n\n  }, {\n    key: \"call\",\n    value: function call(fn, opt_scope, var_args) {\n      var args = Array.prototype.slice.call(arguments, 2);\n      return this.flow_.execute(function () {\n        return promise.fullyResolved(args).then(function (args) {\n          if (promise.isGenerator(fn)) {\n            args.unshift(fn, opt_scope);\n            return promise.consume.apply(null, args);\n          }\n\n          return fn.apply(opt_scope, args);\n        });\n      }, 'WebDriver.call(' + (fn.name || 'function') + ')');\n    }\n    /** @override */\n\n  }, {\n    key: \"wait\",\n    value: function wait(condition, opt_timeout, opt_message) {\n      if (promise.isPromise(condition)) {\n        return this.flow_.wait(\n        /** @type {!IThenable} */\n        condition, opt_timeout, opt_message);\n      }\n\n      var message = opt_message;\n      var fn =\n      /** @type {!Function} */\n      condition;\n\n      if (condition instanceof Condition) {\n        message = message || condition.description();\n        fn = condition.fn;\n      }\n\n      if (typeof fn !== 'function') {\n        throw TypeError('Wait condition must be a promise-like object, function, or a ' + 'Condition object');\n      }\n\n      var driver = this;\n      var result = this.flow_.wait(function () {\n        if (promise.isGenerator(fn)) {\n          return promise.consume(fn, null, [driver]);\n        }\n\n        return fn(driver);\n      }, opt_timeout, message);\n\n      if (condition instanceof WebElementCondition) {\n        result = new WebElementPromise(this, result.then(function (value) {\n          if (!(value instanceof WebElement)) {\n            throw TypeError('WebElementCondition did not resolve to a WebElement: ' + Object.prototype.toString.call(value));\n          }\n\n          return value;\n        }));\n      }\n\n      return result;\n    }\n    /** @override */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return this.flow_.timeout(ms, 'WebDriver.sleep(' + ms + ')');\n    }\n    /** @override */\n\n  }, {\n    key: \"getWindowHandle\",\n    value: function getWindowHandle() {\n      return this.schedule(new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE), 'WebDriver.getWindowHandle()');\n    }\n    /** @override */\n\n  }, {\n    key: \"getAllWindowHandles\",\n    value: function getAllWindowHandles() {\n      return this.schedule(new command.Command(command.Name.GET_WINDOW_HANDLES), 'WebDriver.getAllWindowHandles()');\n    }\n    /** @override */\n\n  }, {\n    key: \"getPageSource\",\n    value: function getPageSource() {\n      return this.schedule(new command.Command(command.Name.GET_PAGE_SOURCE), 'WebDriver.getPageSource()');\n    }\n    /** @override */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.schedule(new command.Command(command.Name.CLOSE), 'WebDriver.close()');\n    }\n    /** @override */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      return this.navigate().to(url);\n    }\n    /** @override */\n\n  }, {\n    key: \"getCurrentUrl\",\n    value: function getCurrentUrl() {\n      return this.schedule(new command.Command(command.Name.GET_CURRENT_URL), 'WebDriver.getCurrentUrl()');\n    }\n    /** @override */\n\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return this.schedule(new command.Command(command.Name.GET_TITLE), 'WebDriver.getTitle()');\n    }\n    /** @override */\n\n  }, {\n    key: \"findElement\",\n    value: function findElement(locator) {\n      var id;\n      locator = by.checkedLocator(locator);\n\n      if (typeof locator === 'function') {\n        id = this.findElementInternal_(locator, this);\n      } else {\n        var cmd = new command.Command(command.Name.FIND_ELEMENT).setParameter('using', locator.using).setParameter('value', locator.value);\n        id = this.schedule(cmd, 'WebDriver.findElement(' + locator + ')');\n      }\n\n      return new WebElementPromise(this, id);\n    }\n    /**\n     * @param {!Function} locatorFn The locator function to use.\n     * @param {!(WebDriver|WebElement)} context The search\n     *     context.\n     * @return {!promise.Thenable<!WebElement>} A\n     *     promise that will resolve to a list of WebElements.\n     * @private\n     */\n\n  }, {\n    key: \"findElementInternal_\",\n    value: function findElementInternal_(locatorFn, context) {\n      return this.call(function () {\n        return locatorFn(context);\n      }).then(function (result) {\n        if (Array.isArray(result)) {\n          result = result[0];\n        }\n\n        if (!(result instanceof WebElement)) {\n          throw new TypeError('Custom locator did not return a WebElement');\n        }\n\n        return result;\n      });\n    }\n    /** @override */\n\n  }, {\n    key: \"findElements\",\n    value: function findElements(locator) {\n      locator = by.checkedLocator(locator);\n\n      if (typeof locator === 'function') {\n        return this.findElementsInternal_(locator, this);\n      } else {\n        var cmd = new command.Command(command.Name.FIND_ELEMENTS).setParameter('using', locator.using).setParameter('value', locator.value);\n        return this.schedule(cmd, 'WebDriver.findElements(' + locator + ')').then(function (res) {\n          return Array.isArray(res) ? res : [];\n        }, function (e) {\n          if (e instanceof error.NoSuchElementError) {\n            return [];\n          }\n\n          throw e;\n        });\n      }\n    }\n    /**\n     * @param {!Function} locatorFn The locator function to use.\n     * @param {!(WebDriver|WebElement)} context The search context.\n     * @return {!promise.Thenable<!Array<!WebElement>>} A promise that\n     *     will resolve to an array of WebElements.\n     * @private\n     */\n\n  }, {\n    key: \"findElementsInternal_\",\n    value: function findElementsInternal_(locatorFn, context) {\n      return this.call(function () {\n        return locatorFn(context);\n      }).then(function (result) {\n        if (result instanceof WebElement) {\n          return [result];\n        }\n\n        if (!Array.isArray(result)) {\n          return [];\n        }\n\n        return result.filter(function (item) {\n          return item instanceof WebElement;\n        });\n      });\n    }\n    /** @override */\n\n  }, {\n    key: \"takeScreenshot\",\n    value: function takeScreenshot() {\n      return this.schedule(new command.Command(command.Name.SCREENSHOT), 'WebDriver.takeScreenshot()');\n    }\n    /** @override */\n\n  }, {\n    key: \"manage\",\n    value: function manage() {\n      return new Options(this);\n    }\n    /** @override */\n\n  }, {\n    key: \"navigate\",\n    value: function navigate() {\n      return new Navigation(this);\n    }\n    /** @override */\n\n  }, {\n    key: \"switchTo\",\n    value: function switchTo() {\n      return new TargetLocator(this);\n    }\n  }], [{\n    key: \"attachToSession\",\n    value: function attachToSession(executor, sessionId, opt_flow) {\n      var flow = opt_flow || promise.controlFlow();\n      var cmd = new command.Command(command.Name.DESCRIBE_SESSION).setParameter('sessionId', sessionId);\n      var session = flow.execute(function () {\n        return executeCommand(executor, cmd).catch(function (err) {\n          // The DESCRIBE_SESSION command is not supported by the W3C spec, so\n          // if we get back an unknown command, just return a session with\n          // unknown capabilities.\n          if (err instanceof error.UnknownCommandError) {\n            return new Session(sessionId, new Capabilities());\n          }\n\n          throw err;\n        });\n      }, 'WebDriver.attachToSession()');\n      return new WebDriver(session, executor, flow);\n    }\n    /**\n     * Creates a new WebDriver session.\n     *\n     * By default, the requested session `capabilities` are merely \"desired\" and\n     * the remote end will still create a new session even if it cannot satisfy\n     * all of the requested capabilities. You can query which capabilities a\n     * session actually has using the\n     * {@linkplain #getCapabilities() getCapabilities()} method on the returned\n     * WebDriver instance.\n     *\n     * To define _required capabilities_, provide the `capabilities` as an object\n     * literal with `required` and `desired` keys. The `desired` key may be\n     * omitted if all capabilities are required, and vice versa. If the server\n     * cannot create a session with all of the required capabilities, it will\n     * return an {@linkplain error.SessionNotCreatedError}.\n     *\n     *     let required = new Capabilities().set('browserName', 'firefox');\n     *     let desired = new Capabilities().set('version', '45');\n     *     let driver = WebDriver.createSession(executor, {required, desired});\n     *\n     * This function will always return a WebDriver instance. If there is an error\n     * creating the session, such as the aforementioned SessionNotCreatedError,\n     * the driver will have a rejected {@linkplain #getSession session} promise.\n     * It is recommended that this promise is left _unhandled_ so it will\n     * propagate through the {@linkplain promise.ControlFlow control flow} and\n     * cause subsequent commands to fail.\n     *\n     *     let required = Capabilities.firefox();\n     *     let driver = WebDriver.createSession(executor, {required});\n     *\n     *     // If the createSession operation failed, then this command will also\n     *     // also fail, propagating the creation failure.\n     *     driver.get('http://www.google.com').catch(e => console.log(e));\n     *\n     * @param {!command.Executor} executor The executor to create the new session\n     *     with.\n     * @param {(!Capabilities|\n     *          {desired: (Capabilities|undefined),\n     *           required: (Capabilities|undefined)})} capabilities The desired\n     *     capabilities for the new session.\n     * @param {promise.ControlFlow=} opt_flow The control flow all driver\n     *     commands should execute under, including the initial session creation.\n     *     Defaults to the {@link promise.controlFlow() currently active}\n     *     control flow.\n     * @param {(function(this: void): ?)=} opt_onQuit A callback to invoke when\n     *    the newly created session is terminated. This should be used to clean\n     *    up any resources associated with the session.\n     * @return {!WebDriver} The driver for the newly created session.\n     */\n\n  }, {\n    key: \"createSession\",\n    value: function createSession(executor, capabilities, opt_flow, opt_onQuit) {\n      var flow = opt_flow || promise.controlFlow();\n      var cmd = new command.Command(command.Name.NEW_SESSION);\n\n      if (capabilities && (capabilities.desired || capabilities.required)) {\n        cmd.setParameter('desiredCapabilities', capabilities.desired);\n        cmd.setParameter('requiredCapabilities', capabilities.required);\n      } else {\n        cmd.setParameter('desiredCapabilities', capabilities);\n      }\n\n      var session = flow.execute(function () {\n        return executeCommand(executor, cmd);\n      }, 'WebDriver.createSession()');\n\n      if (typeof opt_onQuit === 'function') {\n        session = session.catch(function (err) {\n          return Promise.resolve(opt_onQuit.call(void 0)).then(function (_) {\n            throw err;\n          });\n        });\n      }\n\n      return new this(session, executor, flow, opt_onQuit);\n    }\n  }]);\n\n  return WebDriver;\n}();\n/**\n * Interface for navigating back and forth in the browser history.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.navigate()\n *\n * @see WebDriver#navigate()\n */\n\n\nvar Navigation = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function Navigation(driver) {\n    _classCallCheck(this, Navigation);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Schedules a command to navigate to a new URL.\n   * @param {string} url The URL to navigate to.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the URL has been loaded.\n   */\n\n\n  _createClass(Navigation, [{\n    key: \"to\",\n    value: function to(url) {\n      return this.driver_.schedule(new command.Command(command.Name.GET).setParameter('url', url), 'WebDriver.navigate().to(' + url + ')');\n    }\n    /**\n     * Schedules a command to move backwards in the browser history.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the navigation event has completed.\n     */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      return this.driver_.schedule(new command.Command(command.Name.GO_BACK), 'WebDriver.navigate().back()');\n    }\n    /**\n     * Schedules a command to move forwards in the browser history.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the navigation event has completed.\n     */\n\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      return this.driver_.schedule(new command.Command(command.Name.GO_FORWARD), 'WebDriver.navigate().forward()');\n    }\n    /**\n     * Schedules a command to refresh the current page.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the navigation event has completed.\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      return this.driver_.schedule(new command.Command(command.Name.REFRESH), 'WebDriver.navigate().refresh()');\n    }\n  }]);\n\n  return Navigation;\n}();\n/**\n * Provides methods for managing browser and driver state.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with {@linkplain WebDriver#manage() webdriver.manage()}.\n */\n\n\nvar Options = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function Options(driver) {\n    _classCallCheck(this, Options);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Schedules a command to add a cookie.\n   *\n   * __Sample Usage:__\n   *\n   *     // Set a basic cookie.\n   *     driver.manage().addCookie({name: 'foo', value: 'bar'});\n   *\n   *     // Set a cookie that expires in 10 minutes.\n   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));\n   *     driver.manage().addCookie({name: 'foo', value: 'bar', expiry});\n   *\n   *     // The cookie expiration may also be specified in seconds since epoch.\n   *     driver.manage().addCookie({\n   *       name: 'foo',\n   *       value: 'bar',\n   *       expiry: Math.floor(Date.now() / 1000)\n   *     });\n   *\n   * @param {!Options.Cookie} spec Defines the cookie to add.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the cookie has been added to the page.\n   * @throws {error.InvalidArgumentError} if any of the cookie parameters are\n   *     invalid.\n   * @throws {TypeError} if `spec` is not a cookie object.\n   */\n\n\n  _createClass(Options, [{\n    key: \"addCookie\",\n    value: function addCookie(_ref) {\n      var name = _ref.name,\n          value = _ref.value,\n          path = _ref.path,\n          domain = _ref.domain,\n          secure = _ref.secure,\n          httpOnly = _ref.httpOnly,\n          expiry = _ref.expiry;\n\n      // We do not allow '=' or ';' in the name.\n      if (/[;=]/.test(name)) {\n        throw new error.InvalidArgumentError('Invalid cookie name \"' + name + '\"');\n      } // We do not allow ';' in value.\n\n\n      if (/;/.test(value)) {\n        throw new error.InvalidArgumentError('Invalid cookie value \"' + value + '\"');\n      }\n\n      var cookieString = name + '=' + value + (domain ? ';domain=' + domain : '') + (path ? ';path=' + path : '') + (secure ? ';secure' : '');\n\n      if (typeof expiry === 'number') {\n        expiry = Math.floor(expiry);\n        cookieString += ';expires=' + new Date(expiry * 1000).toUTCString();\n      } else if (expiry instanceof Date) {\n        var date =\n        /** @type {!Date} */\n        expiry;\n        expiry = Math.floor(date.getTime() / 1000);\n        cookieString += ';expires=' + date.toUTCString();\n      }\n\n      return this.driver_.schedule(new command.Command(command.Name.ADD_COOKIE).setParameter('cookie', {\n        'name': name,\n        'value': value,\n        'path': path,\n        'domain': domain,\n        'secure': !!secure,\n        'httpOnly': !!httpOnly,\n        'expiry': expiry\n      }), 'WebDriver.manage().addCookie(' + cookieString + ')');\n    }\n    /**\n     * Schedules a command to delete all cookies visible to the current page.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when all cookies have been deleted.\n     */\n\n  }, {\n    key: \"deleteAllCookies\",\n    value: function deleteAllCookies() {\n      return this.driver_.schedule(new command.Command(command.Name.DELETE_ALL_COOKIES), 'WebDriver.manage().deleteAllCookies()');\n    }\n    /**\n     * Schedules a command to delete the cookie with the given name. This command\n     * is a no-op if there is no cookie with the given name visible to the current\n     * page.\n     * @param {string} name The name of the cookie to delete.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the cookie has been deleted.\n     */\n\n  }, {\n    key: \"deleteCookie\",\n    value: function deleteCookie(name) {\n      return this.driver_.schedule(new command.Command(command.Name.DELETE_COOKIE).setParameter('name', name), 'WebDriver.manage().deleteCookie(' + name + ')');\n    }\n    /**\n     * Schedules a command to retrieve all cookies visible to the current page.\n     * Each cookie will be returned as a JSON object as described by the WebDriver\n     * wire protocol.\n     * @return {!promise.Thenable<!Array<!Options.Cookie>>} A promise that will be\n     *     resolved with the cookies visible to the current browsing context.\n     */\n\n  }, {\n    key: \"getCookies\",\n    value: function getCookies() {\n      return this.driver_.schedule(new command.Command(command.Name.GET_ALL_COOKIES), 'WebDriver.manage().getCookies()');\n    }\n    /**\n     * Schedules a command to retrieve the cookie with the given name. Returns null\n     * if there is no such cookie. The cookie will be returned as a JSON object as\n     * described by the WebDriver wire protocol.\n     *\n     * @param {string} name The name of the cookie to retrieve.\n     * @return {!promise.Thenable<?Options.Cookie>} A promise that will be resolved\n     *     with the named cookie, or `null` if there is no such cookie.\n     */\n\n  }, {\n    key: \"getCookie\",\n    value: function getCookie(name) {\n      return this.getCookies().then(function (cookies) {\n        var _iterator = _createForOfIteratorHelper(cookies),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var cookie = _step.value;\n\n            if (cookie && cookie['name'] === name) {\n              return cookie;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return null;\n      });\n    }\n    /**\n     * Schedules a command to fetch the timeouts currently configured for the\n     * current session.\n     *\n     * @return {!promise.Thenable<{script: number,\n     *                             pageLoad: number,\n     *                             implicit: number}>} A promise that will be\n     *     resolved with the timeouts currently configured for the current\n     *     session.\n     * @see #setTimeouts()\n     */\n\n  }, {\n    key: \"getTimeouts\",\n    value: function getTimeouts() {\n      return this.driver_.schedule(new command.Command(command.Name.GET_TIMEOUT), \"WebDriver.manage().getTimeouts()\");\n    }\n    /**\n     * Schedules a command to set timeout durations associated with the current\n     * session.\n     *\n     * The following timeouts are supported (all timeouts are specified in\n     * milliseconds):\n     *\n     * -  `implicit` specifies the maximum amount of time to wait for an element\n     *    locator to succeed when {@linkplain WebDriver#findElement locating}\n     *    {@linkplain WebDriver#findElements elements} on the page.\n     *    Defaults to 0 milliseconds.\n     *\n     * -  `pageLoad` specifies the maximum amount of time to wait for a page to\n     *    finishing loading. Defaults to 300000 milliseconds.\n     *\n     * -  `script` specifies the maximum amount of time to wait for an\n     *    {@linkplain WebDriver#executeScript evaluated script} to run. If set to\n     *    `null`, the script timeout will be indefinite.\n     *    Defaults to 30000 milliseconds.\n     *\n     * @param {{script: (number|null|undefined),\n     *          pageLoad: (number|null|undefined),\n     *          implicit: (number|null|undefined)}} conf\n     *     The desired timeout configuration.\n     * @return {!promise.Thenable<void>} A promise that will be resolved when the\n     *     timeouts have been set.\n     * @throws {!TypeError} if an invalid options object is provided.\n     * @see #getTimeouts()\n     * @see <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeouts>\n     */\n\n  }, {\n    key: \"setTimeouts\",\n    value: function setTimeouts() {\n      var _this3 = this;\n\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          script = _ref2.script,\n          pageLoad = _ref2.pageLoad,\n          implicit = _ref2.implicit;\n\n      var cmd = new command.Command(command.Name.SET_TIMEOUT);\n      var valid = false;\n\n      function setParam(key, value) {\n        if (value === null || typeof value === 'number') {\n          valid = true;\n          cmd.setParameter(key, value);\n        } else if (typeof value !== 'undefined') {\n          throw TypeError('invalid timeouts configuration:' + \" expected \\\"\".concat(key, \"\\\" to be a number, got \").concat(typeof value));\n        }\n      }\n\n      setParam('implicit', implicit);\n      setParam('pageLoad', pageLoad);\n      setParam('script', script);\n\n      if (valid) {\n        return this.driver_.schedule(cmd, \"WebDriver.manage().setTimeouts()\").catch(function () {\n          // Fallback to the legacy method.\n          var cmds = [];\n\n          if (typeof script === 'number') {\n            cmds.push(legacyTimeout(_this3.driver_, 'script', script));\n          }\n\n          if (typeof implicit === 'number') {\n            cmds.push(legacyTimeout(_this3.driver_, 'implicit', implicit));\n          }\n\n          if (typeof pageLoad === 'number') {\n            cmds.push(legacyTimeout(_this3.driver_, 'page load', pageLoad));\n          }\n\n          return Promise.all(cmds);\n        });\n      }\n\n      throw TypeError('no timeouts specified');\n    }\n    /**\n     * @return {!Logs} The interface for managing driver\n     *     logs.\n     */\n\n  }, {\n    key: \"logs\",\n    value: function logs() {\n      return new Logs(this.driver_);\n    }\n    /**\n     * @return {!Timeouts} The interface for managing driver timeouts.\n     * @deprecated Use {@link #setTimeouts()} instead.\n     */\n\n  }, {\n    key: \"timeouts\",\n    value: function timeouts() {\n      return new Timeouts(this.driver_);\n    }\n    /**\n     * @return {!Window} The interface for managing the current window.\n     */\n\n  }, {\n    key: \"window\",\n    value: function window() {\n      return new Window(this.driver_);\n    }\n  }]);\n\n  return Options;\n}();\n/**\n * @param {!WebDriver} driver\n * @param {string} type\n * @param {number} ms\n * @return {!promise.Thenable<void>}\n */\n\n\nfunction legacyTimeout(driver, type, ms) {\n  return driver.schedule(new command.Command(command.Name.SET_TIMEOUT).setParameter('type', type).setParameter('ms', ms), \"WebDriver.manage().setTimeouts({\".concat(type, \": \").concat(ms, \"})\"));\n}\n/**\n * A record object describing a browser cookie.\n *\n * @record\n */\n\n\nOptions.Cookie = function () {};\n/**\n * The name of the cookie.\n *\n * @type {string}\n */\n\n\nOptions.Cookie.prototype.name;\n/**\n * The cookie value.\n *\n * @type {string}\n */\n\nOptions.Cookie.prototype.value;\n/**\n * The cookie path. Defaults to \"/\" when adding a cookie.\n *\n * @type {(string|undefined)}\n */\n\nOptions.Cookie.prototype.path;\n/**\n * The domain the cookie is visible to. Defaults to the current browsing\n * context's document's URL when adding a cookie.\n *\n * @type {(string|undefined)}\n */\n\nOptions.Cookie.prototype.domain;\n/**\n * Whether the cookie is a secure cookie. Defaults to false when adding a new\n * cookie.\n *\n * @type {(boolean|undefined)}\n */\n\nOptions.Cookie.prototype.secure;\n/**\n * Whether the cookie is an HTTP only cookie. Defaults to false when adding a\n * new cookie.\n *\n * @type {(boolean|undefined)}\n */\n\nOptions.Cookie.prototype.httpOnly;\n/**\n * When the cookie expires.\n *\n * When {@linkplain Options#addCookie() adding a cookie}, this may be specified\n * as a {@link Date} object, or in _seconds_ since Unix epoch (January 1, 1970).\n *\n * The expiry is always returned in seconds since epoch when\n * {@linkplain Options#getCookies() retrieving cookies} from the browser.\n *\n * @type {(!Date|number|undefined)}\n */\n\nOptions.Cookie.prototype.expiry;\n/**\n * An interface for managing timeout behavior for WebDriver instances.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().timeouts()\n *\n * @deprecated This has been deprecated in favor of\n *     {@link Options#setTimeouts()}, which supports setting multiple timeouts\n *     at once.\n * @see WebDriver#manage()\n * @see Options#timeouts()\n */\n\nvar Timeouts = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function Timeouts(driver) {\n    _classCallCheck(this, Timeouts);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Specifies the amount of time the driver should wait when searching for an\n   * element if it is not immediately present.\n   *\n   * When searching for a single element, the driver should poll the page\n   * until the element has been found, or this timeout expires before failing\n   * with a {@link bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching\n   * for multiple elements, the driver should poll the page until at least one\n   * element has been found or this timeout has expired.\n   *\n   * Setting the wait timeout to 0 (its default value), disables implicit\n   * waiting.\n   *\n   * Increasing the implicit wait timeout should be used judiciously as it\n   * will have an adverse effect on test run time, especially when used with\n   * slower location strategies like XPath.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the implicit wait timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({implicit: ms})}.\n   */\n\n\n  _createClass(Timeouts, [{\n    key: \"implicitlyWait\",\n    value: function implicitlyWait(ms) {\n      return this.driver_.manage().setTimeouts({\n        implicit: ms\n      });\n    }\n    /**\n     * Sets the amount of time to wait, in milliseconds, for an asynchronous\n     * script to finish execution before returning an error. If the timeout is\n     * less than or equal to 0, the script will be allowed to run indefinitely.\n     *\n     * @param {number} ms The amount of time to wait, in milliseconds.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the script timeout has been set.\n     * @deprecated Use {@link Options#setTimeouts()\n     *     driver.manage().setTimeouts({script: ms})}.\n     */\n\n  }, {\n    key: \"setScriptTimeout\",\n    value: function setScriptTimeout(ms) {\n      return this.driver_.manage().setTimeouts({\n        script: ms\n      });\n    }\n    /**\n     * Sets the amount of time to wait for a page load to complete before\n     * returning an error.  If the timeout is negative, page loads may be\n     * indefinite.\n     *\n     * @param {number} ms The amount of time to wait, in milliseconds.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the timeout has been set.\n     * @deprecated Use {@link Options#setTimeouts()\n     *     driver.manage().setTimeouts({pageLoad: ms})}.\n     */\n\n  }, {\n    key: \"pageLoadTimeout\",\n    value: function pageLoadTimeout(ms) {\n      return this.driver_.manage().setTimeouts({\n        pageLoad: ms\n      });\n    }\n  }]);\n\n  return Timeouts;\n}();\n/**\n * An interface for managing the current window.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().window()\n *\n * @see WebDriver#manage()\n * @see Options#window()\n */\n\n\nvar Window = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function Window(driver) {\n    _classCallCheck(this, Window);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Retrieves the window's current position, relative to the top left corner of\n   * the screen.\n   * @return {!promise.Thenable<{x: number, y: number}>} A promise\n   *     that will be resolved with the window's position in the form of a\n   *     {x:number, y:number} object literal.\n   */\n\n\n  _createClass(Window, [{\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.driver_.schedule(new command.Command(command.Name.GET_WINDOW_POSITION).setParameter('windowHandle', 'current'), 'WebDriver.manage().window().getPosition()');\n    }\n    /**\n     * Repositions the current window.\n     * @param {number} x The desired horizontal position, relative to the left\n     *     side of the screen.\n     * @param {number} y The desired vertical position, relative to the top of the\n     *     of the screen.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the command has completed.\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      return this.driver_.schedule(new command.Command(command.Name.SET_WINDOW_POSITION).setParameter('windowHandle', 'current').setParameter('x', x).setParameter('y', y), 'WebDriver.manage().window().setPosition(' + x + ', ' + y + ')');\n    }\n    /**\n     * Retrieves the window's current size.\n     * @return {!promise.Thenable<{width: number, height: number}>} A\n     *     promise that will be resolved with the window's size in the form of a\n     *     {width:number, height:number} object literal.\n     */\n\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.driver_.schedule(new command.Command(command.Name.GET_WINDOW_SIZE).setParameter('windowHandle', 'current'), 'WebDriver.manage().window().getSize()');\n    }\n    /**\n     * Resizes the current window.\n     * @param {number} width The desired window width.\n     * @param {number} height The desired window height.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the command has completed.\n     */\n\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      return this.driver_.schedule(new command.Command(command.Name.SET_WINDOW_SIZE).setParameter('windowHandle', 'current').setParameter('width', width).setParameter('height', height), 'WebDriver.manage().window().setSize(' + width + ', ' + height + ')');\n    }\n    /**\n     * Maximizes the current window.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the command has completed.\n     */\n\n  }, {\n    key: \"maximize\",\n    value: function maximize() {\n      return this.driver_.schedule(new command.Command(command.Name.MAXIMIZE_WINDOW).setParameter('windowHandle', 'current'), 'WebDriver.manage().window().maximize()');\n    }\n  }]);\n\n  return Window;\n}();\n/**\n * Interface for managing WebDriver log records.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.manage().logs()\n *\n * @see WebDriver#manage()\n * @see Options#logs()\n */\n\n\nvar Logs = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function Logs(driver) {\n    _classCallCheck(this, Logs);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Fetches available log entries for the given type.\n   *\n   * Note that log buffers are reset after each call, meaning that available\n   * log entries correspond to those entries not yet returned for a given log\n   * type. In practice, this means that this call will return the available log\n   * entries since the last call, or from the start of the session.\n   *\n   * @param {!logging.Type} type The desired log type.\n   * @return {!promise.Thenable<!Array.<!logging.Entry>>} A\n   *   promise that will resolve to a list of log entries for the specified\n   *   type.\n   */\n\n\n  _createClass(Logs, [{\n    key: \"get\",\n    value: function get(type) {\n      var cmd = new command.Command(command.Name.GET_LOG).setParameter('type', type);\n      return this.driver_.schedule(cmd, 'WebDriver.manage().logs().get(' + type + ')').then(function (entries) {\n        return entries.map(function (entry) {\n          if (!(entry instanceof logging.Entry)) {\n            return new logging.Entry(entry['level'], entry['message'], entry['timestamp'], entry['type']);\n          }\n\n          return entry;\n        });\n      });\n    }\n    /**\n     * Retrieves the log types available to this driver.\n     * @return {!promise.Thenable<!Array<!logging.Type>>} A\n     *     promise that will resolve to a list of available log types.\n     */\n\n  }, {\n    key: \"getAvailableLogTypes\",\n    value: function getAvailableLogTypes() {\n      return this.driver_.schedule(new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES), 'WebDriver.manage().logs().getAvailableLogTypes()');\n    }\n  }]);\n\n  return Logs;\n}();\n/**\n * An interface for changing the focus of the driver to another frame or window.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.switchTo()\n *\n * @see WebDriver#switchTo()\n */\n\n\nvar TargetLocator = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  function TargetLocator(driver) {\n    _classCallCheck(this, TargetLocator);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n  /**\n   * Schedules a command retrieve the {@code document.activeElement} element on\n   * the current document, or {@code document.body} if activeElement is not\n   * available.\n   * @return {!WebElementPromise} The active element.\n   */\n\n\n  _createClass(TargetLocator, [{\n    key: \"activeElement\",\n    value: function activeElement() {\n      var id = this.driver_.schedule(new command.Command(command.Name.GET_ACTIVE_ELEMENT), 'WebDriver.switchTo().activeElement()');\n      return new WebElementPromise(this.driver_, id);\n    }\n    /**\n     * Schedules a command to switch focus of all future commands to the topmost\n     * frame on the page.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the driver has changed focus to the default content.\n     */\n\n  }, {\n    key: \"defaultContent\",\n    value: function defaultContent() {\n      return this.driver_.schedule(new command.Command(command.Name.SWITCH_TO_FRAME).setParameter('id', null), 'WebDriver.switchTo().defaultContent()');\n    }\n    /**\n     * Schedules a command to switch the focus of all future commands to another\n     * frame on the page. The target frame may be specified as one of the\n     * following:\n     *\n     * - A number that specifies a (zero-based) index into [window.frames](\n     *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).\n     * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`\n     *   DOM element.\n     * - The `null` value, to select the topmost frame on the page. Passing `null`\n     *   is the same as calling {@link #defaultContent defaultContent()}.\n     *\n     * If the specified frame can not be found, the returned promise will be\n     * rejected with a {@linkplain error.NoSuchFrameError}.\n     *\n     * @param {(number|WebElement|null)} id The frame locator.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the driver has changed focus to the specified frame.\n     */\n\n  }, {\n    key: \"frame\",\n    value: function frame(id) {\n      return this.driver_.schedule(new command.Command(command.Name.SWITCH_TO_FRAME).setParameter('id', id), 'WebDriver.switchTo().frame(' + id + ')');\n    }\n    /**\n     * Schedules a command to switch the focus of all future commands to another\n     * window. Windows may be specified by their {@code window.name} attribute or\n     * by its handle (as returned by {@link WebDriver#getWindowHandles}).\n     *\n     * If the specified window cannot be found, the returned promise will be\n     * rejected with a {@linkplain error.NoSuchWindowError}.\n     *\n     * @param {string} nameOrHandle The name or window handle of the window to\n     *     switch focus to.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the driver has changed focus to the specified window.\n     */\n\n  }, {\n    key: \"window\",\n    value: function window(nameOrHandle) {\n      return this.driver_.schedule(new command.Command(command.Name.SWITCH_TO_WINDOW). // \"name\" supports the legacy drivers. \"handle\" is the W3C\n      // compliant parameter.\n      setParameter('name', nameOrHandle).setParameter('handle', nameOrHandle), 'WebDriver.switchTo().window(' + nameOrHandle + ')');\n    }\n    /**\n     * Schedules a command to change focus to the active modal dialog, such as\n     * those opened by `window.alert()`, `window.confirm()`, and\n     * `window.prompt()`. The returned promise will be rejected with a\n     * {@linkplain error.NoSuchAlertError} if there are no open alerts.\n     *\n     * @return {!AlertPromise} The open alert.\n     */\n\n  }, {\n    key: \"alert\",\n    value: function alert() {\n      var text = this.driver_.schedule(new command.Command(command.Name.GET_ALERT_TEXT), 'WebDriver.switchTo().alert()');\n      var driver = this.driver_;\n      return new AlertPromise(driver, text.then(function (text) {\n        return new Alert(driver, text);\n      }));\n    }\n  }]);\n\n  return TargetLocator;\n}(); //////////////////////////////////////////////////////////////////////////////\n//\n//  WebElement\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\nvar LEGACY_ELEMENT_ID_KEY = 'ELEMENT';\nvar ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';\n/**\n * Represents a DOM element. WebElements can be found by searching from the\n * document root using a {@link WebDriver} instance, or by searching\n * under another WebElement:\n *\n *     driver.get('http://www.google.com');\n *     var searchForm = driver.findElement(By.tagName('form'));\n *     var searchBox = searchForm.findElement(By.name('q'));\n *     searchBox.sendKeys('webdriver');\n */\n\nvar WebElement = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver the parent WebDriver instance for this element.\n   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for\n   *     the underlying DOM element.\n   */\n  function WebElement(driver, id) {\n    _classCallCheck(this, WebElement);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n    /** @private {!promise.Thenable<string>} */\n\n    this.id_ = driver.controlFlow().promise(function (resolve) {\n      return resolve(id);\n    });\n  }\n  /**\n   * @param {string} id The raw ID.\n   * @param {boolean=} opt_noLegacy Whether to exclude the legacy element key.\n   * @return {!Object} The element ID for use with WebDriver's wire protocol.\n   */\n\n\n  _createClass(WebElement, [{\n    key: \"getDriver\",\n\n    /** @return {!WebDriver} The parent driver for this instance. */\n    value: function getDriver() {\n      return this.driver_;\n    }\n    /**\n     * @return {!promise.Thenable<string>} A promise that resolves to\n     *     the server-assigned opaque ID assigned to this element.\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id_;\n    }\n    /**\n     * @return {!Object} Returns the serialized representation of this WebElement.\n     */\n\n  }, {\n    key: Symbols.serialize,\n    value: function value() {\n      return this.getId().then(WebElement.buildId);\n    }\n    /**\n     * Schedules a command that targets this element with the parent WebDriver\n     * instance. Will ensure this element's ID is included in the command\n     * parameters under the \"id\" key.\n     *\n     * @param {!command.Command} command The command to schedule.\n     * @param {string} description A description of the command for debugging.\n     * @return {!promise.Thenable<T>} A promise that will be resolved\n     *     with the command result.\n     * @template T\n     * @see WebDriver#schedule\n     * @private\n     */\n\n  }, {\n    key: \"schedule_\",\n    value: function schedule_(command, description) {\n      command.setParameter('id', this);\n      return this.driver_.schedule(command, description);\n    }\n    /**\n     * Schedule a command to find a descendant of this element. If the element\n     * cannot be found, the returned promise will be rejected with a\n     * {@linkplain error.NoSuchElementError NoSuchElementError}.\n     *\n     * The search criteria for an element may be defined using one of the static\n     * factories on the {@link by.By} class, or as a short-hand\n     * {@link ./by.ByHash} object. For example, the following two statements\n     * are equivalent:\n     *\n     *     var e1 = element.findElement(By.id('foo'));\n     *     var e2 = element.findElement({id:'foo'});\n     *\n     * You may also provide a custom locator function, which takes as input this\n     * instance and returns a {@link WebElement}, or a promise that will resolve\n     * to a WebElement. If the returned promise resolves to an array of\n     * WebElements, WebDriver will use the first element. For example, to find the\n     * first visible link on a page, you could write:\n     *\n     *     var link = element.findElement(firstVisibleLink);\n     *\n     *     function firstVisibleLink(element) {\n     *       var links = element.findElements(By.tagName('a'));\n     *       return promise.filter(links, function(link) {\n     *         return link.isDisplayed();\n     *       });\n     *     }\n     *\n     * @param {!(by.By|Function)} locator The locator strategy to use when\n     *     searching for the element.\n     * @return {!WebElementPromise} A WebElement that can be used to issue\n     *     commands against the located element. If the element is not found, the\n     *     element will be invalidated and all scheduled commands aborted.\n     */\n\n  }, {\n    key: \"findElement\",\n    value: function findElement(locator) {\n      locator = by.checkedLocator(locator);\n      var id;\n\n      if (typeof locator === 'function') {\n        id = this.driver_.findElementInternal_(locator, this);\n      } else {\n        var cmd = new command.Command(command.Name.FIND_CHILD_ELEMENT).setParameter('using', locator.using).setParameter('value', locator.value);\n        id = this.schedule_(cmd, 'WebElement.findElement(' + locator + ')');\n      }\n\n      return new WebElementPromise(this.driver_, id);\n    }\n    /**\n     * Schedules a command to find all of the descendants of this element that\n     * match the given search criteria.\n     *\n     * @param {!(by.By|Function)} locator The locator strategy to use when\n     *     searching for the element.\n     * @return {!promise.Thenable<!Array<!WebElement>>} A\n     *     promise that will resolve to an array of WebElements.\n     */\n\n  }, {\n    key: \"findElements\",\n    value: function findElements(locator) {\n      locator = by.checkedLocator(locator);\n      var id;\n\n      if (typeof locator === 'function') {\n        return this.driver_.findElementsInternal_(locator, this);\n      } else {\n        var cmd = new command.Command(command.Name.FIND_CHILD_ELEMENTS).setParameter('using', locator.using).setParameter('value', locator.value);\n        return this.schedule_(cmd, 'WebElement.findElements(' + locator + ')').then(function (result) {\n          return Array.isArray(result) ? result : [];\n        });\n      }\n    }\n    /**\n     * Schedules a command to click on this element.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the click command has completed.\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      return this.schedule_(new command.Command(command.Name.CLICK_ELEMENT), 'WebElement.click()');\n    }\n    /**\n     * Schedules a command to type a sequence on the DOM element represented by\n     * this instance.\n     *\n     * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is\n     * processed in the key sequence, that key state is toggled until one of the\n     * following occurs:\n     *\n     * - The modifier key is encountered again in the sequence. At this point the\n     *   state of the key is toggled (along with the appropriate keyup/down\n     *   events).\n     * - The {@link input.Key.NULL} key is encountered in the sequence. When\n     *   this key is encountered, all modifier keys current in the down state are\n     *   released (with accompanying keyup events). The NULL key can be used to\n     *   simulate common keyboard shortcuts:\n     *\n     *         element.sendKeys(\"text was\",\n     *                          Key.CONTROL, \"a\", Key.NULL,\n     *                          \"now text is\");\n     *         // Alternatively:\n     *         element.sendKeys(\"text was\",\n     *                          Key.chord(Key.CONTROL, \"a\"),\n     *                          \"now text is\");\n     *\n     * - The end of the key sequence is encountered. When there are no more keys\n     *   to type, all depressed modifier keys are released (with accompanying\n     *   keyup events).\n     *\n     * If this element is a file input ({@code <input type=\"file\">}), the\n     * specified key sequence should specify the path to the file to attach to\n     * the element. This is analogous to the user clicking \"Browse...\" and entering\n     * the path into the file select dialog.\n     *\n     *     var form = driver.findElement(By.css('form'));\n     *     var element = form.findElement(By.css('input[type=file]'));\n     *     element.sendKeys('/path/to/file.txt');\n     *     form.submit();\n     *\n     * For uploads to function correctly, the entered path must reference a file\n     * on the _browser's_ machine, not the local machine running this script. When\n     * running against a remote Selenium server, a {@link input.FileDetector}\n     * may be used to transparently copy files to the remote machine before\n     * attempting to upload them in the browser.\n     *\n     * __Note:__ On browsers where native keyboard events are not supported\n     * (e.g. Firefox on OS X), key events will be synthesized. Special\n     * punctuation keys will be synthesized according to a standard QWERTY en-us\n     * keyboard layout.\n     *\n     * @param {...(number|string|!IThenable<(number|string)>)} var_args The\n     *     sequence of keys to type. Number keys may be referenced numerically or\n     *     by string (1 or '1'). All arguments will be joined into a single\n     *     sequence.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when all keys have been typed.\n     */\n\n  }, {\n    key: \"sendKeys\",\n    value: function sendKeys(var_args) {\n      var keys = Promise.all(Array.prototype.slice.call(arguments, 0)).then(function (keys) {\n        var ret = [];\n        keys.forEach(function (key) {\n          var type = typeof key;\n\n          if (type === 'number') {\n            key = String(key);\n          } else if (type !== 'string') {\n            throw TypeError('each key must be a number of string; got ' + type);\n          } // The W3C protocol requires keys to be specified as an array where\n          // each element is a single key.\n\n\n          ret.push.apply(ret, key.split(''));\n        });\n        return ret;\n      });\n\n      if (!this.driver_.fileDetector_) {\n        return this.schedule_(new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).setParameter('text', keys.then(function (keys) {\n          return keys.join('');\n        })).setParameter('value', keys), 'WebElement.sendKeys()');\n      } // Suppress unhandled rejection errors until the flow executes the command.\n\n\n      keys.catch(function () {});\n      var element = this;\n      return this.getDriver().controlFlow().execute(function () {\n        return keys.then(function (keys) {\n          return element.driver_.fileDetector_.handleFile(element.driver_, keys.join(''));\n        }).then(function (keys) {\n          return element.schedule_(new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).setParameter('text', keys).setParameter('value', keys.split('')), 'WebElement.sendKeys()');\n        });\n      }, 'WebElement.sendKeys()');\n    }\n    /**\n     * Schedules a command to query for the tag/node name of this element.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the element's tag name.\n     */\n\n  }, {\n    key: \"getTagName\",\n    value: function getTagName() {\n      return this.schedule_(new command.Command(command.Name.GET_ELEMENT_TAG_NAME), 'WebElement.getTagName()');\n    }\n    /**\n     * Schedules a command to query for the computed style of the element\n     * represented by this instance. If the element inherits the named style from\n     * its parent, the parent will be queried for its value.  Where possible, color\n     * values will be converted to their hex representation (e.g. #00ff00 instead\n     * of rgb(0, 255, 0)).\n     *\n     * _Warning:_ the value returned will be as the browser interprets it, so\n     * it may be tricky to form a proper assertion.\n     *\n     * @param {string} cssStyleProperty The name of the CSS style property to look\n     *     up.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the requested CSS value.\n     */\n\n  }, {\n    key: \"getCssValue\",\n    value: function getCssValue(cssStyleProperty) {\n      var name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY;\n      return this.schedule_(new command.Command(name).setParameter('propertyName', cssStyleProperty), 'WebElement.getCssValue(' + cssStyleProperty + ')');\n    }\n    /**\n     * Schedules a command to query for the value of the given attribute of the\n     * element. Will return the current value, even if it has been modified after\n     * the page has been loaded. More exactly, this method will return the value\n     * of the given attribute, unless that attribute is not present, in which case\n     * the value of the property with the same name is returned. If neither value\n     * is set, null is returned (for example, the \"value\" property of a textarea\n     * element). The \"style\" attribute is converted as best can be to a\n     * text representation with a trailing semi-colon. The following are deemed to\n     * be \"boolean\" attributes and will return either \"true\" or null:\n     *\n     * async, autofocus, autoplay, checked, compact, complete, controls, declare,\n     * defaultchecked, defaultselected, defer, disabled, draggable, ended,\n     * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,\n     * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,\n     * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,\n     * selected, spellcheck, truespeed, willvalidate\n     *\n     * Finally, the following commonly mis-capitalized attribute/property names\n     * are evaluated as expected:\n     *\n     * - \"class\"\n     * - \"readonly\"\n     *\n     * @param {string} attributeName The name of the attribute to query.\n     * @return {!promise.Thenable<?string>} A promise that will be\n     *     resolved with the attribute's value. The returned value will always be\n     *     either a string or null.\n     */\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attributeName) {\n      return this.schedule_(new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).setParameter('name', attributeName), 'WebElement.getAttribute(' + attributeName + ')');\n    }\n    /**\n     * Get the visible (i.e. not hidden by CSS) innerText of this element,\n     * including sub-elements, without any leading or trailing whitespace.\n     *\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved with the element's visible text.\n     */\n\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      return this.schedule_(new command.Command(command.Name.GET_ELEMENT_TEXT), 'WebElement.getText()');\n    }\n    /**\n     * Schedules a command to compute the size of this element's bounding box, in\n     * pixels.\n     * @return {!promise.Thenable<{width: number, height: number}>} A\n     *     promise that will be resolved with the element's size as a\n     *     {@code {width:number, height:number}} object.\n     */\n\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.schedule_(new command.Command(command.Name.GET_ELEMENT_SIZE), 'WebElement.getSize()');\n    }\n    /**\n     * Schedules a command to compute the location of this element in page space.\n     * @return {!promise.Thenable<{x: number, y: number}>} A promise that\n     *     will be resolved to the element's location as a\n     *     {@code {x:number, y:number}} object.\n     */\n\n  }, {\n    key: \"getLocation\",\n    value: function getLocation() {\n      return this.schedule_(new command.Command(command.Name.GET_ELEMENT_LOCATION), 'WebElement.getLocation()');\n    }\n    /**\n     * Schedules a command to query whether the DOM element represented by this\n     * instance is enabled, as dictated by the {@code disabled} attribute.\n     * @return {!promise.Thenable<boolean>} A promise that will be\n     *     resolved with whether this element is currently enabled.\n     */\n\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.schedule_(new command.Command(command.Name.IS_ELEMENT_ENABLED), 'WebElement.isEnabled()');\n    }\n    /**\n     * Schedules a command to query whether this element is selected.\n     * @return {!promise.Thenable<boolean>} A promise that will be\n     *     resolved with whether this element is currently selected.\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      return this.schedule_(new command.Command(command.Name.IS_ELEMENT_SELECTED), 'WebElement.isSelected()');\n    }\n    /**\n     * Schedules a command to submit the form containing this element (or this\n     * element if it is a FORM element). This command is a no-op if the element is\n     * not contained in a form.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the form has been submitted.\n     */\n\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      return this.schedule_(new command.Command(command.Name.SUBMIT_ELEMENT), 'WebElement.submit()');\n    }\n    /**\n     * Schedules a command to clear the `value` of this element. This command has\n     * no effect if the underlying DOM element is neither a text INPUT element\n     * nor a TEXTAREA element.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when the element has been cleared.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.schedule_(new command.Command(command.Name.CLEAR_ELEMENT), 'WebElement.clear()');\n    }\n    /**\n     * Schedules a command to test whether this element is currently displayed.\n     * @return {!promise.Thenable<boolean>} A promise that will be\n     *     resolved with whether this element is currently visible on the page.\n     */\n\n  }, {\n    key: \"isDisplayed\",\n    value: function isDisplayed() {\n      return this.schedule_(new command.Command(command.Name.IS_ELEMENT_DISPLAYED), 'WebElement.isDisplayed()');\n    }\n    /**\n     * Take a screenshot of the visible region encompassed by this element's\n     * bounding rectangle.\n     *\n     * @param {boolean=} opt_scroll Optional argument that indicates whether the\n     *     element should be scrolled into view before taking a screenshot.\n     *     Defaults to false.\n     * @return {!promise.Thenable<string>} A promise that will be\n     *     resolved to the screenshot as a base-64 encoded PNG.\n     */\n\n  }, {\n    key: \"takeScreenshot\",\n    value: function takeScreenshot(opt_scroll) {\n      var scroll = !!opt_scroll;\n      return this.schedule_(new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT).setParameter('scroll', scroll), 'WebElement.takeScreenshot(' + scroll + ')');\n    }\n  }], [{\n    key: \"buildId\",\n    value: function buildId(id, opt_noLegacy) {\n      var _ref4;\n\n      return opt_noLegacy ? _defineProperty({}, ELEMENT_ID_KEY, id) : (_ref4 = {}, _defineProperty(_ref4, ELEMENT_ID_KEY, id), _defineProperty(_ref4, LEGACY_ELEMENT_ID_KEY, id), _ref4);\n    }\n    /**\n     * Extracts the encoded WebElement ID from the object.\n     *\n     * @param {?} obj The object to extract the ID from.\n     * @return {string} the extracted ID.\n     * @throws {TypeError} if the object is not a valid encoded ID.\n     */\n\n  }, {\n    key: \"extractId\",\n    value: function extractId(obj) {\n      if (obj && typeof obj === 'object') {\n        if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n          return obj[ELEMENT_ID_KEY];\n        } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n          return obj[LEGACY_ELEMENT_ID_KEY];\n        }\n      }\n\n      throw new TypeError('object is not a WebElement ID');\n    }\n    /**\n     * @param {?} obj the object to test.\n     * @return {boolean} whether the object is a valid encoded WebElement ID.\n     */\n\n  }, {\n    key: \"isId\",\n    value: function isId(obj) {\n      return obj && typeof obj === 'object' && (typeof obj[ELEMENT_ID_KEY] === 'string' || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');\n    }\n    /**\n     * Compares two WebElements for equality.\n     *\n     * @param {!WebElement} a A WebElement.\n     * @param {!WebElement} b A WebElement.\n     * @return {!promise.Thenable<boolean>} A promise that will be\n     *     resolved to whether the two WebElements are equal.\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(a, b) {\n      if (a === b) {\n        return a.driver_.controlFlow().promise(function (resolve) {\n          return resolve(true);\n        });\n      }\n\n      var ids = [a.getId(), b.getId()];\n      return promise.all(ids).then(function (ids) {\n        // If the two element's have the same ID, they should be considered\n        // equal. Otherwise, they may still be equivalent, but we'll need to\n        // ask the server to check for us.\n        if (ids[0] === ids[1]) {\n          return true;\n        }\n\n        var cmd = new command.Command(command.Name.ELEMENT_EQUALS);\n        cmd.setParameter('id', ids[0]);\n        cmd.setParameter('other', ids[1]);\n        return a.driver_.schedule(cmd, 'WebElement.equals()');\n      });\n    }\n  }]);\n\n  return WebElement;\n}();\n/**\n * WebElementPromise is a promise that will be fulfilled with a WebElement.\n * This serves as a forward proxy on WebElement, allowing calls to be\n * scheduled without directly on this instance before the underlying\n * WebElement has been fulfilled. In other words, the following two statements\n * are equivalent:\n *\n *     driver.findElement({id: 'my-button'}).click();\n *     driver.findElement({id: 'my-button'}).then(function(el) {\n *       return el.click();\n *     });\n *\n * @implements {promise.CancellableThenable<!WebElement>}\n * @final\n */\n\n\nvar WebElementPromise = /*#__PURE__*/function (_WebElement) {\n  _inherits(WebElementPromise, _WebElement);\n\n  var _super2 = _createSuper(WebElementPromise);\n\n  /**\n   * @param {!WebDriver} driver The parent WebDriver instance for this\n   *     element.\n   * @param {!promise.Thenable<!WebElement>} el A promise\n   *     that will resolve to the promised element.\n   */\n  function WebElementPromise(driver, el) {\n    var _this4;\n\n    _classCallCheck(this, WebElementPromise);\n\n    _this4 = _super2.call(this, driver, 'unused');\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n\n    _this4.cancel = function (opt_reason) {\n      if (promise.CancellableThenable.isImplementation(el)) {\n        /** @type {!promise.CancellableThenable} */\n        el.cancel(opt_reason);\n      }\n    };\n    /** @override */\n\n\n    _this4.then = el.then.bind(el);\n    /** @override */\n\n    _this4.catch = el.catch.bind(el);\n    /**\n     * Defers returning the element ID until the wrapped WebElement has been\n     * resolved.\n     * @override\n     */\n\n    _this4.getId = function () {\n      return el.then(function (el) {\n        return el.getId();\n      });\n    };\n\n    return _this4;\n  }\n\n  return WebElementPromise;\n}(WebElement);\n\npromise.CancellableThenable.addImplementation(WebElementPromise); //////////////////////////////////////////////////////////////////////////////\n//\n//  Alert\n//\n//////////////////////////////////////////////////////////////////////////////\n\n/**\n * Represents a modal dialog such as {@code alert}, {@code confirm}, or\n * {@code prompt}. Provides functions to retrieve the message displayed with\n * the alert, accept or dismiss the alert, and set the response text (in the\n * case of {@code prompt}).\n */\n\nvar Alert = /*#__PURE__*/function () {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this alert\n   *     is attached to.\n   * @param {string} text The message text displayed with this alert.\n   */\n  function Alert(driver, text) {\n    _classCallCheck(this, Alert);\n\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n    /** @private {!promise.Thenable<string>} */\n\n    this.text_ = driver.controlFlow().promise(function (resolve) {\n      return resolve(text);\n    });\n  }\n  /**\n   * Retrieves the message text displayed with this alert. For instance, if the\n   * alert were opened with alert(\"hello\"), then this would return \"hello\".\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the text displayed with this alert.\n   */\n\n\n  _createClass(Alert, [{\n    key: \"getText\",\n    value: function getText() {\n      return this.text_;\n    }\n    /**\n     * Sets the username and password in an alert prompting for credentials (such\n     * as a Basic HTTP Auth prompt). This method will implicitly\n     * {@linkplain #accept() submit} the dialog.\n     *\n     * @param {string} username The username to send.\n     * @param {string} password The password to send.\n     * @return {!promise.Thenable<void>} A promise that will be resolved when this\n     *     command has completed.\n     */\n\n  }, {\n    key: \"authenticateAs\",\n    value: function authenticateAs(username, password) {\n      return this.driver_.schedule(new command.Command(command.Name.SET_ALERT_CREDENTIALS), 'WebDriver.switchTo().alert()' + \".authenticateAs(\\\"\".concat(username, \"\\\", \\\"\").concat(password, \"\\\")\"));\n    }\n    /**\n     * Accepts this alert.\n     *\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when this command has completed.\n     */\n\n  }, {\n    key: \"accept\",\n    value: function accept() {\n      return this.driver_.schedule(new command.Command(command.Name.ACCEPT_ALERT), 'WebDriver.switchTo().alert().accept()');\n    }\n    /**\n     * Dismisses this alert.\n     *\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when this command has completed.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      return this.driver_.schedule(new command.Command(command.Name.DISMISS_ALERT), 'WebDriver.switchTo().alert().dismiss()');\n    }\n    /**\n     * Sets the response text on this alert. This command will return an error if\n     * the underlying alert does not support response text (e.g. window.alert and\n     * window.confirm).\n     *\n     * @param {string} text The text to set.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when this command has completed.\n     */\n\n  }, {\n    key: \"sendKeys\",\n    value: function sendKeys(text) {\n      return this.driver_.schedule(new command.Command(command.Name.SET_ALERT_TEXT).setParameter('text', text), 'WebDriver.switchTo().alert().sendKeys(' + text + ')');\n    }\n  }]);\n\n  return Alert;\n}();\n/**\n * AlertPromise is a promise that will be fulfilled with an Alert. This promise\n * serves as a forward proxy on an Alert, allowing calls to be scheduled\n * directly on this instance before the underlying Alert has been fulfilled. In\n * other words, the following two statements are equivalent:\n *\n *     driver.switchTo().alert().dismiss();\n *     driver.switchTo().alert().then(function(alert) {\n *       return alert.dismiss();\n *     });\n *\n * @implements {promise.CancellableThenable<!webdriver.Alert>}\n * @final\n */\n\n\nvar AlertPromise = /*#__PURE__*/function (_Alert) {\n  _inherits(AlertPromise, _Alert);\n\n  var _super3 = _createSuper(AlertPromise);\n\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this\n   *     alert is attached to.\n   * @param {!promise.Thenable<!Alert>} alert A thenable\n   *     that will be fulfilled with the promised alert.\n   */\n  function AlertPromise(driver, alert) {\n    var _this5;\n\n    _classCallCheck(this, AlertPromise);\n\n    _this5 = _super3.call(this, driver, 'unused');\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n\n    _this5.cancel = function (opt_reason) {\n      if (promise.CancellableThenable.isImplementation(alert)) {\n        /** @type {!promise.CancellableThenable} */\n        alert.cancel(opt_reason);\n      }\n    };\n    /** @override */\n\n\n    _this5.then = alert.then.bind(alert);\n    /** @override */\n\n    _this5.catch = alert.catch.bind(alert);\n    /**\n     * Defer returning text until the promised alert has been resolved.\n     * @override\n     */\n\n    _this5.getText = function () {\n      return alert.then(function (alert) {\n        return alert.getText();\n      });\n    };\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n\n\n    _this5.authenticateAs = function (username, password) {\n      return alert.then(function (alert) {\n        return alert.authenticateAs(username, password);\n      });\n    };\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n\n\n    _this5.accept = function () {\n      return alert.then(function (alert) {\n        return alert.accept();\n      });\n    };\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n\n\n    _this5.dismiss = function () {\n      return alert.then(function (alert) {\n        return alert.dismiss();\n      });\n    };\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n\n\n    _this5.sendKeys = function (text) {\n      return alert.then(function (alert) {\n        return alert.sendKeys(text);\n      });\n    };\n\n    return _this5;\n  }\n\n  return AlertPromise;\n}(Alert);\n\npromise.CancellableThenable.addImplementation(AlertPromise); // PUBLIC API\n\nmodule.exports = {\n  Alert: Alert,\n  AlertPromise: AlertPromise,\n  Condition: Condition,\n  Logs: Logs,\n  Navigation: Navigation,\n  Options: Options,\n  TargetLocator: TargetLocator,\n  Timeouts: Timeouts,\n  IWebDriver: IWebDriver,\n  WebDriver: WebDriver,\n  WebElement: WebElement,\n  WebElementCondition: WebElementCondition,\n  WebElementPromise: WebElementPromise,\n  Window: Window\n};","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/lib/webdriver.js"],"names":["actions","require","by","Capabilities","command","error","input","logging","Session","Symbols","promise","Condition","message","fn","description_","WebElementCondition","executeCommand","executor","toWireValue","getParameters","then","parameters","setParameters","execute","obj","isPromise","Promise","resolve","convertValue","value","Array","isArray","convertKeys","serialize","toJSON","numKeys","length","Object","keys","ret","numResolved","forEachKey","i","n","key","done","reject","setValue","maybeFulfill","fromWireValue","driver","map","v","WebElement","isId","id","extractId","result","hasOwnProperty","IWebDriver","description","detector","script","var_args","opt_scope","condition","opt_timeout","opt_message","ms","url","locator","WebDriver","session","opt_flow","opt_onQuit","flow_","controlFlow","session_","executor_","fileDetector_","onQuit_","setParameter","prepCommand","catch","flow","s","getCapabilities","schedule","Command","Name","QUIT","finally","_","NoSuchSessionError","call","ActionSequence","TouchSequence","args","arguments","prototype","slice","EXECUTE_SCRIPT","EXECUTE_ASYNC_SCRIPT","fullyResolved","isGenerator","unshift","consume","apply","name","wait","TypeError","WebElementPromise","toString","timeout","GET_CURRENT_WINDOW_HANDLE","GET_WINDOW_HANDLES","GET_PAGE_SOURCE","CLOSE","navigate","to","GET_CURRENT_URL","GET_TITLE","checkedLocator","findElementInternal_","cmd","FIND_ELEMENT","using","locatorFn","context","findElementsInternal_","FIND_ELEMENTS","res","e","NoSuchElementError","filter","item","SCREENSHOT","Options","Navigation","TargetLocator","sessionId","DESCRIBE_SESSION","err","UnknownCommandError","capabilities","NEW_SESSION","desired","required","driver_","GET","GO_BACK","GO_FORWARD","REFRESH","path","domain","secure","httpOnly","expiry","test","InvalidArgumentError","cookieString","Math","floor","Date","toUTCString","date","getTime","ADD_COOKIE","DELETE_ALL_COOKIES","DELETE_COOKIE","GET_ALL_COOKIES","getCookies","cookies","cookie","GET_TIMEOUT","pageLoad","implicit","SET_TIMEOUT","valid","setParam","cmds","push","legacyTimeout","all","Logs","Timeouts","Window","type","Cookie","manage","setTimeouts","GET_WINDOW_POSITION","x","y","SET_WINDOW_POSITION","GET_WINDOW_SIZE","width","height","SET_WINDOW_SIZE","MAXIMIZE_WINDOW","GET_LOG","entries","entry","Entry","GET_AVAILABLE_LOG_TYPES","GET_ACTIVE_ELEMENT","SWITCH_TO_FRAME","nameOrHandle","SWITCH_TO_WINDOW","text","GET_ALERT_TEXT","AlertPromise","Alert","LEGACY_ELEMENT_ID_KEY","ELEMENT_ID_KEY","id_","getId","buildId","FIND_CHILD_ELEMENT","schedule_","FIND_CHILD_ELEMENTS","CLICK_ELEMENT","forEach","String","split","SEND_KEYS_TO_ELEMENT","join","element","getDriver","handleFile","GET_ELEMENT_TAG_NAME","cssStyleProperty","GET_ELEMENT_VALUE_OF_CSS_PROPERTY","attributeName","GET_ELEMENT_ATTRIBUTE","GET_ELEMENT_TEXT","GET_ELEMENT_SIZE","GET_ELEMENT_LOCATION","IS_ELEMENT_ENABLED","IS_ELEMENT_SELECTED","SUBMIT_ELEMENT","CLEAR_ELEMENT","IS_ELEMENT_DISPLAYED","opt_scroll","scroll","TAKE_ELEMENT_SCREENSHOT","opt_noLegacy","a","b","ids","ELEMENT_EQUALS","el","cancel","opt_reason","CancellableThenable","isImplementation","bind","addImplementation","text_","username","password","SET_ALERT_CREDENTIALS","ACCEPT_ALERT","DISMISS_ALERT","SET_ALERT_TEXT","alert","getText","authenticateAs","accept","dismiss","sendKeys","module","exports"],"mappings":"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;AAE5B;AACF;AACA;;;;kCACgB,CAAE;AAEhB;AACF;AACA;;;;iCACe,CAAE;AAEf;AACF;AACA;AACA;;;;sCACoB,CAAE;AAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;2BACS,CAAE;AAET;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACY,CAAE;AAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCACiB,CAAE;AAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACgBC,M,EAAQC,Q,EAAU,CAAE;AAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCACqBD,M,EAAQC,Q,EAAU,CAAE;AAEvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yBACOlD,E,EAAImD,S,EAAWD,Q,EAAU,CAAE;AAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yBACOE,S,EAAWC,W,EAAaC,W,EAAa,CAAE;AAE5C;AACF;AACA;AACA;AACA;AACA;;;;0BACQC,E,EAAI,CAAE;AAEZ;AACF;AACA;AACA;AACA;;;;sCACoB,CAAE;AAEpB;AACF;AACA;AACA;AACA;;;;0CACwB,CAAE;AAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACkB,CAAE;AAElB;AACF;AACA;AACA;AACA;;;;4BACU,CAAE;AAEV;AACF;AACA;AACA;AACA;AACA;;;;wBACMC,G,EAAK,CAAE;AAEX;AACF;AACA;AACA;AACA;;;;oCACkB,CAAE;AAElB;AACF;AACA;AACA;AACA;;;;+BACa,CAAE;AAEb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gCACcC,O,EAAS,CAAE;AAEvB;AACF;AACA;AACA;AACA;AACA;AACA;;;;iCACeA,O,EAAS,CAAE;AAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCACmB,CAAE;AAEnB;AACF;AACA;;;;6BACW,CAAE;AAEX;AACF;AACA;;;;+BACa,CAAE;AAEb;AACF;AACA;AACA;;;;+BACa,CAAE;;;;;AAIf;AACA;AACA;AACA;AACA;;;IACMC,S;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,qBAAYC,OAAZ,EAAqBvD,QAArB,EAA+BwD,QAA/B,EAAyCC,UAAzC,EAAqD;AAAA;;AACnD;AACA,SAAKC,KAAL,GAAaF,QAAQ,IAAI/D,OAAO,CAACkE,WAAR,EAAzB;AAEA;;AACA,SAAKC,QAAL,GAAgB,KAAKF,KAAL,CAAWjE,OAAX,C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,CAAyBtE,KAAzB;AAGA;AACA;AACA;AACA;AACA;;AACA4G,OAAO,CAACmD,MAAR,CAAezF,SAAf,CAAyBsD,IAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAhB,OAAO,CAACmD,MAAR,CAAezF,SAAf,CAAyBuD,MAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAjB,OAAO,CAACmD,MAAR,CAAezF,SAAf,CAAyBwD,MAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;;AACAlB,OAAO,CAACmD,MAAR,CAAezF,SAAf,CAAyByD,QAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnB,OAAO,CAACmD,MAAR,CAAezF,SAAf,CAAyB0D,MAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACM4B,Q;AACJ;AACF;AACA;AACA;AACE,oBAAYvI,MAAZ,EAAoB;AAAA;;AAClB;AACA,SAAKkG,OAAL,GAAelG,MAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;mCACiBkB,E,EAAI;AACjB,aAAO,KAAKgF,OAAL,CAAayC,MAAb,GAAsBC,WAAtB,CAAkC;AAACd,QAAAA,QAAQ,EAAE5G;AAAX,OAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCACmBA,E,EAAI;AACnB,aAAO,KAAKgF,OAAL,CAAayC,MAAb,GAAsBC,WAAtB,CAAkC;AAAChI,QAAAA,MAAM,EAAEM;AAAT,OAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACkBA,E,EAAI;AAClB,aAAO,KAAKgF,OAAL,CAAayC,MAAb,GAAsBC,WAAtB,CAAkC;AAACf,QAAAA,QAAQ,EAAE3G;AAAX,OAAlC,CAAP;AACD;;;;;AAIH;AAC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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The heart of the WebDriver JavaScript API.\n */\n\n'use strict';\n\nconst actions = require('./actions');\nconst by = require('./by');\nconst Capabilities = require('./capabilities').Capabilities;\nconst command = require('./command');\nconst error = require('./error');\nconst input = require('./input');\nconst logging = require('./logging');\nconst {Session} = require('./session');\nconst Symbols = require('./symbols');\nconst promise = require('./promise');\n\n\n/**\n * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait\n * command}.\n *\n * @template OUT\n */\nclass Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): OUT} fn The condition function to\n   *     evaluate on each iteration of the wait loop.\n   */\n  constructor(message, fn) {\n    /** @private {string} */\n    this.description_ = 'Waiting ' + message;\n\n    /** @type {function(!WebDriver): OUT} */\n    this.fn = fn;\n  }\n\n  /** @return {string} A description of this condition. */\n  description() {\n    return this.description_;\n  }\n}\n\n\n/**\n * Defines a condition that will result in a {@link WebElement}.\n *\n * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}\n */\nclass WebElementCondition extends Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}\n   *     fn The condition function to evaluate on each iteration of the wait\n   *     loop.\n   */\n  constructor(message, fn) {\n    super(message, fn);\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebDriver\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Translates a command to its wire-protocol representation before passing it\n * to the given `executor` for execution.\n * @param {!command.Executor} executor The executor to use.\n * @param {!command.Command} command The command to execute.\n * @return {!Promise} A promise that will resolve with the command response.\n */\nfunction executeCommand(executor, command) {\n  return toWireValue(command.getParameters()).\n      then(function(parameters) {\n        command.setParameters(parameters);\n        return executor.execute(command);\n      });\n}\n\n\n/**\n * Converts an object to its JSON representation in the WebDriver wire protocol.\n * When converting values of type object, the following steps will be taken:\n * <ol>\n * <li>if the object is a WebElement, the return value will be the element's\n *     server ID\n * <li>if the object defines a {@link Symbols.serialize} method, this algorithm\n *     will be recursively applied to the object's serialized representation\n * <li>if the object provides a \"toJSON\" function, this algorithm will\n *     recursively be applied to the result of that function\n * <li>otherwise, the value of each key will be recursively converted according\n *     to the rules above.\n * </ol>\n *\n * @param {*} obj The object to convert.\n * @return {!Promise<?>} A promise that will resolve to the input value's JSON\n *     representation.\n */\nfunction toWireValue(obj) {\n  if (promise.isPromise(obj)) {\n    return Promise.resolve(obj).then(toWireValue);\n  }\n  return Promise.resolve(convertValue(obj));\n}\n\n\nfunction convertValue(value) {\n  if (value === void 0 || value === null) {\n    return value;\n  }\n\n  if (typeof value === 'boolean'\n      || typeof value === 'number'\n      || typeof value === 'string') {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return convertKeys(value);\n  }\n\n  if (typeof value === 'function') {\n    return '' + value;\n  }\n\n  if (typeof value[Symbols.serialize] === 'function') {\n    return toWireValue(value[Symbols.serialize]());\n  } else if (typeof value.toJSON === 'function') {\n    return toWireValue(value.toJSON());\n  }\n  return convertKeys(value);\n}\n\n\nfunction convertKeys(obj) {\n  const isArray = Array.isArray(obj);\n  const numKeys = isArray ? obj.length : Object.keys(obj).length;\n  const ret = isArray ? new Array(numKeys) : {};\n  if (!numKeys) {\n    return Promise.resolve(ret);\n  }\n\n  let numResolved = 0;\n\n  function forEachKey(obj, fn) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, n = obj.length; i < n; i++) {\n        fn(obj[i], i);\n      }\n    } else {\n      for (let key in obj) {\n        fn(obj[key], key);\n      }\n    }\n  }\n\n  return new Promise(function(done, reject) {\n    forEachKey(obj, function(value, key) {\n      if (promise.isPromise(value)) {\n        value.then(toWireValue).then(setValue, reject);\n      } else {\n        value = convertValue(value);\n        if (promise.isPromise(value)) {\n          value.then(toWireValue).then(setValue, reject);\n        } else {\n          setValue(value);\n        }\n      }\n\n      function setValue(value) {\n        ret[key] = value;\n        maybeFulfill();\n      }\n    });\n\n    function maybeFulfill() {\n      if (++numResolved === numKeys) {\n        done(ret);\n      }\n    }\n  });\n}\n\n\n/**\n * Converts a value from its JSON representation according to the WebDriver wire\n * protocol. Any JSON object that defines a WebElement ID will be decoded to a\n * {@link WebElement} object. All other values will be passed through as is.\n *\n * @param {!WebDriver} driver The driver to use as the parent of any unwrapped\n *     {@link WebElement} values.\n * @param {*} value The value to convert.\n * @return {*} The converted value.\n */\nfunction fromWireValue(driver, value) {\n  if (Array.isArray(value)) {\n    value = value.map(v => fromWireValue(driver, v));\n  } else if (WebElement.isId(value)) {\n    let id = WebElement.extractId(value);\n    value = new WebElement(driver, id);\n  } else if (value && typeof value === 'object') {\n    let result = {};\n    for (let key in value) {\n      if (value.hasOwnProperty(key)) {\n        result[key] = fromWireValue(driver, value[key]);\n      }\n    }\n    value = result;\n  }\n  return value;\n}\n\n\n/**\n * Structural interface for a WebDriver client.\n *\n * @record\n */\nclass IWebDriver {\n\n  /** @return {!promise.ControlFlow} The control flow used by this instance. */\n  controlFlow() {}\n\n  /**\n   * Schedules a {@link command.Command} to be executed by this driver's\n   * {@link command.Executor}.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @param {string} description A description of the command for debugging.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     with the command result.\n   * @template T\n   */\n  schedule(command, description) {}\n\n  /**\n   * Sets the {@linkplain input.FileDetector file detector} that should be\n   * used with this instance.\n   * @param {input.FileDetector} detector The detector to use or {@code null}.\n   */\n  setFileDetector(detector) {}\n\n  /**\n   * @return {!command.Executor} The command executor used by this instance.\n   */\n  getExecutor() {}\n\n  /**\n   * @return {!promise.Thenable<!Session>} A promise for this client's session.\n   */\n  getSession() {}\n\n  /**\n   * @return {!promise.Thenable<!Capabilities>} A promise that will resolve with\n   *     the this instance's capabilities.\n   */\n  getCapabilities() {}\n\n  /**\n   * Terminates the browser session. After calling quit, this instance will be\n   * invalidated and may no longer be used to issue commands against the\n   * browser.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved when the\n   *     command has completed.\n   */\n  quit() {}\n\n  /**\n   * Creates a new action sequence using this driver. The sequence will not be\n   * scheduled for execution until {@link actions.ActionSequence#perform} is\n   * called. Example:\n   *\n   *     driver.actions().\n   *         mouseDown(element1).\n   *         mouseMove(element2).\n   *         mouseUp().\n   *         perform();\n   *\n   * @return {!actions.ActionSequence} A new action sequence for this instance.\n   */\n  actions() {}\n\n  /**\n   * Creates a new touch sequence using this driver. The sequence will not be\n   * scheduled for execution until {@link actions.TouchSequence#perform} is\n   * called. Example:\n   *\n   *     driver.touchActions().\n   *         tap(element1).\n   *         doubleTap(element2).\n   *         perform();\n   *\n   * @return {!actions.TouchSequence} A new touch sequence for this instance.\n   */\n  touchActions() {}\n\n  /**\n   * Schedules a command to execute JavaScript in the context of the currently\n   * selected frame or window. The script fragment will be executed as the body\n   * of an anonymous function. If the script is provided as a function object,\n   * that function will be converted to a string for injection into the target\n   * window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the {@code arguments} object.\n   * Arguments may be a boolean, number, string, or {@linkplain WebElement}.\n   * Arrays and objects may also be used as script arguments as long as each item\n   * adheres to the types previously mentioned.\n   *\n   * The script may refer to any variables accessible from the current window.\n   * Furthermore, the script will execute in the window's context, thus\n   * {@code document} may be used to refer to the current document. Any local\n   * variables will not be available once the script has finished executing,\n   * though global variables will persist.\n   *\n   * If the script has a return value (i.e. if the script contains a return\n   * statement), then the following steps will be taken for resolving this\n   * functions return value:\n   *\n   * - For a HTML element, the value will resolve to a {@linkplain WebElement}\n   * - Null and undefined return values will resolve to null</li>\n   * - Booleans, numbers, and strings will resolve as is</li>\n   * - Functions will resolve to their string representation</li>\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {!promise.Thenable<T>} A promise that will resolve to the\n   *    scripts return value.\n   * @template T\n   */\n  executeScript(script, var_args) {}\n\n  /**\n   * Schedules a command to execute asynchronous JavaScript in the context of the\n   * currently selected frame or window. The script fragment will be executed as\n   * the body of an anonymous function. If the script is provided as a function\n   * object, that function will be converted to a string for injection into the\n   * target window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the {@code arguments} object.\n   * Arguments may be a boolean, number, string, or {@code WebElement}.\n   * Arrays and objects may also be used as script arguments as long as each item\n   * adheres to the types previously mentioned.\n   *\n   * Unlike executing synchronous JavaScript with {@link #executeScript},\n   * scripts executed with this function must explicitly signal they are finished\n   * by invoking the provided callback. This callback will always be injected\n   * into the executed function as the last argument, and thus may be referenced\n   * with {@code arguments[arguments.length - 1]}. The following steps will be\n   * taken for resolving this functions return value against the first argument\n   * to the script's callback function:\n   *\n   * - For a HTML element, the value will resolve to a\n   *     {@link WebElement}\n   * - Null and undefined return values will resolve to null\n   * - Booleans, numbers, and strings will resolve as is\n   * - Functions will resolve to their string representation\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * __Example #1:__ Performing a sleep that is synchronized with the currently\n   * selected window:\n   *\n   *     var start = new Date().getTime();\n   *     driver.executeAsyncScript(\n   *         'window.setTimeout(arguments[arguments.length - 1], 500);').\n   *         then(function() {\n   *           console.log(\n   *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');\n   *         });\n   *\n   * __Example #2:__ Synchronizing a test with an AJAX application:\n   *\n   *     var button = driver.findElement(By.id('compose-button'));\n   *     button.click();\n   *     driver.executeAsyncScript(\n   *         'var callback = arguments[arguments.length - 1];' +\n   *         'mailClient.getComposeWindowWidget().onload(callback);');\n   *     driver.switchTo().frame('composeWidget');\n   *     driver.findElement(By.id('to')).sendKeys('dog@example.com');\n   *\n   * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In\n   * this example, the inject script is specified with a function literal. When\n   * using this format, the function is converted to a string for injection, so it\n   * should not reference any symbols not defined in the scope of the page under\n   * test.\n   *\n   *     driver.executeAsyncScript(function() {\n   *       var callback = arguments[arguments.length - 1];\n   *       var xhr = new XMLHttpRequest();\n   *       xhr.open(\"GET\", \"/resource/data.json\", true);\n   *       xhr.onreadystatechange = function() {\n   *         if (xhr.readyState == 4) {\n   *           callback(xhr.responseText);\n   *         }\n   *       };\n   *       xhr.send('');\n   *     }).then(function(str) {\n   *       console.log(JSON.parse(str)['food']);\n   *     });\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {!promise.Thenable<T>} A promise that will resolve to the\n   *    scripts return value.\n   * @template T\n   */\n  executeAsyncScript(script, var_args) {}\n\n  /**\n   * Schedules a command to execute a custom function.\n   * @param {function(...): (T|IThenable<T>)} fn The function to execute.\n   * @param {Object=} opt_scope The object in whose scope to execute the function.\n   * @param {...*} var_args Any arguments to pass to the function.\n   * @return {!promise.Thenable<T>} A promise that will be resolved'\n   *     with the function's result.\n   * @template T\n   */\n  call(fn, opt_scope, var_args) {}\n\n  /**\n   * Schedules a command to wait for a condition to hold. The condition may be\n   * specified by a {@link Condition}, as a custom function, or as any\n   * promise-like thenable.\n   *\n   * For a {@link Condition} or function, the wait will repeatedly\n   * evaluate the condition until it returns a truthy value. If any errors occur\n   * while evaluating the condition, they will be allowed to propagate. In the\n   * event a condition returns a {@link promise.Promise promise}, the polling\n   * loop will wait for it to be resolved and use the resolved value for whether\n   * the condition has been satisfied. Note the resolution time for a promise\n   * is factored into whether a wait has timed out.\n   *\n   * Note, if the provided condition is a {@link WebElementCondition}, then\n   * the wait will return a {@link WebElementPromise} that will resolve to the\n   * element that satisfied the condition.\n   *\n   * _Example:_ waiting up to 10 seconds for an element to be present on the\n   * page.\n   *\n   *     var button = driver.wait(until.elementLocated(By.id('foo')), 10000);\n   *     button.click();\n   *\n   * This function may also be used to block the command flow on the resolution\n   * of any thenable promise object. When given a promise, the command will\n   * simply wait for its resolution before completing. A timeout may be provided\n   * to fail the command if the promise does not resolve before the timeout\n   * expires.\n   *\n   * _Example:_ Suppose you have a function, `startTestServer`, that returns a\n   * promise for when a server is ready for requests. You can block a WebDriver\n   * client on this promise with:\n   *\n   *     var started = startTestServer();\n   *     driver.wait(started, 5 * 1000, 'Server should start within 5 seconds');\n   *     driver.get(getServerUrl());\n   *\n   * @param {!(IThenable<T>|\n   *           Condition<T>|\n   *           function(!WebDriver): T)} condition The condition to\n   *     wait on, defined as a promise, condition object, or  a function to\n   *     evaluate as a condition.\n   * @param {number=} opt_timeout How long to wait for the condition to be true.\n   * @param {string=} opt_message An optional message to use if the wait times\n   *     out.\n   * @return {!(promise.Thenable<T>|WebElementPromise)} A promise that will be\n   *     resolved with the first truthy value returned by the condition\n   *     function, or rejected if the condition times out. If the input\n   *     input condition is an instance of a {@link WebElementCondition},\n   *     the returned value will be a {@link WebElementPromise}.\n   * @throws {TypeError} if the provided `condition` is not a valid type.\n   * @template T\n   */\n  wait(condition, opt_timeout, opt_message) {}\n\n  /**\n   * Schedules a command to make the driver sleep for the given amount of time.\n   * @param {number} ms The amount of time, in milliseconds, to sleep.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the sleep has finished.\n   */\n  sleep(ms) {}\n\n  /**\n   * Schedules a command to retrieve the current window handle.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current window handle.\n   */\n  getWindowHandle() {}\n\n  /**\n   * Schedules a command to retrieve the current list of available window handles.\n   * @return {!promise.Thenable<!Array<string>>} A promise that will\n   *     be resolved with an array of window handles.\n   */\n  getAllWindowHandles() {}\n\n  /**\n   * Schedules a command to retrieve the current page's source. The page source\n   * returned is a representation of the underlying DOM: do not expect it to be\n   * formatted or escaped in the same way as the response sent from the web\n   * server.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current page source.\n   */\n  getPageSource() {}\n\n  /**\n   * Schedules a command to close the current window.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  close() {}\n\n  /**\n   * Schedules a command to navigate to the given URL.\n   * @param {string} url The fully qualified URL to open.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the document has finished loading.\n   */\n  get(url) {}\n\n  /**\n   * Schedules a command to retrieve the URL of the current page.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current URL.\n   */\n  getCurrentUrl() {}\n\n  /**\n   * Schedules a command to retrieve the current page's title.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current page's title.\n   */\n  getTitle() {}\n\n  /**\n   * Schedule a command to find an element on the page. If the element cannot be\n   * found, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned\n   * by the driver. Unlike other commands, this error cannot be suppressed. In\n   * other words, scheduling a command to find an element doubles as an assert\n   * that the element is present on the page. To test whether an element is\n   * present on the page, use {@link #findElements}:\n   *\n   *     driver.findElements(By.id('foo'))\n   *         .then(found => console.log('Element found? %s', !!found.length));\n   *\n   * The search criteria for an element may be defined using one of the\n   * factories in the {@link webdriver.By} namespace, or as a short-hand\n   * {@link webdriver.By.Hash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = driver.findElement(By.id('foo'));\n   *     var e2 = driver.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = driver.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(driver) {\n   *       var links = driver.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {}\n\n  /**\n   * Schedule a command to search for multiple elements on the page.\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A\n   *     promise that will resolve to an array of WebElements.\n   */\n  findElements(locator) {}\n\n  /**\n   * Schedule a command to take a screenshot. The driver makes a best effort to\n   * return a screenshot of the following, in order of preference:\n   *\n   * 1. Entire page\n   * 2. Current window\n   * 3. Visible portion of the current frame\n   * 4. The entire display containing the browser\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot() {}\n\n  /**\n   * @return {!Options} The options interface for this instance.\n   */\n  manage() {}\n\n  /**\n   * @return {!Navigation} The navigation interface for this instance.\n   */\n  navigate() {}\n\n  /**\n   * @return {!TargetLocator} The target locator interface for this\n   *     instance.\n   */\n  switchTo() {}\n}\n\n\n/**\n * Each WebDriver instance provides automated control over a browser session.\n *\n * @implements {IWebDriver}\n */\nclass WebDriver {\n  /**\n   * @param {!(Session|IThenable<!Session>)} session Either a known session or a\n   *     promise that will be resolved to a session.\n   * @param {!command.Executor} executor The executor to use when sending\n   *     commands to the browser.\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @param {(function(this: void): ?)=} opt_onQuit A function to call, if any,\n   *     when the session is terminated.\n   */\n  constructor(session, executor, opt_flow, opt_onQuit) {\n    /** @private {!promise.ControlFlow} */\n    this.flow_ = opt_flow || promise.controlFlow();\n\n    /** @private {!promise.Thenable<!Session>} */\n    this.session_ = this.flow_.promise(resolve => resolve(session));\n\n    /** @private {!command.Executor} */\n    this.executor_ = executor;\n\n    /** @private {input.FileDetector} */\n    this.fileDetector_ = null;\n\n    /** @private @const {(function(this: void): ?|undefined)} */\n    this.onQuit_ = opt_onQuit;\n  }\n\n  /**\n   * Creates a new WebDriver client for an existing session.\n   * @param {!command.Executor} executor Command executor to use when querying\n   *     for session details.\n   * @param {string} sessionId ID of the session to attach to.\n   * @param {promise.ControlFlow=} opt_flow The control flow all\n   *     driver commands should execute under. Defaults to the\n   *     {@link promise.controlFlow() currently active}  control flow.\n   * @return {!WebDriver} A new client for the specified session.\n   */\n  static attachToSession(executor, sessionId, opt_flow) {\n    let flow = opt_flow || promise.controlFlow();\n    let cmd = new command.Command(command.Name.DESCRIBE_SESSION)\n        .setParameter('sessionId', sessionId);\n    let session = flow.execute(\n        () => executeCommand(executor, cmd).catch(err => {\n          // The DESCRIBE_SESSION command is not supported by the W3C spec, so\n          // if we get back an unknown command, just return a session with\n          // unknown capabilities.\n          if (err instanceof error.UnknownCommandError) {\n            return new Session(sessionId, new Capabilities);\n          }\n          throw err;\n        }),\n        'WebDriver.attachToSession()');\n    return new WebDriver(session, executor, flow);\n  }\n\n  /**\n   * Creates a new WebDriver session.\n   *\n   * By default, the requested session `capabilities` are merely \"desired\" and\n   * the remote end will still create a new session even if it cannot satisfy\n   * all of the requested capabilities. You can query which capabilities a\n   * session actually has using the\n   * {@linkplain #getCapabilities() getCapabilities()} method on the returned\n   * WebDriver instance.\n   *\n   * To define _required capabilities_, provide the `capabilities` as an object\n   * literal with `required` and `desired` keys. The `desired` key may be\n   * omitted if all capabilities are required, and vice versa. If the server\n   * cannot create a session with all of the required capabilities, it will\n   * return an {@linkplain error.SessionNotCreatedError}.\n   *\n   *     let required = new Capabilities().set('browserName', 'firefox');\n   *     let desired = new Capabilities().set('version', '45');\n   *     let driver = WebDriver.createSession(executor, {required, desired});\n   *\n   * This function will always return a WebDriver instance. If there is an error\n   * creating the session, such as the aforementioned SessionNotCreatedError,\n   * the driver will have a rejected {@linkplain #getSession session} promise.\n   * It is recommended that this promise is left _unhandled_ so it will\n   * propagate through the {@linkplain promise.ControlFlow control flow} and\n   * cause subsequent commands to fail.\n   *\n   *     let required = Capabilities.firefox();\n   *     let driver = WebDriver.createSession(executor, {required});\n   *\n   *     // If the createSession operation failed, then this command will also\n   *     // also fail, propagating the creation failure.\n   *     driver.get('http://www.google.com').catch(e => console.log(e));\n   *\n   * @param {!command.Executor} executor The executor to create the new session\n   *     with.\n   * @param {(!Capabilities|\n   *          {desired: (Capabilities|undefined),\n   *           required: (Capabilities|undefined)})} capabilities The desired\n   *     capabilities for the new session.\n   * @param {promise.ControlFlow=} opt_flow The control flow all driver\n   *     commands should execute under, including the initial session creation.\n   *     Defaults to the {@link promise.controlFlow() currently active}\n   *     control flow.\n   * @param {(function(this: void): ?)=} opt_onQuit A callback to invoke when\n   *    the newly created session is terminated. This should be used to clean\n   *    up any resources associated with the session.\n   * @return {!WebDriver} The driver for the newly created session.\n   */\n  static createSession(executor, capabilities, opt_flow, opt_onQuit) {\n    let flow = opt_flow || promise.controlFlow();\n    let cmd = new command.Command(command.Name.NEW_SESSION);\n\n    if (capabilities && (capabilities.desired || capabilities.required)) {\n      cmd.setParameter('desiredCapabilities', capabilities.desired);\n      cmd.setParameter('requiredCapabilities', capabilities.required);\n    } else {\n      cmd.setParameter('desiredCapabilities', capabilities);\n    }\n\n    let session = flow.execute(\n        () => executeCommand(executor, cmd),\n        'WebDriver.createSession()');\n    if (typeof opt_onQuit === 'function') {\n      session = session.catch(err => {\n        return Promise.resolve(opt_onQuit.call(void 0)).then(_ => {throw err;});\n      });\n    }\n    return new this(session, executor, flow, opt_onQuit);\n  }\n\n  /** @override */\n  controlFlow() {\n    return this.flow_;\n  }\n\n  /** @override */\n  schedule(command, description) {\n    command.setParameter('sessionId', this.session_);\n\n    // If any of the command parameters are rejected promises, those\n    // rejections may be reported as unhandled before the control flow\n    // attempts to execute the command. To ensure parameters errors\n    // propagate through the command itself, we resolve all of the\n    // command parameters now, but suppress any errors until the ControlFlow\n    // actually executes the command. This addresses scenarios like catching\n    // an element not found error in:\n    //\n    //     driver.findElement(By.id('foo')).click().catch(function(e) {\n    //       if (e instanceof NoSuchElementError) {\n    //         // Do something.\n    //       }\n    //     });\n    var prepCommand = toWireValue(command.getParameters());\n    prepCommand.catch(function() {});\n\n    var flow = this.flow_;\n    var executor = this.executor_;\n    return flow.execute(() => {\n      // Retrieve resolved command parameters; any previously suppressed errors\n      // will now propagate up through the control flow as part of the command\n      // execution.\n      return prepCommand.then(function(parameters) {\n        command.setParameters(parameters);\n        return executor.execute(command);\n      }).then(value => fromWireValue(this, value));\n    }, description);\n  }\n\n  /** @override */\n  setFileDetector(detector) {\n    this.fileDetector_ = detector;\n  }\n\n  /** @override */\n  getExecutor() {\n    return this.executor_;\n  }\n\n  /** @override */\n  getSession() {\n    return this.session_;\n  }\n\n  /** @override */\n  getCapabilities() {\n    return this.session_.then(s => s.getCapabilities());\n  }\n\n  /** @override */\n  quit() {\n    var result = this.schedule(\n        new command.Command(command.Name.QUIT),\n        'WebDriver.quit()');\n    // Delete our session ID when the quit command finishes; this will allow us\n    // to throw an error when attempting to use a driver post-quit.\n    return /** @type {!promise.Thenable} */(promise.finally(result, () => {\n      this.session_ = this.flow_.promise((_, reject) => {\n        reject(new error.NoSuchSessionError(\n            'This driver instance does not have a valid session ID ' +\n            '(did you call WebDriver.quit()?) and may no longer be used.'));\n      });\n\n      // Only want the session rejection to bubble if accessed.\n      this.session_.catch(function() {});\n\n      if (this.onQuit_) {\n        return this.onQuit_.call(void 0);\n      }\n    }));\n  }\n\n  /** @override */\n  actions() {\n    return new actions.ActionSequence(this);\n  }\n\n  /** @override */\n  touchActions() {\n    return new actions.TouchSequence(this);\n  }\n\n  /** @override */\n  executeScript(script, var_args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n    let args =\n        arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];\n   return this.schedule(\n        new command.Command(command.Name.EXECUTE_SCRIPT).\n            setParameter('script', script).\n            setParameter('args', args),\n        'WebDriver.executeScript()');\n  }\n\n  /** @override */\n  executeAsyncScript(script, var_args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n    let args = Array.prototype.slice.call(arguments, 1);\n    return this.schedule(\n        new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).\n            setParameter('script', script).\n            setParameter('args', args),\n        'WebDriver.executeScript()');\n  }\n\n  /** @override */\n  call(fn, opt_scope, var_args) {\n    let args = Array.prototype.slice.call(arguments, 2);\n    return this.flow_.execute(function() {\n      return promise.fullyResolved(args).then(function(args) {\n        if (promise.isGenerator(fn)) {\n          args.unshift(fn, opt_scope);\n          return promise.consume.apply(null, args);\n        }\n        return fn.apply(opt_scope, args);\n      });\n    }, 'WebDriver.call(' + (fn.name || 'function') + ')');\n  }\n\n  /** @override */\n  wait(condition, opt_timeout, opt_message) {\n    if (promise.isPromise(condition)) {\n      return this.flow_.wait(\n          /** @type {!IThenable} */(condition),\n          opt_timeout, opt_message);\n    }\n\n    var message = opt_message;\n    var fn = /** @type {!Function} */(condition);\n    if (condition instanceof Condition) {\n      message = message || condition.description();\n      fn = condition.fn;\n    }\n\n    if (typeof fn !== 'function') {\n      throw TypeError(\n          'Wait condition must be a promise-like object, function, or a '\n              + 'Condition object');\n    }\n\n    var driver = this;\n    var result = this.flow_.wait(function() {\n      if (promise.isGenerator(fn)) {\n        return promise.consume(fn, null, [driver]);\n      }\n      return fn(driver);\n    }, opt_timeout, message);\n\n    if (condition instanceof WebElementCondition) {\n      result = new WebElementPromise(this, result.then(function(value) {\n        if (!(value instanceof WebElement)) {\n          throw TypeError(\n              'WebElementCondition did not resolve to a WebElement: '\n                  + Object.prototype.toString.call(value));\n        }\n        return value;\n      }));\n    }\n    return result;\n  }\n\n  /** @override */\n  sleep(ms) {\n    return this.flow_.timeout(ms, 'WebDriver.sleep(' + ms + ')');\n  }\n\n  /** @override */\n  getWindowHandle() {\n    return this.schedule(\n        new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE),\n        'WebDriver.getWindowHandle()');\n  }\n\n  /** @override */\n  getAllWindowHandles() {\n    return this.schedule(\n        new command.Command(command.Name.GET_WINDOW_HANDLES),\n        'WebDriver.getAllWindowHandles()');\n  }\n\n  /** @override */\n  getPageSource() {\n    return this.schedule(\n        new command.Command(command.Name.GET_PAGE_SOURCE),\n        'WebDriver.getPageSource()');\n  }\n\n  /** @override */\n  close() {\n    return this.schedule(new command.Command(command.Name.CLOSE),\n                         'WebDriver.close()');\n  }\n\n  /** @override */\n  get(url) {\n    return this.navigate().to(url);\n  }\n\n  /** @override */\n  getCurrentUrl() {\n    return this.schedule(\n        new command.Command(command.Name.GET_CURRENT_URL),\n        'WebDriver.getCurrentUrl()');\n  }\n\n  /** @override */\n  getTitle() {\n    return this.schedule(new command.Command(command.Name.GET_TITLE),\n                         'WebDriver.getTitle()');\n  }\n\n  /** @override */\n  findElement(locator) {\n    let id;\n    locator = by.checkedLocator(locator);\n    if (typeof locator === 'function') {\n      id = this.findElementInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENT).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      id = this.schedule(cmd, 'WebDriver.findElement(' + locator + ')');\n    }\n    return new WebElementPromise(this, id);\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search\n   *     context.\n   * @return {!promise.Thenable<!WebElement>} A\n   *     promise that will resolve to a list of WebElements.\n   * @private\n   */\n  findElementInternal_(locatorFn, context) {\n    return this.call(() => locatorFn(context)).then(function(result) {\n      if (Array.isArray(result)) {\n        result = result[0];\n      }\n      if (!(result instanceof WebElement)) {\n        throw new TypeError('Custom locator did not return a WebElement');\n      }\n      return result;\n    });\n  }\n\n  /** @override */\n  findElements(locator) {\n    locator = by.checkedLocator(locator);\n    if (typeof locator === 'function') {\n      return this.findElementsInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENTS).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      return this.schedule(cmd, 'WebDriver.findElements(' + locator + ')')\n          .then(\n              (res) => Array.isArray(res) ? res : [],\n              (e) =>  {\n                if (e instanceof error.NoSuchElementError) {\n                  return [];\n                }\n                throw e;\n              });\n    }\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search context.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A promise that\n   *     will resolve to an array of WebElements.\n   * @private\n   */\n  findElementsInternal_(locatorFn, context) {\n    return this.call(() => locatorFn(context)).then(function(result) {\n      if (result instanceof WebElement) {\n        return [result];\n      }\n\n      if (!Array.isArray(result)) {\n        return [];\n      }\n\n      return result.filter(function(item) {\n        return item instanceof WebElement;\n      });\n    });\n  }\n\n  /** @override */\n  takeScreenshot() {\n    return this.schedule(new command.Command(command.Name.SCREENSHOT),\n        'WebDriver.takeScreenshot()');\n  }\n\n  /** @override */\n  manage() {\n    return new Options(this);\n  }\n\n  /** @override */\n  navigate() {\n    return new Navigation(this);\n  }\n\n  /** @override */\n  switchTo() {\n    return new TargetLocator(this);\n  }\n}\n\n\n/**\n * Interface for navigating back and forth in the browser history.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.navigate()\n *\n * @see WebDriver#navigate()\n */\nclass Navigation {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command to navigate to a new URL.\n   * @param {string} url The URL to navigate to.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the URL has been loaded.\n   */\n  to(url) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET).\n            setParameter('url', url),\n        'WebDriver.navigate().to(' + url + ')');\n  }\n\n  /**\n   * Schedules a command to move backwards in the browser history.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  back() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GO_BACK),\n        'WebDriver.navigate().back()');\n  }\n\n  /**\n   * Schedules a command to move forwards in the browser history.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  forward() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GO_FORWARD),\n        'WebDriver.navigate().forward()');\n  }\n\n  /**\n   * Schedules a command to refresh the current page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  refresh() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.REFRESH),\n        'WebDriver.navigate().refresh()');\n  }\n}\n\n\n/**\n * Provides methods for managing browser and driver state.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with {@linkplain WebDriver#manage() webdriver.manage()}.\n */\nclass Options {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command to add a cookie.\n   *\n   * __Sample Usage:__\n   *\n   *     // Set a basic cookie.\n   *     driver.manage().addCookie({name: 'foo', value: 'bar'});\n   *\n   *     // Set a cookie that expires in 10 minutes.\n   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));\n   *     driver.manage().addCookie({name: 'foo', value: 'bar', expiry});\n   *\n   *     // The cookie expiration may also be specified in seconds since epoch.\n   *     driver.manage().addCookie({\n   *       name: 'foo',\n   *       value: 'bar',\n   *       expiry: Math.floor(Date.now() / 1000)\n   *     });\n   *\n   * @param {!Options.Cookie} spec Defines the cookie to add.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the cookie has been added to the page.\n   * @throws {error.InvalidArgumentError} if any of the cookie parameters are\n   *     invalid.\n   * @throws {TypeError} if `spec` is not a cookie object.\n   */\n  addCookie({name, value, path, domain, secure, httpOnly, expiry}) {\n    // We do not allow '=' or ';' in the name.\n    if (/[;=]/.test(name)) {\n      throw new error.InvalidArgumentError(\n          'Invalid cookie name \"' + name + '\"');\n    }\n\n    // We do not allow ';' in value.\n    if (/;/.test(value)) {\n      throw new error.InvalidArgumentError(\n          'Invalid cookie value \"' + value + '\"');\n    }\n\n    let cookieString = name + '=' + value +\n        (domain ? ';domain=' + domain : '') +\n        (path ? ';path=' + path : '') +\n        (secure ? ';secure' : '');\n\n    if (typeof expiry === 'number') {\n      expiry = Math.floor(expiry);\n      cookieString += ';expires=' + new Date(expiry * 1000).toUTCString();\n    } else if (expiry instanceof Date) {\n      let date = /** @type {!Date} */(expiry);\n      expiry = Math.floor(date.getTime() / 1000);\n      cookieString += ';expires=' + date.toUTCString();\n    }\n\n    return this.driver_.schedule(\n        new command.Command(command.Name.ADD_COOKIE).\n            setParameter('cookie', {\n              'name': name,\n              'value': value,\n              'path': path,\n              'domain': domain,\n              'secure': !!secure,\n              'httpOnly': !!httpOnly,\n              'expiry': expiry\n            }),\n        'WebDriver.manage().addCookie(' + cookieString + ')');\n  }\n\n  /**\n   * Schedules a command to delete all cookies visible to the current page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when all cookies have been deleted.\n   */\n  deleteAllCookies() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DELETE_ALL_COOKIES),\n        'WebDriver.manage().deleteAllCookies()');\n  }\n\n  /**\n   * Schedules a command to delete the cookie with the given name. This command\n   * is a no-op if there is no cookie with the given name visible to the current\n   * page.\n   * @param {string} name The name of the cookie to delete.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the cookie has been deleted.\n   */\n  deleteCookie(name) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DELETE_COOKIE).\n            setParameter('name', name),\n        'WebDriver.manage().deleteCookie(' + name + ')');\n  }\n\n  /**\n   * Schedules a command to retrieve all cookies visible to the current page.\n   * Each cookie will be returned as a JSON object as described by the WebDriver\n   * wire protocol.\n   * @return {!promise.Thenable<!Array<!Options.Cookie>>} A promise that will be\n   *     resolved with the cookies visible to the current browsing context.\n   */\n  getCookies() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_ALL_COOKIES),\n        'WebDriver.manage().getCookies()');\n  }\n\n  /**\n   * Schedules a command to retrieve the cookie with the given name. Returns null\n   * if there is no such cookie. The cookie will be returned as a JSON object as\n   * described by the WebDriver wire protocol.\n   *\n   * @param {string} name The name of the cookie to retrieve.\n   * @return {!promise.Thenable<?Options.Cookie>} A promise that will be resolved\n   *     with the named cookie, or `null` if there is no such cookie.\n   */\n  getCookie(name) {\n    return this.getCookies().then(function(cookies) {\n      for (let cookie of cookies) {\n        if (cookie && cookie['name'] === name) {\n          return cookie;\n        }\n      }\n      return null;\n    });\n  }\n\n  /**\n   * Schedules a command to fetch the timeouts currently configured for the\n   * current session.\n   *\n   * @return {!promise.Thenable<{script: number,\n   *                             pageLoad: number,\n   *                             implicit: number}>} A promise that will be\n   *     resolved with the timeouts currently configured for the current\n   *     session.\n   * @see #setTimeouts()\n   */\n  getTimeouts() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_TIMEOUT),\n        `WebDriver.manage().getTimeouts()`)\n  }\n\n  /**\n   * Schedules a command to set timeout durations associated with the current\n   * session.\n   *\n   * The following timeouts are supported (all timeouts are specified in\n   * milliseconds):\n   *\n   * -  `implicit` specifies the maximum amount of time to wait for an element\n   *    locator to succeed when {@linkplain WebDriver#findElement locating}\n   *    {@linkplain WebDriver#findElements elements} on the page.\n   *    Defaults to 0 milliseconds.\n   *\n   * -  `pageLoad` specifies the maximum amount of time to wait for a page to\n   *    finishing loading. Defaults to 300000 milliseconds.\n   *\n   * -  `script` specifies the maximum amount of time to wait for an\n   *    {@linkplain WebDriver#executeScript evaluated script} to run. If set to\n   *    `null`, the script timeout will be indefinite.\n   *    Defaults to 30000 milliseconds.\n   *\n   * @param {{script: (number|null|undefined),\n   *          pageLoad: (number|null|undefined),\n   *          implicit: (number|null|undefined)}} conf\n   *     The desired timeout configuration.\n   * @return {!promise.Thenable<void>} A promise that will be resolved when the\n   *     timeouts have been set.\n   * @throws {!TypeError} if an invalid options object is provided.\n   * @see #getTimeouts()\n   * @see <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeouts>\n   */\n  setTimeouts({script, pageLoad, implicit} = {}) {\n    let cmd = new command.Command(command.Name.SET_TIMEOUT);\n\n    let valid = false;\n    function setParam(key, value) {\n      if (value === null || typeof value === 'number') {\n        valid = true;\n        cmd.setParameter(key, value);\n      } else if (typeof value !== 'undefined') {\n        throw TypeError(\n            'invalid timeouts configuration:'\n                + ` expected \"${key}\" to be a number, got ${typeof value}`);\n      }\n    }\n    setParam('implicit', implicit);\n    setParam('pageLoad', pageLoad);\n    setParam('script', script);\n\n    if (valid) {\n      return this.driver_.schedule(cmd, `WebDriver.manage().setTimeouts()`)\n          .catch(() => {\n            // Fallback to the legacy method.\n            let cmds = [];\n            if (typeof script === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'script', script));\n            }\n            if (typeof implicit === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'implicit', implicit));\n            }\n            if (typeof pageLoad === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'page load', pageLoad));\n            }\n            return Promise.all(cmds);\n          });\n    }\n    throw TypeError('no timeouts specified');\n  }\n\n  /**\n   * @return {!Logs} The interface for managing driver\n   *     logs.\n   */\n  logs() {\n    return new Logs(this.driver_);\n  }\n\n  /**\n   * @return {!Timeouts} The interface for managing driver timeouts.\n   * @deprecated Use {@link #setTimeouts()} instead.\n   */\n  timeouts() {\n    return new Timeouts(this.driver_);\n  }\n\n  /**\n   * @return {!Window} The interface for managing the current window.\n   */\n  window() {\n    return new Window(this.driver_);\n  }\n}\n\n\n/**\n * @param {!WebDriver} driver\n * @param {string} type\n * @param {number} ms\n * @return {!promise.Thenable<void>}\n */\nfunction legacyTimeout(driver, type, ms) {\n  return driver.schedule(\n      new command.Command(command.Name.SET_TIMEOUT)\n          .setParameter('type', type)\n          .setParameter('ms', ms),\n      `WebDriver.manage().setTimeouts({${type}: ${ms}})`);\n}\n\n\n\n/**\n * A record object describing a browser cookie.\n *\n * @record\n */\nOptions.Cookie = function() {};\n\n\n/**\n * The name of the cookie.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.name;\n\n\n/**\n * The cookie value.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.value;\n\n\n/**\n * The cookie path. Defaults to \"/\" when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.path;\n\n\n/**\n * The domain the cookie is visible to. Defaults to the current browsing\n * context's document's URL when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.domain;\n\n\n/**\n * Whether the cookie is a secure cookie. Defaults to false when adding a new\n * cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.secure;\n\n\n/**\n * Whether the cookie is an HTTP only cookie. Defaults to false when adding a\n * new cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.httpOnly;\n\n\n/**\n * When the cookie expires.\n *\n * When {@linkplain Options#addCookie() adding a cookie}, this may be specified\n * as a {@link Date} object, or in _seconds_ since Unix epoch (January 1, 1970).\n *\n * The expiry is always returned in seconds since epoch when\n * {@linkplain Options#getCookies() retrieving cookies} from the browser.\n *\n * @type {(!Date|number|undefined)}\n */\nOptions.Cookie.prototype.expiry;\n\n\n/**\n * An interface for managing timeout behavior for WebDriver instances.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().timeouts()\n *\n * @deprecated This has been deprecated in favor of\n *     {@link Options#setTimeouts()}, which supports setting multiple timeouts\n *     at once.\n * @see WebDriver#manage()\n * @see Options#timeouts()\n */\nclass Timeouts {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Specifies the amount of time the driver should wait when searching for an\n   * element if it is not immediately present.\n   *\n   * When searching for a single element, the driver should poll the page\n   * until the element has been found, or this timeout expires before failing\n   * with a {@link bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching\n   * for multiple elements, the driver should poll the page until at least one\n   * element has been found or this timeout has expired.\n   *\n   * Setting the wait timeout to 0 (its default value), disables implicit\n   * waiting.\n   *\n   * Increasing the implicit wait timeout should be used judiciously as it\n   * will have an adverse effect on test run time, especially when used with\n   * slower location strategies like XPath.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the implicit wait timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({implicit: ms})}.\n   */\n  implicitlyWait(ms) {\n    return this.driver_.manage().setTimeouts({implicit: ms});\n  }\n\n  /**\n   * Sets the amount of time to wait, in milliseconds, for an asynchronous\n   * script to finish execution before returning an error. If the timeout is\n   * less than or equal to 0, the script will be allowed to run indefinitely.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the script timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({script: ms})}.\n   */\n  setScriptTimeout(ms) {\n    return this.driver_.manage().setTimeouts({script: ms});\n  }\n\n  /**\n   * Sets the amount of time to wait for a page load to complete before\n   * returning an error.  If the timeout is negative, page loads may be\n   * indefinite.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({pageLoad: ms})}.\n   */\n  pageLoadTimeout(ms) {\n    return this.driver_.manage().setTimeouts({pageLoad: ms});\n  }\n}\n\n\n/**\n * An interface for managing the current window.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().window()\n *\n * @see WebDriver#manage()\n * @see Options#window()\n */\nclass Window {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Retrieves the window's current position, relative to the top left corner of\n   * the screen.\n   * @return {!promise.Thenable<{x: number, y: number}>} A promise\n   *     that will be resolved with the window's position in the form of a\n   *     {x:number, y:number} object literal.\n   */\n  getPosition() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_WINDOW_POSITION).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().getPosition()');\n  }\n\n  /**\n   * Repositions the current window.\n   * @param {number} x The desired horizontal position, relative to the left\n   *     side of the screen.\n   * @param {number} y The desired vertical position, relative to the top of the\n   *     of the screen.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  setPosition(x, y) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_WINDOW_POSITION).\n            setParameter('windowHandle', 'current').\n            setParameter('x', x).\n            setParameter('y', y),\n        'WebDriver.manage().window().setPosition(' + x + ', ' + y + ')');\n  }\n\n  /**\n   * Retrieves the window's current size.\n   * @return {!promise.Thenable<{width: number, height: number}>} A\n   *     promise that will be resolved with the window's size in the form of a\n   *     {width:number, height:number} object literal.\n   */\n  getSize() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_WINDOW_SIZE).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().getSize()');\n  }\n\n  /**\n   * Resizes the current window.\n   * @param {number} width The desired window width.\n   * @param {number} height The desired window height.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  setSize(width, height) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_WINDOW_SIZE).\n            setParameter('windowHandle', 'current').\n            setParameter('width', width).\n            setParameter('height', height),\n        'WebDriver.manage().window().setSize(' + width + ', ' + height + ')');\n  }\n\n  /**\n   * Maximizes the current window.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  maximize() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.MAXIMIZE_WINDOW).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().maximize()');\n  }\n}\n\n\n/**\n * Interface for managing WebDriver log records.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.manage().logs()\n *\n * @see WebDriver#manage()\n * @see Options#logs()\n */\nclass Logs {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Fetches available log entries for the given type.\n   *\n   * Note that log buffers are reset after each call, meaning that available\n   * log entries correspond to those entries not yet returned for a given log\n   * type. In practice, this means that this call will return the available log\n   * entries since the last call, or from the start of the session.\n   *\n   * @param {!logging.Type} type The desired log type.\n   * @return {!promise.Thenable<!Array.<!logging.Entry>>} A\n   *   promise that will resolve to a list of log entries for the specified\n   *   type.\n   */\n  get(type) {\n    let cmd = new command.Command(command.Name.GET_LOG).\n        setParameter('type', type);\n    return this.driver_.schedule(\n        cmd, 'WebDriver.manage().logs().get(' + type + ')').\n        then(function(entries) {\n          return entries.map(function(entry) {\n            if (!(entry instanceof logging.Entry)) {\n              return new logging.Entry(\n                  entry['level'], entry['message'], entry['timestamp'],\n                  entry['type']);\n            }\n            return entry;\n          });\n        });\n  }\n\n  /**\n   * Retrieves the log types available to this driver.\n   * @return {!promise.Thenable<!Array<!logging.Type>>} A\n   *     promise that will resolve to a list of available log types.\n   */\n  getAvailableLogTypes() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES),\n        'WebDriver.manage().logs().getAvailableLogTypes()');\n  }\n}\n\n\n/**\n * An interface for changing the focus of the driver to another frame or window.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.switchTo()\n *\n * @see WebDriver#switchTo()\n */\nclass TargetLocator {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command retrieve the {@code document.activeElement} element on\n   * the current document, or {@code document.body} if activeElement is not\n   * available.\n   * @return {!WebElementPromise} The active element.\n   */\n  activeElement() {\n    var id = this.driver_.schedule(\n        new command.Command(command.Name.GET_ACTIVE_ELEMENT),\n        'WebDriver.switchTo().activeElement()');\n    return new WebElementPromise(this.driver_, id);\n  }\n\n  /**\n   * Schedules a command to switch focus of all future commands to the topmost\n   * frame on the page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the default content.\n   */\n  defaultContent() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_FRAME).\n            setParameter('id', null),\n        'WebDriver.switchTo().defaultContent()');\n  }\n\n  /**\n   * Schedules a command to switch the focus of all future commands to another\n   * frame on the page. The target frame may be specified as one of the\n   * following:\n   *\n   * - A number that specifies a (zero-based) index into [window.frames](\n   *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).\n   * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`\n   *   DOM element.\n   * - The `null` value, to select the topmost frame on the page. Passing `null`\n   *   is the same as calling {@link #defaultContent defaultContent()}.\n   *\n   * If the specified frame can not be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchFrameError}.\n   *\n   * @param {(number|WebElement|null)} id The frame locator.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified frame.\n   */\n  frame(id) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_FRAME).\n            setParameter('id', id),\n        'WebDriver.switchTo().frame(' + id + ')');\n  }\n\n  /**\n   * Schedules a command to switch the focus of all future commands to another\n   * window. Windows may be specified by their {@code window.name} attribute or\n   * by its handle (as returned by {@link WebDriver#getWindowHandles}).\n   *\n   * If the specified window cannot be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchWindowError}.\n   *\n   * @param {string} nameOrHandle The name or window handle of the window to\n   *     switch focus to.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified window.\n   */\n  window(nameOrHandle) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_WINDOW).\n            // \"name\" supports the legacy drivers. \"handle\" is the W3C\n            // compliant parameter.\n            setParameter('name', nameOrHandle).\n            setParameter('handle', nameOrHandle),\n        'WebDriver.switchTo().window(' + nameOrHandle + ')');\n  }\n\n  /**\n   * Schedules a command to change focus to the active modal dialog, such as\n   * those opened by `window.alert()`, `window.confirm()`, and\n   * `window.prompt()`. The returned promise will be rejected with a\n   * {@linkplain error.NoSuchAlertError} if there are no open alerts.\n   *\n   * @return {!AlertPromise} The open alert.\n   */\n  alert() {\n    var text = this.driver_.schedule(\n        new command.Command(command.Name.GET_ALERT_TEXT),\n        'WebDriver.switchTo().alert()');\n    var driver = this.driver_;\n    return new AlertPromise(driver, text.then(function(text) {\n      return new Alert(driver, text);\n    }));\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebElement\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT';\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';\n\n\n/**\n * Represents a DOM element. WebElements can be found by searching from the\n * document root using a {@link WebDriver} instance, or by searching\n * under another WebElement:\n *\n *     driver.get('http://www.google.com');\n *     var searchForm = driver.findElement(By.tagName('form'));\n *     var searchBox = searchForm.findElement(By.name('q'));\n *     searchBox.sendKeys('webdriver');\n */\nclass WebElement {\n  /**\n   * @param {!WebDriver} driver the parent WebDriver instance for this element.\n   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for\n   *     the underlying DOM element.\n   */\n  constructor(driver, id) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!promise.Thenable<string>} */\n    this.id_ = driver.controlFlow().promise(resolve => resolve(id));\n  }\n\n  /**\n   * @param {string} id The raw ID.\n   * @param {boolean=} opt_noLegacy Whether to exclude the legacy element key.\n   * @return {!Object} The element ID for use with WebDriver's wire protocol.\n   */\n  static buildId(id, opt_noLegacy) {\n    return opt_noLegacy\n        ? {[ELEMENT_ID_KEY]: id}\n        : {[ELEMENT_ID_KEY]: id, [LEGACY_ELEMENT_ID_KEY]: id};\n  }\n\n  /**\n   * Extracts the encoded WebElement ID from the object.\n   *\n   * @param {?} obj The object to extract the ID from.\n   * @return {string} the extracted ID.\n   * @throws {TypeError} if the object is not a valid encoded ID.\n   */\n  static extractId(obj) {\n    if (obj && typeof obj === 'object') {\n      if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n        return obj[ELEMENT_ID_KEY];\n      } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n        return obj[LEGACY_ELEMENT_ID_KEY];\n      }\n    }\n    throw new TypeError('object is not a WebElement ID');\n  }\n\n  /**\n   * @param {?} obj the object to test.\n   * @return {boolean} whether the object is a valid encoded WebElement ID.\n   */\n  static isId(obj) {\n    return obj && typeof obj === 'object'\n        && (typeof obj[ELEMENT_ID_KEY] === 'string'\n            || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');\n  }\n\n  /**\n   * Compares two WebElements for equality.\n   *\n   * @param {!WebElement} a A WebElement.\n   * @param {!WebElement} b A WebElement.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved to whether the two WebElements are equal.\n   */\n  static equals(a, b) {\n    if (a === b) {\n      return a.driver_.controlFlow().promise(resolve => resolve(true));\n    }\n    let ids = [a.getId(), b.getId()];\n    return promise.all(ids).then(function(ids) {\n      // If the two element's have the same ID, they should be considered\n      // equal. Otherwise, they may still be equivalent, but we'll need to\n      // ask the server to check for us.\n      if (ids[0] === ids[1]) {\n        return true;\n      }\n\n      let cmd = new command.Command(command.Name.ELEMENT_EQUALS);\n      cmd.setParameter('id', ids[0]);\n      cmd.setParameter('other', ids[1]);\n      return a.driver_.schedule(cmd, 'WebElement.equals()');\n    });\n  }\n\n  /** @return {!WebDriver} The parent driver for this instance. */\n  getDriver() {\n    return this.driver_;\n  }\n\n  /**\n   * @return {!promise.Thenable<string>} A promise that resolves to\n   *     the server-assigned opaque ID assigned to this element.\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * @return {!Object} Returns the serialized representation of this WebElement.\n   */\n  [Symbols.serialize]() {\n    return this.getId().then(WebElement.buildId);\n  }\n\n  /**\n   * Schedules a command that targets this element with the parent WebDriver\n   * instance. Will ensure this element's ID is included in the command\n   * parameters under the \"id\" key.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @param {string} description A description of the command for debugging.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     with the command result.\n   * @template T\n   * @see WebDriver#schedule\n   * @private\n   */\n  schedule_(command, description) {\n    command.setParameter('id', this);\n    return this.driver_.schedule(command, description);\n  }\n\n  /**\n   * Schedule a command to find a descendant of this element. If the element\n   * cannot be found, the returned promise will be rejected with a\n   * {@linkplain error.NoSuchElementError NoSuchElementError}.\n   *\n   * The search criteria for an element may be defined using one of the static\n   * factories on the {@link by.By} class, or as a short-hand\n   * {@link ./by.ByHash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = element.findElement(By.id('foo'));\n   *     var e2 = element.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = element.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(element) {\n   *       var links = element.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {\n    locator = by.checkedLocator(locator);\n    let id;\n    if (typeof locator === 'function') {\n      id = this.driver_.findElementInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(\n          command.Name.FIND_CHILD_ELEMENT).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      id = this.schedule_(cmd, 'WebElement.findElement(' + locator + ')');\n    }\n    return new WebElementPromise(this.driver_, id);\n  }\n\n  /**\n   * Schedules a command to find all of the descendants of this element that\n   * match the given search criteria.\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A\n   *     promise that will resolve to an array of WebElements.\n   */\n  findElements(locator) {\n    locator = by.checkedLocator(locator);\n    let id;\n    if (typeof locator === 'function') {\n      return this.driver_.findElementsInternal_(locator, this);\n    } else {\n      var cmd = new command.Command(\n          command.Name.FIND_CHILD_ELEMENTS).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      return this.schedule_(cmd, 'WebElement.findElements(' + locator + ')')\n          .then(result => Array.isArray(result) ? result : []);\n    }\n  }\n\n  /**\n   * Schedules a command to click on this element.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the click command has completed.\n   */\n  click() {\n    return this.schedule_(\n        new command.Command(command.Name.CLICK_ELEMENT),\n        'WebElement.click()');\n  }\n\n  /**\n   * Schedules a command to type a sequence on the DOM element represented by\n   * this instance.\n   *\n   * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is\n   * processed in the key sequence, that key state is toggled until one of the\n   * following occurs:\n   *\n   * - The modifier key is encountered again in the sequence. At this point the\n   *   state of the key is toggled (along with the appropriate keyup/down\n   *   events).\n   * - The {@link input.Key.NULL} key is encountered in the sequence. When\n   *   this key is encountered, all modifier keys current in the down state are\n   *   released (with accompanying keyup events). The NULL key can be used to\n   *   simulate common keyboard shortcuts:\n   *\n   *         element.sendKeys(\"text was\",\n   *                          Key.CONTROL, \"a\", Key.NULL,\n   *                          \"now text is\");\n   *         // Alternatively:\n   *         element.sendKeys(\"text was\",\n   *                          Key.chord(Key.CONTROL, \"a\"),\n   *                          \"now text is\");\n   *\n   * - The end of the key sequence is encountered. When there are no more keys\n   *   to type, all depressed modifier keys are released (with accompanying\n   *   keyup events).\n   *\n   * If this element is a file input ({@code <input type=\"file\">}), the\n   * specified key sequence should specify the path to the file to attach to\n   * the element. This is analogous to the user clicking \"Browse...\" and entering\n   * the path into the file select dialog.\n   *\n   *     var form = driver.findElement(By.css('form'));\n   *     var element = form.findElement(By.css('input[type=file]'));\n   *     element.sendKeys('/path/to/file.txt');\n   *     form.submit();\n   *\n   * For uploads to function correctly, the entered path must reference a file\n   * on the _browser's_ machine, not the local machine running this script. When\n   * running against a remote Selenium server, a {@link input.FileDetector}\n   * may be used to transparently copy files to the remote machine before\n   * attempting to upload them in the browser.\n   *\n   * __Note:__ On browsers where native keyboard events are not supported\n   * (e.g. Firefox on OS X), key events will be synthesized. Special\n   * punctuation keys will be synthesized according to a standard QWERTY en-us\n   * keyboard layout.\n   *\n   * @param {...(number|string|!IThenable<(number|string)>)} var_args The\n   *     sequence of keys to type. Number keys may be referenced numerically or\n   *     by string (1 or '1'). All arguments will be joined into a single\n   *     sequence.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when all keys have been typed.\n   */\n  sendKeys(var_args) {\n    let keys = Promise.all(Array.prototype.slice.call(arguments, 0)).\n        then(keys => {\n          let ret = [];\n          keys.forEach(key => {\n            let type = typeof key;\n            if (type === 'number') {\n              key = String(key);\n            } else if (type !== 'string') {\n              throw TypeError(\n                  'each key must be a number of string; got ' + type);\n            }\n\n            // The W3C protocol requires keys to be specified as an array where\n            // each element is a single key.\n            ret.push.apply(ret, key.split(''));\n          });\n          return ret;\n        });\n\n    if (!this.driver_.fileDetector_) {\n      return this.schedule_(\n          new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).\n              setParameter('text', keys.then(keys => keys.join(''))).\n              setParameter('value', keys),\n          'WebElement.sendKeys()');\n    }\n\n    // Suppress unhandled rejection errors until the flow executes the command.\n    keys.catch(function() {});\n\n    var element = this;\n    return this.getDriver().controlFlow().execute(function() {\n      return keys.then(function(keys) {\n        return element.driver_.fileDetector_\n            .handleFile(element.driver_, keys.join(''));\n      }).then(function(keys) {\n        return element.schedule_(\n            new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).\n                setParameter('text', keys).\n                setParameter('value', keys.split('')),\n            'WebElement.sendKeys()');\n      });\n    }, 'WebElement.sendKeys()');\n  }\n\n  /**\n   * Schedules a command to query for the tag/node name of this element.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the element's tag name.\n   */\n  getTagName() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_TAG_NAME),\n        'WebElement.getTagName()');\n  }\n\n  /**\n   * Schedules a command to query for the computed style of the element\n   * represented by this instance. If the element inherits the named style from\n   * its parent, the parent will be queried for its value.  Where possible, color\n   * values will be converted to their hex representation (e.g. #00ff00 instead\n   * of rgb(0, 255, 0)).\n   *\n   * _Warning:_ the value returned will be as the browser interprets it, so\n   * it may be tricky to form a proper assertion.\n   *\n   * @param {string} cssStyleProperty The name of the CSS style property to look\n   *     up.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the requested CSS value.\n   */\n  getCssValue(cssStyleProperty) {\n    var name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY;\n    return this.schedule_(\n        new command.Command(name).\n            setParameter('propertyName', cssStyleProperty),\n        'WebElement.getCssValue(' + cssStyleProperty + ')');\n  }\n\n  /**\n   * Schedules a command to query for the value of the given attribute of the\n   * element. Will return the current value, even if it has been modified after\n   * the page has been loaded. More exactly, this method will return the value\n   * of the given attribute, unless that attribute is not present, in which case\n   * the value of the property with the same name is returned. If neither value\n   * is set, null is returned (for example, the \"value\" property of a textarea\n   * element). The \"style\" attribute is converted as best can be to a\n   * text representation with a trailing semi-colon. The following are deemed to\n   * be \"boolean\" attributes and will return either \"true\" or null:\n   *\n   * async, autofocus, autoplay, checked, compact, complete, controls, declare,\n   * defaultchecked, defaultselected, defer, disabled, draggable, ended,\n   * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,\n   * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,\n   * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,\n   * selected, spellcheck, truespeed, willvalidate\n   *\n   * Finally, the following commonly mis-capitalized attribute/property names\n   * are evaluated as expected:\n   *\n   * - \"class\"\n   * - \"readonly\"\n   *\n   * @param {string} attributeName The name of the attribute to query.\n   * @return {!promise.Thenable<?string>} A promise that will be\n   *     resolved with the attribute's value. The returned value will always be\n   *     either a string or null.\n   */\n  getAttribute(attributeName) {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).\n            setParameter('name', attributeName),\n        'WebElement.getAttribute(' + attributeName + ')');\n  }\n\n  /**\n   * Get the visible (i.e. not hidden by CSS) innerText of this element,\n   * including sub-elements, without any leading or trailing whitespace.\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the element's visible text.\n   */\n  getText() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_TEXT),\n        'WebElement.getText()');\n  }\n\n  /**\n   * Schedules a command to compute the size of this element's bounding box, in\n   * pixels.\n   * @return {!promise.Thenable<{width: number, height: number}>} A\n   *     promise that will be resolved with the element's size as a\n   *     {@code {width:number, height:number}} object.\n   */\n  getSize() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_SIZE),\n        'WebElement.getSize()');\n  }\n\n  /**\n   * Schedules a command to compute the location of this element in page space.\n   * @return {!promise.Thenable<{x: number, y: number}>} A promise that\n   *     will be resolved to the element's location as a\n   *     {@code {x:number, y:number}} object.\n   */\n  getLocation() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_LOCATION),\n        'WebElement.getLocation()');\n  }\n\n  /**\n   * Schedules a command to query whether the DOM element represented by this\n   * instance is enabled, as dictated by the {@code disabled} attribute.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently enabled.\n   */\n  isEnabled() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_ENABLED),\n        'WebElement.isEnabled()');\n  }\n\n  /**\n   * Schedules a command to query whether this element is selected.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently selected.\n   */\n  isSelected() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_SELECTED),\n        'WebElement.isSelected()');\n  }\n\n  /**\n   * Schedules a command to submit the form containing this element (or this\n   * element if it is a FORM element). This command is a no-op if the element is\n   * not contained in a form.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the form has been submitted.\n   */\n  submit() {\n    return this.schedule_(\n        new command.Command(command.Name.SUBMIT_ELEMENT),\n        'WebElement.submit()');\n  }\n\n  /**\n   * Schedules a command to clear the `value` of this element. This command has\n   * no effect if the underlying DOM element is neither a text INPUT element\n   * nor a TEXTAREA element.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the element has been cleared.\n   */\n  clear() {\n    return this.schedule_(\n        new command.Command(command.Name.CLEAR_ELEMENT),\n        'WebElement.clear()');\n  }\n\n  /**\n   * Schedules a command to test whether this element is currently displayed.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently visible on the page.\n   */\n  isDisplayed() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_DISPLAYED),\n        'WebElement.isDisplayed()');\n  }\n\n  /**\n   * Take a screenshot of the visible region encompassed by this element's\n   * bounding rectangle.\n   *\n   * @param {boolean=} opt_scroll Optional argument that indicates whether the\n   *     element should be scrolled into view before taking a screenshot.\n   *     Defaults to false.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot(opt_scroll) {\n    var scroll = !!opt_scroll;\n    return this.schedule_(\n        new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT)\n            .setParameter('scroll', scroll),\n        'WebElement.takeScreenshot(' + scroll + ')');\n  }\n}\n\n\n/**\n * WebElementPromise is a promise that will be fulfilled with a WebElement.\n * This serves as a forward proxy on WebElement, allowing calls to be\n * scheduled without directly on this instance before the underlying\n * WebElement has been fulfilled. In other words, the following two statements\n * are equivalent:\n *\n *     driver.findElement({id: 'my-button'}).click();\n *     driver.findElement({id: 'my-button'}).then(function(el) {\n *       return el.click();\n *     });\n *\n * @implements {promise.CancellableThenable<!WebElement>}\n * @final\n */\nclass WebElementPromise extends WebElement {\n  /**\n   * @param {!WebDriver} driver The parent WebDriver instance for this\n   *     element.\n   * @param {!promise.Thenable<!WebElement>} el A promise\n   *     that will resolve to the promised element.\n   */\n  constructor(driver, el) {\n    super(driver, 'unused');\n\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n    this.cancel = function(opt_reason) {\n      if (promise.CancellableThenable.isImplementation(el)) {\n        /** @type {!promise.CancellableThenable} */(el).cancel(opt_reason);\n      }\n    };\n\n    /** @override */\n    this.then = el.then.bind(el);\n\n    /** @override */\n    this.catch = el.catch.bind(el);\n\n    /**\n     * Defers returning the element ID until the wrapped WebElement has been\n     * resolved.\n     * @override\n     */\n    this.getId = function() {\n      return el.then(function(el) {\n        return el.getId();\n      });\n    };\n  }\n}\npromise.CancellableThenable.addImplementation(WebElementPromise);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  Alert\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Represents a modal dialog such as {@code alert}, {@code confirm}, or\n * {@code prompt}. Provides functions to retrieve the message displayed with\n * the alert, accept or dismiss the alert, and set the response text (in the\n * case of {@code prompt}).\n */\nclass Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this alert\n   *     is attached to.\n   * @param {string} text The message text displayed with this alert.\n   */\n  constructor(driver, text) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!promise.Thenable<string>} */\n    this.text_ = driver.controlFlow().promise(resolve => resolve(text));\n  }\n\n  /**\n   * Retrieves the message text displayed with this alert. For instance, if the\n   * alert were opened with alert(\"hello\"), then this would return \"hello\".\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the text displayed with this alert.\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Sets the username and password in an alert prompting for credentials (such\n   * as a Basic HTTP Auth prompt). This method will implicitly\n   * {@linkplain #accept() submit} the dialog.\n   *\n   * @param {string} username The username to send.\n   * @param {string} password The password to send.\n   * @return {!promise.Thenable<void>} A promise that will be resolved when this\n   *     command has completed.\n   */\n  authenticateAs(username, password) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_ALERT_CREDENTIALS),\n        'WebDriver.switchTo().alert()'\n            + `.authenticateAs(\"${username}\", \"${password}\")`);\n  }\n\n  /**\n   * Accepts this alert.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  accept() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.ACCEPT_ALERT),\n        'WebDriver.switchTo().alert().accept()');\n  }\n\n  /**\n   * Dismisses this alert.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  dismiss() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DISMISS_ALERT),\n        'WebDriver.switchTo().alert().dismiss()');\n  }\n\n  /**\n   * Sets the response text on this alert. This command will return an error if\n   * the underlying alert does not support response text (e.g. window.alert and\n   * window.confirm).\n   *\n   * @param {string} text The text to set.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  sendKeys(text) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_ALERT_TEXT).\n            setParameter('text', text),\n        'WebDriver.switchTo().alert().sendKeys(' + text + ')');\n  }\n}\n\n\n/**\n * AlertPromise is a promise that will be fulfilled with an Alert. This promise\n * serves as a forward proxy on an Alert, allowing calls to be scheduled\n * directly on this instance before the underlying Alert has been fulfilled. In\n * other words, the following two statements are equivalent:\n *\n *     driver.switchTo().alert().dismiss();\n *     driver.switchTo().alert().then(function(alert) {\n *       return alert.dismiss();\n *     });\n *\n * @implements {promise.CancellableThenable<!webdriver.Alert>}\n * @final\n */\nclass AlertPromise extends Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this\n   *     alert is attached to.\n   * @param {!promise.Thenable<!Alert>} alert A thenable\n   *     that will be fulfilled with the promised alert.\n   */\n  constructor(driver, alert) {\n    super(driver, 'unused');\n\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n    this.cancel = function(opt_reason) {\n      if (promise.CancellableThenable.isImplementation(alert)) {\n        /** @type {!promise.CancellableThenable} */(alert).cancel(opt_reason);\n      }\n    };\n\n    /** @override */\n    this.then = alert.then.bind(alert);\n\n    /** @override */\n    this.catch = alert.catch.bind(alert);\n\n    /**\n     * Defer returning text until the promised alert has been resolved.\n     * @override\n     */\n    this.getText = function() {\n      return alert.then(function(alert) {\n        return alert.getText();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.authenticateAs = function(username, password) {\n      return alert.then(function(alert) {\n        return alert.authenticateAs(username, password);\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.accept = function() {\n      return alert.then(function(alert) {\n        return alert.accept();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.dismiss = function() {\n      return alert.then(function(alert) {\n        return alert.dismiss();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.sendKeys = function(text) {\n      return alert.then(function(alert) {\n        return alert.sendKeys(text);\n      });\n    };\n  }\n}\npromise.CancellableThenable.addImplementation(AlertPromise);\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Alert: Alert,\n  AlertPromise: AlertPromise,\n  Condition: Condition,\n  Logs: Logs,\n  Navigation: Navigation,\n  Options: Options,\n  TargetLocator: TargetLocator,\n  Timeouts: Timeouts,\n  IWebDriver: IWebDriver,\n  WebDriver: WebDriver,\n  WebElement: WebElement,\n  WebElementCondition: WebElementCondition,\n  WebElementPromise: WebElementPromise,\n  Window: Window\n};\n"]},"metadata":{},"sourceType":"script"}