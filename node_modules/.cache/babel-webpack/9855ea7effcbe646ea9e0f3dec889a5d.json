{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar util = require(\"util\");\n\nvar browser_1 = require(\"./browser\");\n\nvar driverProviders_1 = require(\"./driverProviders\");\n\nvar logger_1 = require(\"./logger\");\n\nvar plugins_1 = require(\"./plugins\");\n\nvar ptor_1 = require(\"./ptor\");\n\nvar helper = require(\"./util\");\n\nvar logger = new logger_1.Logger('runner');\n/*\n * Runner is responsible for starting the execution of a test run and triggering\n * setup, teardown, managing config, etc through its various dependencies.\n *\n * The Protractor Runner is a node EventEmitter with the following events:\n * - testPass\n * - testFail\n * - testsDone\n *\n * @param {Object} config\n * @constructor\n */\n\nvar Runner = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Runner, _events_1$EventEmitte);\n\n  var _super = _createSuper(Runner);\n\n  function Runner(config) {\n    var _this;\n\n    _classCallCheck(this, Runner);\n\n    _this = _super.call(this);\n    /**\n     * Responsible for cleaning up test run and exiting the process.\n     * @private\n     * @param {int} Standard unix exit code\n     */\n\n    _this.exit_ = function (exitCode) {\n      return helper.runFilenameOrFn_(this.config_.configDir, this.config_.onCleanUp, [exitCode]).then(function (returned) {\n        if (typeof returned === 'number') {\n          return returned;\n        } else {\n          return exitCode;\n        }\n      });\n    };\n\n    _this.config_ = config;\n\n    if (config.v8Debug) {\n      // Call this private function instead of sending SIGUSR1 because Windows.\n      process['_debugProcess'](process.pid);\n    }\n\n    if (config.nodeDebug) {\n      process['_debugProcess'](process.pid);\n      var flow = selenium_webdriver_1.promise.controlFlow();\n      _this.ready_ = flow.execute(function () {\n        var nodedebug = require('child_process').fork('debug', ['localhost:5858']);\n\n        process.on('exit', function () {\n          nodedebug.kill('SIGTERM');\n        });\n        nodedebug.on('exit', function () {\n          process.exit(1);\n        });\n      }, 'start the node debugger').then(function () {\n        return flow.timeout(1000, 'waiting for debugger to attach');\n      });\n    }\n\n    if (config.capabilities && config.capabilities.seleniumAddress) {\n      config.seleniumAddress = config.capabilities.seleniumAddress;\n    }\n\n    _this.loadDriverProvider_(config);\n\n    _this.setTestPreparer(config.onPrepare);\n\n    return _this;\n  }\n  /**\n   * Registrar for testPreparers - executed right before tests run.\n   * @public\n   * @param {string/Fn} filenameOrFn\n   */\n\n\n  _createClass(Runner, [{\n    key: \"setTestPreparer\",\n    value: function setTestPreparer(filenameOrFn) {\n      this.preparer_ = filenameOrFn;\n    }\n    /**\n     * Executor of testPreparer\n     * @public\n     * @param {string[]=} An optional list of command line arguments the framework will accept.\n     * @return {q.Promise} A promise that will resolve when the test preparers\n     *     are finished.\n     */\n\n  }, {\n    key: \"runTestPreparer\",\n    value: function runTestPreparer(extraFlags) {\n      var _this2 = this;\n\n      var unknownFlags = this.config_.unknownFlags_ || [];\n\n      if (extraFlags) {\n        unknownFlags = unknownFlags.filter(function (f) {\n          return extraFlags.indexOf(f) === -1;\n        });\n      }\n\n      if (unknownFlags.length > 0 && !this.config_.disableChecks) {\n        // TODO: Make this throw a ConfigError in Protractor 6.\n        logger.warn('Ignoring unknown extra flags: ' + unknownFlags.join(', ') + '. This will be' + ' an error in future versions, please use --disableChecks flag to disable the ' + ' Protractor CLI flag checks. ');\n      }\n\n      return this.plugins_.onPrepare().then(function () {\n        return helper.runFilenameOrFn_(_this2.config_.configDir, _this2.preparer_);\n      });\n    }\n    /**\n     * Called after each test finishes.\n     *\n     * Responsible for `restartBrowserBetweenTests`\n     *\n     * @public\n     * @return {q.Promise} A promise that will resolve when the work here is done\n     */\n\n  }, {\n    key: \"afterEach\",\n    value: function afterEach() {\n      var ret;\n      this.frameworkUsesAfterEach = true;\n\n      if (this.config_.restartBrowserBetweenTests) {\n        this.restartPromise = this.restartPromise || q(ptor_1.protractor.browser.restart());\n        ret = this.restartPromise;\n        this.restartPromise = undefined;\n      }\n\n      return ret || q();\n    }\n    /**\n     * Grab driver provider based on type\n     * @private\n     *\n     * Priority\n     * 1) if directConnect is true, use that\n     * 2) if seleniumAddress is given, use that\n     * 3) if a Sauce Labs account is given, use that\n     * 4) if a seleniumServerJar is specified, use that\n     * 5) try to find the seleniumServerJar in protractor/selenium\n     */\n\n  }, {\n    key: \"loadDriverProvider_\",\n    value: function loadDriverProvider_(config) {\n      this.config_ = config;\n      this.driverprovider_ = driverProviders_1.buildDriverProvider(this.config_);\n    }\n    /**\n     * Getter for the Runner config object\n     * @public\n     * @return {Object} config\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config_;\n    }\n    /**\n     * Get the control flow used by this runner.\n     * @return {Object} WebDriver control flow.\n     */\n\n  }, {\n    key: \"controlFlow\",\n    value: function controlFlow() {\n      return selenium_webdriver_1.promise.controlFlow();\n    }\n    /**\n     * Sets up convenience globals for test specs\n     * @private\n     */\n\n  }, {\n    key: \"setupGlobals_\",\n    value: function setupGlobals_(browser_) {\n      // Keep $, $$, element, and by/By under the global protractor namespace\n      ptor_1.protractor.browser = browser_;\n      ptor_1.protractor.$ = browser_.$;\n      ptor_1.protractor.$$ = browser_.$$;\n      ptor_1.protractor.element = browser_.element;\n      ptor_1.protractor.by = ptor_1.protractor.By = browser_1.ProtractorBrowser.By;\n      ptor_1.protractor.ExpectedConditions = browser_.ExpectedConditions;\n\n      if (!this.config_.noGlobals) {\n        // Export protractor to the global namespace to be used in tests.\n        global.browser = browser_;\n        global.$ = browser_.$;\n        global.$$ = browser_.$$;\n        global.element = browser_.element;\n        global.by = global.By = ptor_1.protractor.By;\n        global.ExpectedConditions = ptor_1.protractor.ExpectedConditions;\n      }\n\n      global.protractor = ptor_1.protractor;\n\n      if (!this.config_.skipSourceMapSupport) {\n        // Enable sourcemap support for stack traces.\n        require('source-map-support').install();\n      } // Required by dart2js machinery.\n      // https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/sdk/lib/js/dart2js/js_dart2js.dart?spec=svn32943&r=32943#487\n\n\n      global.DartObject = function (o) {\n        this.o = o;\n      };\n    }\n    /**\n     * Create a new driver from a driverProvider. Then set up a\n     * new protractor instance using this driver.\n     * This is used to set up the initial protractor instances and any\n     * future ones.\n     *\n     * @param {Plugin} plugins The plugin functions\n     * @param {ProtractorBrowser=} parentBrowser The browser which spawned this one\n     *\n     * @return {Protractor} a protractor instance.\n     * @public\n     */\n\n  }, {\n    key: \"createBrowser\",\n    value: function createBrowser(plugins, parentBrowser) {\n      var _this3 = this;\n\n      var config = this.config_;\n      var driver = this.driverprovider_.getNewDriver();\n      var blockingProxyUrl;\n\n      if (config.useBlockingProxy) {\n        blockingProxyUrl = this.driverprovider_.getBPUrl();\n      }\n\n      var initProperties = {\n        baseUrl: config.baseUrl,\n        rootElement: config.rootElement,\n        untrackOutstandingTimeouts: config.untrackOutstandingTimeouts,\n        params: config.params,\n        getPageTimeout: config.getPageTimeout,\n        allScriptsTimeout: config.allScriptsTimeout,\n        debuggerServerPort: config.debuggerServerPort,\n        ng12Hybrid: config.ng12Hybrid,\n        waitForAngularEnabled: true\n      };\n\n      if (parentBrowser) {\n        initProperties.baseUrl = parentBrowser.baseUrl;\n        initProperties.rootElement = parentBrowser.angularAppRoot();\n        initProperties.untrackOutstandingTimeouts = !parentBrowser.trackOutstandingTimeouts_;\n        initProperties.params = parentBrowser.params;\n        initProperties.getPageTimeout = parentBrowser.getPageTimeout;\n        initProperties.allScriptsTimeout = parentBrowser.allScriptsTimeout;\n        initProperties.debuggerServerPort = parentBrowser.debuggerServerPort;\n        initProperties.ng12Hybrid = parentBrowser.ng12Hybrid;\n        initProperties.waitForAngularEnabled = parentBrowser.waitForAngularEnabled();\n      }\n\n      var browser_ = new browser_1.ProtractorBrowser(driver, initProperties.baseUrl, initProperties.rootElement, initProperties.untrackOutstandingTimeouts, blockingProxyUrl);\n      browser_.params = initProperties.params;\n      browser_.plugins_ = plugins || new plugins_1.Plugins({});\n\n      if (initProperties.getPageTimeout) {\n        browser_.getPageTimeout = initProperties.getPageTimeout;\n      }\n\n      if (initProperties.allScriptsTimeout) {\n        browser_.allScriptsTimeout = initProperties.allScriptsTimeout;\n      }\n\n      if (initProperties.debuggerServerPort) {\n        browser_.debuggerServerPort = initProperties.debuggerServerPort;\n      }\n\n      if (initProperties.ng12Hybrid) {\n        browser_.ng12Hybrid = initProperties.ng12Hybrid;\n      }\n\n      browser_.ready = browser_.ready.then(function () {\n        return browser_.waitForAngularEnabled(initProperties.waitForAngularEnabled);\n      }).then(function () {\n        return driver.manage().timeouts().setScriptTimeout(initProperties.allScriptsTimeout || 0);\n      }).then(function () {\n        return browser_;\n      });\n\n      browser_.getProcessedConfig = function () {\n        return selenium_webdriver_1.promise.when(config);\n      };\n\n      browser_.forkNewDriverInstance = function (useSameUrl, copyMockModules) {\n        var copyConfigUpdates = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n        var newBrowser = _this3.createBrowser(plugins);\n\n        if (copyMockModules) {\n          newBrowser.mockModules_ = browser_.mockModules_;\n        }\n\n        if (useSameUrl) {\n          newBrowser.ready = newBrowser.ready.then(function () {\n            return browser_.driver.getCurrentUrl();\n          }).then(function (url) {\n            return newBrowser.get(url);\n          }).then(function () {\n            return newBrowser;\n          });\n        }\n\n        return newBrowser;\n      };\n\n      var replaceBrowser = function replaceBrowser() {\n        var newBrowser = browser_.forkNewDriverInstance(false, true);\n\n        if (browser_ === ptor_1.protractor.browser) {\n          _this3.setupGlobals_(newBrowser);\n        }\n\n        return newBrowser;\n      };\n\n      browser_.restart = function () {\n        // Note: because tests are not paused at this point, any async\n        // calls here are not guaranteed to complete before the tests resume.\n        // Seperate solutions depending on if the control flow is enabled (see lib/browser.ts)\n        if (browser_.controlFlowIsEnabled()) {\n          return browser_.restartSync().ready;\n        } else {\n          return _this3.driverprovider_.quitDriver(browser_.driver).then(replaceBrowser).then(function (newBrowser) {\n            return newBrowser.ready;\n          });\n        }\n      };\n\n      browser_.restartSync = function () {\n        if (!browser_.controlFlowIsEnabled()) {\n          throw TypeError('Unable to use `browser.restartSync()` when the control flow is disabled');\n        }\n\n        _this3.driverprovider_.quitDriver(browser_.driver);\n\n        return replaceBrowser();\n      };\n\n      return browser_;\n    }\n    /**\n     * Final cleanup on exiting the runner.\n     *\n     * @return {q.Promise} A promise which resolves on finish.\n     * @private\n     */\n\n  }, {\n    key: \"shutdown_\",\n    value: function shutdown_() {\n      return driverProviders_1.DriverProvider.quitDrivers(this.driverprovider_, this.driverprovider_.getExistingDrivers());\n    }\n    /**\n     * The primary workhorse interface. Kicks off the test running process.\n     *\n     * @return {q.Promise} A promise which resolves to the exit code of the tests.\n     * @public\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this4 = this;\n\n      var testPassed;\n      var plugins = this.plugins_ = new plugins_1.Plugins(this.config_);\n      var pluginPostTestPromises;\n      var browser_;\n      var results;\n\n      if (this.config_.framework !== 'explorer' && !this.config_.specs.length) {\n        throw new Error('Spec patterns did not match any files.');\n      }\n\n      if (this.config_.SELENIUM_PROMISE_MANAGER != null) {\n        selenium_webdriver_1.promise.USE_PROMISE_MANAGER = this.config_.SELENIUM_PROMISE_MANAGER;\n      }\n\n      if (this.config_.webDriverLogDir || this.config_.highlightDelay) {\n        this.config_.useBlockingProxy = true;\n      } // 0) Wait for debugger\n\n\n      return q(this.ready_).then(function () {\n        // 1) Setup environment\n        // noinspection JSValidateTypes\n        return _this4.driverprovider_.setupEnv();\n      }).then(function () {\n        // 2) Create a browser and setup globals\n        browser_ = _this4.createBrowser(plugins);\n\n        _this4.setupGlobals_(browser_);\n\n        return browser_.ready.then(browser_.getSession).then(function (session) {\n          logger.debug('WebDriver session successfully started with capabilities ' + util.inspect(session.getCapabilities()));\n        }, function (err) {\n          logger.error('Unable to start a WebDriver session.');\n          throw err;\n        }); // 3) Setup plugins\n      }).then(function () {\n        return plugins.setup(); // 4) Execute test cases\n      }).then(function () {\n        // Do the framework setup here so that jasmine and mocha globals are\n        // available to the onPrepare function.\n        var frameworkPath = '';\n\n        if (_this4.config_.framework === 'jasmine' || _this4.config_.framework === 'jasmine2') {\n          frameworkPath = './frameworks/jasmine.js';\n        } else if (_this4.config_.framework === 'mocha') {\n          frameworkPath = './frameworks/mocha.js';\n        } else if (_this4.config_.framework === 'debugprint') {\n          // Private framework. Do not use.\n          frameworkPath = './frameworks/debugprint.js';\n        } else if (_this4.config_.framework === 'explorer') {\n          // Private framework. Do not use.\n          frameworkPath = './frameworks/explorer.js';\n        } else if (_this4.config_.framework === 'custom') {\n          if (!_this4.config_.frameworkPath) {\n            throw new Error('When config.framework is custom, ' + 'config.frameworkPath is required.');\n          }\n\n          frameworkPath = _this4.config_.frameworkPath;\n        } else {\n          throw new Error('config.framework (' + _this4.config_.framework + ') is not a valid framework.');\n        }\n\n        if (_this4.config_.restartBrowserBetweenTests) {\n          // TODO(sjelin): replace with warnings once `afterEach` support is required\n          var restartDriver = function restartDriver() {\n            if (!_this4.frameworkUsesAfterEach) {\n              _this4.restartPromise = q(browser_.restart());\n            }\n          };\n\n          _this4.on('testPass', restartDriver);\n\n          _this4.on('testFail', restartDriver);\n        } // We need to save these promises to make sure they're run, but we\n        // don't\n        // want to delay starting the next test (because we can't, it's just\n        // an event emitter).\n\n\n        pluginPostTestPromises = [];\n\n        _this4.on('testPass', function (testInfo) {\n          pluginPostTestPromises.push(plugins.postTest(true, testInfo));\n        });\n\n        _this4.on('testFail', function (testInfo) {\n          pluginPostTestPromises.push(plugins.postTest(false, testInfo));\n        });\n\n        logger.debug('Running with spec files ' + _this4.config_.specs);\n        return require(frameworkPath).run(_this4, _this4.config_.specs); // 5) Wait for postTest plugins to finish\n      }).then(function (testResults) {\n        results = testResults;\n        return q.all(pluginPostTestPromises); // 6) Teardown plugins\n      }).then(function () {\n        return plugins.teardown(); // 7) Teardown\n      }).then(function () {\n        results = helper.joinTestLogs(results, plugins.getResults());\n\n        _this4.emit('testsDone', results);\n\n        testPassed = results.failedCount === 0;\n\n        if (_this4.driverprovider_.updateJob) {\n          return _this4.driverprovider_.updateJob({\n            'passed': testPassed\n          }).then(function () {\n            return _this4.driverprovider_.teardownEnv();\n          });\n        } else {\n          return _this4.driverprovider_.teardownEnv();\n        } // 8) Let plugins do final cleanup\n\n      }).then(function () {\n        return plugins.postResults(); // 9) Exit process\n      }).then(function () {\n        var exitCode = testPassed ? 0 : 1;\n        return _this4.exit_(exitCode);\n      }).fin(function () {\n        return _this4.shutdown_();\n      });\n    }\n  }]);\n\n  return Runner;\n}(events_1.EventEmitter);\n\nexports.Runner = Runner;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/runner.js"],"names":["Object","defineProperty","exports","value","events_1","require","q","selenium_webdriver_1","util","browser_1","driverProviders_1","logger_1","plugins_1","ptor_1","helper","logger","Logger","Runner","config","exit_","exitCode","runFilenameOrFn_","config_","configDir","onCleanUp","then","returned","v8Debug","process","pid","nodeDebug","flow","promise","controlFlow","ready_","execute","nodedebug","fork","on","kill","exit","timeout","capabilities","seleniumAddress","loadDriverProvider_","setTestPreparer","onPrepare","filenameOrFn","preparer_","extraFlags","unknownFlags","unknownFlags_","filter","f","indexOf","length","disableChecks","warn","join","plugins_","ret","frameworkUsesAfterEach","restartBrowserBetweenTests","restartPromise","protractor","browser","restart","undefined","driverprovider_","buildDriverProvider","browser_","$","$$","element","by","By","ProtractorBrowser","ExpectedConditions","noGlobals","global","skipSourceMapSupport","install","DartObject","o","plugins","parentBrowser","driver","getNewDriver","blockingProxyUrl","useBlockingProxy","getBPUrl","initProperties","baseUrl","rootElement","untrackOutstandingTimeouts","params","getPageTimeout","allScriptsTimeout","debuggerServerPort","ng12Hybrid","waitForAngularEnabled","angularAppRoot","trackOutstandingTimeouts_","Plugins","ready","manage","timeouts","setScriptTimeout","getProcessedConfig","when","forkNewDriverInstance","useSameUrl","copyMockModules","copyConfigUpdates","newBrowser","createBrowser","mockModules_","getCurrentUrl","url","get","replaceBrowser","setupGlobals_","controlFlowIsEnabled","restartSync","quitDriver","TypeError","DriverProvider","quitDrivers","getExistingDrivers","testPassed","pluginPostTestPromises","results","framework","specs","Error","SELENIUM_PROMISE_MANAGER","USE_PROMISE_MANAGER","webDriverLogDir","highlightDelay","setupEnv","getSession","session","debug","inspect","getCapabilities","err","error","setup","frameworkPath","restartDriver","testInfo","push","postTest","run","testResults","all","teardown","joinTestLogs","getResults","emit","failedCount","updateJob","teardownEnv","postResults","fin","shutdown_","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst util = require(\"util\");\nconst browser_1 = require(\"./browser\");\nconst driverProviders_1 = require(\"./driverProviders\");\nconst logger_1 = require(\"./logger\");\nconst plugins_1 = require(\"./plugins\");\nconst ptor_1 = require(\"./ptor\");\nconst helper = require(\"./util\");\nlet logger = new logger_1.Logger('runner');\n/*\n * Runner is responsible for starting the execution of a test run and triggering\n * setup, teardown, managing config, etc through its various dependencies.\n *\n * The Protractor Runner is a node EventEmitter with the following events:\n * - testPass\n * - testFail\n * - testsDone\n *\n * @param {Object} config\n * @constructor\n */\nclass Runner extends events_1.EventEmitter {\n    constructor(config) {\n        super();\n        /**\n         * Responsible for cleaning up test run and exiting the process.\n         * @private\n         * @param {int} Standard unix exit code\n         */\n        this.exit_ = function (exitCode) {\n            return helper.runFilenameOrFn_(this.config_.configDir, this.config_.onCleanUp, [exitCode])\n                .then((returned) => {\n                if (typeof returned === 'number') {\n                    return returned;\n                }\n                else {\n                    return exitCode;\n                }\n            });\n        };\n        this.config_ = config;\n        if (config.v8Debug) {\n            // Call this private function instead of sending SIGUSR1 because Windows.\n            process['_debugProcess'](process.pid);\n        }\n        if (config.nodeDebug) {\n            process['_debugProcess'](process.pid);\n            let flow = selenium_webdriver_1.promise.controlFlow();\n            this.ready_ = flow.execute(() => {\n                let nodedebug = require('child_process').fork('debug', ['localhost:5858']);\n                process.on('exit', function () {\n                    nodedebug.kill('SIGTERM');\n                });\n                nodedebug.on('exit', function () {\n                    process.exit(1);\n                });\n            }, 'start the node debugger').then(() => {\n                return flow.timeout(1000, 'waiting for debugger to attach');\n            });\n        }\n        if (config.capabilities && config.capabilities.seleniumAddress) {\n            config.seleniumAddress = config.capabilities.seleniumAddress;\n        }\n        this.loadDriverProvider_(config);\n        this.setTestPreparer(config.onPrepare);\n    }\n    /**\n     * Registrar for testPreparers - executed right before tests run.\n     * @public\n     * @param {string/Fn} filenameOrFn\n     */\n    setTestPreparer(filenameOrFn) {\n        this.preparer_ = filenameOrFn;\n    }\n    /**\n     * Executor of testPreparer\n     * @public\n     * @param {string[]=} An optional list of command line arguments the framework will accept.\n     * @return {q.Promise} A promise that will resolve when the test preparers\n     *     are finished.\n     */\n    runTestPreparer(extraFlags) {\n        let unknownFlags = this.config_.unknownFlags_ || [];\n        if (extraFlags) {\n            unknownFlags = unknownFlags.filter((f) => extraFlags.indexOf(f) === -1);\n        }\n        if (unknownFlags.length > 0 && !this.config_.disableChecks) {\n            // TODO: Make this throw a ConfigError in Protractor 6.\n            logger.warn('Ignoring unknown extra flags: ' + unknownFlags.join(', ') + '. This will be' +\n                ' an error in future versions, please use --disableChecks flag to disable the ' +\n                ' Protractor CLI flag checks. ');\n        }\n        return this.plugins_.onPrepare().then(() => {\n            return helper.runFilenameOrFn_(this.config_.configDir, this.preparer_);\n        });\n    }\n    /**\n     * Called after each test finishes.\n     *\n     * Responsible for `restartBrowserBetweenTests`\n     *\n     * @public\n     * @return {q.Promise} A promise that will resolve when the work here is done\n     */\n    afterEach() {\n        let ret;\n        this.frameworkUsesAfterEach = true;\n        if (this.config_.restartBrowserBetweenTests) {\n            this.restartPromise = this.restartPromise || q(ptor_1.protractor.browser.restart());\n            ret = this.restartPromise;\n            this.restartPromise = undefined;\n        }\n        return ret || q();\n    }\n    /**\n     * Grab driver provider based on type\n     * @private\n     *\n     * Priority\n     * 1) if directConnect is true, use that\n     * 2) if seleniumAddress is given, use that\n     * 3) if a Sauce Labs account is given, use that\n     * 4) if a seleniumServerJar is specified, use that\n     * 5) try to find the seleniumServerJar in protractor/selenium\n     */\n    loadDriverProvider_(config) {\n        this.config_ = config;\n        this.driverprovider_ = driverProviders_1.buildDriverProvider(this.config_);\n    }\n    /**\n     * Getter for the Runner config object\n     * @public\n     * @return {Object} config\n     */\n    getConfig() {\n        return this.config_;\n    }\n    /**\n     * Get the control flow used by this runner.\n     * @return {Object} WebDriver control flow.\n     */\n    controlFlow() {\n        return selenium_webdriver_1.promise.controlFlow();\n    }\n    /**\n     * Sets up convenience globals for test specs\n     * @private\n     */\n    setupGlobals_(browser_) {\n        // Keep $, $$, element, and by/By under the global protractor namespace\n        ptor_1.protractor.browser = browser_;\n        ptor_1.protractor.$ = browser_.$;\n        ptor_1.protractor.$$ = browser_.$$;\n        ptor_1.protractor.element = browser_.element;\n        ptor_1.protractor.by = ptor_1.protractor.By = browser_1.ProtractorBrowser.By;\n        ptor_1.protractor.ExpectedConditions = browser_.ExpectedConditions;\n        if (!this.config_.noGlobals) {\n            // Export protractor to the global namespace to be used in tests.\n            global.browser = browser_;\n            global.$ = browser_.$;\n            global.$$ = browser_.$$;\n            global.element = browser_.element;\n            global.by = global.By = ptor_1.protractor.By;\n            global.ExpectedConditions = ptor_1.protractor.ExpectedConditions;\n        }\n        global.protractor = ptor_1.protractor;\n        if (!this.config_.skipSourceMapSupport) {\n            // Enable sourcemap support for stack traces.\n            require('source-map-support').install();\n        }\n        // Required by dart2js machinery.\n        // https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/sdk/lib/js/dart2js/js_dart2js.dart?spec=svn32943&r=32943#487\n        global.DartObject = function (o) {\n            this.o = o;\n        };\n    }\n    /**\n     * Create a new driver from a driverProvider. Then set up a\n     * new protractor instance using this driver.\n     * This is used to set up the initial protractor instances and any\n     * future ones.\n     *\n     * @param {Plugin} plugins The plugin functions\n     * @param {ProtractorBrowser=} parentBrowser The browser which spawned this one\n     *\n     * @return {Protractor} a protractor instance.\n     * @public\n     */\n    createBrowser(plugins, parentBrowser) {\n        let config = this.config_;\n        let driver = this.driverprovider_.getNewDriver();\n        let blockingProxyUrl;\n        if (config.useBlockingProxy) {\n            blockingProxyUrl = this.driverprovider_.getBPUrl();\n        }\n        let initProperties = {\n            baseUrl: config.baseUrl,\n            rootElement: config.rootElement,\n            untrackOutstandingTimeouts: config.untrackOutstandingTimeouts,\n            params: config.params,\n            getPageTimeout: config.getPageTimeout,\n            allScriptsTimeout: config.allScriptsTimeout,\n            debuggerServerPort: config.debuggerServerPort,\n            ng12Hybrid: config.ng12Hybrid,\n            waitForAngularEnabled: true\n        };\n        if (parentBrowser) {\n            initProperties.baseUrl = parentBrowser.baseUrl;\n            initProperties.rootElement = parentBrowser.angularAppRoot();\n            initProperties.untrackOutstandingTimeouts = !parentBrowser.trackOutstandingTimeouts_;\n            initProperties.params = parentBrowser.params;\n            initProperties.getPageTimeout = parentBrowser.getPageTimeout;\n            initProperties.allScriptsTimeout = parentBrowser.allScriptsTimeout;\n            initProperties.debuggerServerPort = parentBrowser.debuggerServerPort;\n            initProperties.ng12Hybrid = parentBrowser.ng12Hybrid;\n            initProperties.waitForAngularEnabled = parentBrowser.waitForAngularEnabled();\n        }\n        let browser_ = new browser_1.ProtractorBrowser(driver, initProperties.baseUrl, initProperties.rootElement, initProperties.untrackOutstandingTimeouts, blockingProxyUrl);\n        browser_.params = initProperties.params;\n        browser_.plugins_ = plugins || new plugins_1.Plugins({});\n        if (initProperties.getPageTimeout) {\n            browser_.getPageTimeout = initProperties.getPageTimeout;\n        }\n        if (initProperties.allScriptsTimeout) {\n            browser_.allScriptsTimeout = initProperties.allScriptsTimeout;\n        }\n        if (initProperties.debuggerServerPort) {\n            browser_.debuggerServerPort = initProperties.debuggerServerPort;\n        }\n        if (initProperties.ng12Hybrid) {\n            browser_.ng12Hybrid = initProperties.ng12Hybrid;\n        }\n        browser_.ready =\n            browser_.ready\n                .then(() => {\n                return browser_.waitForAngularEnabled(initProperties.waitForAngularEnabled);\n            })\n                .then(() => {\n                return driver.manage().timeouts().setScriptTimeout(initProperties.allScriptsTimeout || 0);\n            })\n                .then(() => {\n                return browser_;\n            });\n        browser_.getProcessedConfig = () => {\n            return selenium_webdriver_1.promise.when(config);\n        };\n        browser_.forkNewDriverInstance =\n            (useSameUrl, copyMockModules, copyConfigUpdates = true) => {\n                let newBrowser = this.createBrowser(plugins);\n                if (copyMockModules) {\n                    newBrowser.mockModules_ = browser_.mockModules_;\n                }\n                if (useSameUrl) {\n                    newBrowser.ready = newBrowser.ready\n                        .then(() => {\n                        return browser_.driver.getCurrentUrl();\n                    })\n                        .then((url) => {\n                        return newBrowser.get(url);\n                    })\n                        .then(() => {\n                        return newBrowser;\n                    });\n                }\n                return newBrowser;\n            };\n        let replaceBrowser = () => {\n            let newBrowser = browser_.forkNewDriverInstance(false, true);\n            if (browser_ === ptor_1.protractor.browser) {\n                this.setupGlobals_(newBrowser);\n            }\n            return newBrowser;\n        };\n        browser_.restart = () => {\n            // Note: because tests are not paused at this point, any async\n            // calls here are not guaranteed to complete before the tests resume.\n            // Seperate solutions depending on if the control flow is enabled (see lib/browser.ts)\n            if (browser_.controlFlowIsEnabled()) {\n                return browser_.restartSync().ready;\n            }\n            else {\n                return this.driverprovider_.quitDriver(browser_.driver)\n                    .then(replaceBrowser)\n                    .then(newBrowser => newBrowser.ready);\n            }\n        };\n        browser_.restartSync = () => {\n            if (!browser_.controlFlowIsEnabled()) {\n                throw TypeError('Unable to use `browser.restartSync()` when the control flow is disabled');\n            }\n            this.driverprovider_.quitDriver(browser_.driver);\n            return replaceBrowser();\n        };\n        return browser_;\n    }\n    /**\n     * Final cleanup on exiting the runner.\n     *\n     * @return {q.Promise} A promise which resolves on finish.\n     * @private\n     */\n    shutdown_() {\n        return driverProviders_1.DriverProvider.quitDrivers(this.driverprovider_, this.driverprovider_.getExistingDrivers());\n    }\n    /**\n     * The primary workhorse interface. Kicks off the test running process.\n     *\n     * @return {q.Promise} A promise which resolves to the exit code of the tests.\n     * @public\n     */\n    run() {\n        let testPassed;\n        let plugins = this.plugins_ = new plugins_1.Plugins(this.config_);\n        let pluginPostTestPromises;\n        let browser_;\n        let results;\n        if (this.config_.framework !== 'explorer' && !this.config_.specs.length) {\n            throw new Error('Spec patterns did not match any files.');\n        }\n        if (this.config_.SELENIUM_PROMISE_MANAGER != null) {\n            selenium_webdriver_1.promise.USE_PROMISE_MANAGER = this.config_.SELENIUM_PROMISE_MANAGER;\n        }\n        if (this.config_.webDriverLogDir || this.config_.highlightDelay) {\n            this.config_.useBlockingProxy = true;\n        }\n        // 0) Wait for debugger\n        return q(this.ready_)\n            .then(() => {\n            // 1) Setup environment\n            // noinspection JSValidateTypes\n            return this.driverprovider_.setupEnv();\n        })\n            .then(() => {\n            // 2) Create a browser and setup globals\n            browser_ = this.createBrowser(plugins);\n            this.setupGlobals_(browser_);\n            return browser_.ready.then(browser_.getSession)\n                .then((session) => {\n                logger.debug('WebDriver session successfully started with capabilities ' +\n                    util.inspect(session.getCapabilities()));\n            }, (err) => {\n                logger.error('Unable to start a WebDriver session.');\n                throw err;\n            });\n            // 3) Setup plugins\n        })\n            .then(() => {\n            return plugins.setup();\n            // 4) Execute test cases\n        })\n            .then(() => {\n            // Do the framework setup here so that jasmine and mocha globals are\n            // available to the onPrepare function.\n            let frameworkPath = '';\n            if (this.config_.framework === 'jasmine' || this.config_.framework === 'jasmine2') {\n                frameworkPath = './frameworks/jasmine.js';\n            }\n            else if (this.config_.framework === 'mocha') {\n                frameworkPath = './frameworks/mocha.js';\n            }\n            else if (this.config_.framework === 'debugprint') {\n                // Private framework. Do not use.\n                frameworkPath = './frameworks/debugprint.js';\n            }\n            else if (this.config_.framework === 'explorer') {\n                // Private framework. Do not use.\n                frameworkPath = './frameworks/explorer.js';\n            }\n            else if (this.config_.framework === 'custom') {\n                if (!this.config_.frameworkPath) {\n                    throw new Error('When config.framework is custom, ' +\n                        'config.frameworkPath is required.');\n                }\n                frameworkPath = this.config_.frameworkPath;\n            }\n            else {\n                throw new Error('config.framework (' + this.config_.framework + ') is not a valid framework.');\n            }\n            if (this.config_.restartBrowserBetweenTests) {\n                // TODO(sjelin): replace with warnings once `afterEach` support is required\n                let restartDriver = () => {\n                    if (!this.frameworkUsesAfterEach) {\n                        this.restartPromise = q(browser_.restart());\n                    }\n                };\n                this.on('testPass', restartDriver);\n                this.on('testFail', restartDriver);\n            }\n            // We need to save these promises to make sure they're run, but we\n            // don't\n            // want to delay starting the next test (because we can't, it's just\n            // an event emitter).\n            pluginPostTestPromises = [];\n            this.on('testPass', (testInfo) => {\n                pluginPostTestPromises.push(plugins.postTest(true, testInfo));\n            });\n            this.on('testFail', (testInfo) => {\n                pluginPostTestPromises.push(plugins.postTest(false, testInfo));\n            });\n            logger.debug('Running with spec files ' + this.config_.specs);\n            return require(frameworkPath).run(this, this.config_.specs);\n            // 5) Wait for postTest plugins to finish\n        })\n            .then((testResults) => {\n            results = testResults;\n            return q.all(pluginPostTestPromises);\n            // 6) Teardown plugins\n        })\n            .then(() => {\n            return plugins.teardown();\n            // 7) Teardown\n        })\n            .then(() => {\n            results = helper.joinTestLogs(results, plugins.getResults());\n            this.emit('testsDone', results);\n            testPassed = results.failedCount === 0;\n            if (this.driverprovider_.updateJob) {\n                return this.driverprovider_.updateJob({ 'passed': testPassed }).then(() => {\n                    return this.driverprovider_.teardownEnv();\n                });\n            }\n            else {\n                return this.driverprovider_.teardownEnv();\n            }\n            // 8) Let plugins do final cleanup\n        })\n            .then(() => {\n            return plugins.postResults();\n            // 9) Exit process\n        })\n            .then(() => {\n            let exitCode = testPassed ? 0 : 1;\n            return this.exit_(exitCode);\n        })\n            .fin(() => {\n            return this.shutdown_();\n        });\n    }\n}\nexports.Runner = Runner;\n//# sourceMappingURL=runner.js.map"]},"metadata":{},"sourceType":"script"}