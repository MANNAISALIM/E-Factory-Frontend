{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar q = require(\"q\");\n\nvar webdriver = require(\"selenium-webdriver\");\n\nvar configParser_1 = require(\"./configParser\");\n\nvar logger_1 = require(\"./logger\");\n\nvar ptor_1 = require(\"./ptor\");\n\nvar logger = new logger_1.Logger('plugins');\nvar PromiseType;\n\n(function (PromiseType) {\n  PromiseType[PromiseType[\"Q\"] = 0] = \"Q\";\n  PromiseType[PromiseType[\"WEBDRIVER\"] = 1] = \"WEBDRIVER\";\n})(PromiseType = exports.PromiseType || (exports.PromiseType = {}));\n/**\n * The plugin API for Protractor.  Note that this API is unstable. See\n * plugins/README.md for more information.\n *\n * @constructor\n * @param {Object} config parsed from the config file\n */\n\n\nvar Plugins = /*#__PURE__*/function () {\n  function Plugins(config) {\n    var _this = this;\n\n    _classCallCheck(this, Plugins);\n\n    /**\n     * @see docs/plugins.md#writing-plugins for information on these functions\n     */\n    this.setup = this.pluginFunFactory('setup', PromiseType.Q);\n    this.onPrepare = this.pluginFunFactory('onPrepare', PromiseType.Q);\n    this.teardown = this.pluginFunFactory('teardown', PromiseType.Q);\n    this.postResults = this.pluginFunFactory('postResults', PromiseType.Q);\n    this.postTest = this.pluginFunFactory('postTest', PromiseType.Q);\n    this.onPageLoad = this.pluginFunFactory('onPageLoad', PromiseType.WEBDRIVER);\n    this.onPageStable = this.pluginFunFactory('onPageStable', PromiseType.WEBDRIVER);\n    this.waitForPromise = this.pluginFunFactory('waitForPromise', PromiseType.WEBDRIVER);\n    this.waitForCondition = this.pluginFunFactory('waitForCondition', PromiseType.WEBDRIVER, true);\n    this.pluginObjs = [];\n    this.assertions = {};\n    this.resultsReported = false;\n\n    if (config.plugins) {\n      config.plugins.forEach(function (pluginConf, i) {\n        var path;\n\n        if (pluginConf.path) {\n          path = configParser_1.ConfigParser.resolveFilePatterns(pluginConf.path, true, config.configDir)[0];\n\n          if (!path) {\n            throw new Error('Invalid path to plugin: ' + pluginConf.path);\n          }\n        } else {\n          path = pluginConf.package;\n        }\n\n        var pluginObj;\n\n        if (path) {\n          pluginObj = require(path);\n        } else if (pluginConf.inline) {\n          pluginObj = pluginConf.inline;\n        } else {\n          throw new Error('Plugin configuration did not contain a valid path or ' + 'inline definition.');\n        }\n\n        _this.annotatePluginObj(pluginObj, pluginConf, i);\n\n        logger.debug('Plugin \"' + pluginObj.name + '\" loaded.');\n\n        _this.pluginObjs.push(pluginObj);\n      });\n    }\n  }\n\n  _createClass(Plugins, [{\n    key: \"annotatePluginObj\",\n\n    /**\n     * Adds properties to a plugin's object\n     *\n     * @see docs/plugins.md#provided-properties-and-functions\n     */\n    value: function annotatePluginObj(obj, conf, i) {\n      var _this2 = this;\n\n      var addAssertion = function addAssertion(info, passed, message) {\n        if (_this2.resultsReported) {\n          throw new Error('Cannot add new tests results, since they were already ' + 'reported.');\n        }\n\n        info = info || {};\n        var specName = info.specName || obj.name + ' Plugin Tests';\n        var assertion = {\n          passed: passed\n        };\n\n        if (!passed) {\n          assertion.errorMsg = message;\n\n          if (info.stackTrace) {\n            assertion.stackTrace = info.stackTrace;\n          }\n        }\n\n        _this2.assertions[specName] = _this2.assertions[specName] || [];\n\n        _this2.assertions[specName].push(assertion);\n      };\n\n      obj.name = obj.name || conf.name || conf.path || conf.package || 'Plugin #' + i;\n      obj.config = conf;\n\n      obj.addFailure = function (message, info) {\n        addAssertion(info, false, message);\n      };\n\n      obj.addSuccess = function (options) {\n        addAssertion(options, true);\n      };\n\n      obj.addWarning = function (message, options) {\n        options = options || {};\n        logger.warn('Warning ' + (options.specName ? 'in ' + options.specName : 'from \"' + obj.name + '\" plugin') + ': ' + message);\n      };\n    }\n  }, {\n    key: \"printPluginResults\",\n    value: function printPluginResults(specResults) {\n      var green = '\\x1b[32m';\n      var red = '\\x1b[31m';\n      var normalColor = '\\x1b[39m';\n\n      var printResult = function printResult(message, pass) {\n        logger.info(pass ? green : red, '\\t', pass ? 'Pass: ' : 'Fail: ', message, normalColor);\n      };\n\n      var _iterator = _createForOfIteratorHelper(specResults),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var specResult = _step.value;\n          var passed = specResult.assertions.map(function (x) {\n            return x.passed;\n          }).reduce(function (x, y) {\n            return x && y;\n          }, true);\n          printResult(specResult.description, passed);\n\n          if (!passed) {\n            var _iterator2 = _createForOfIteratorHelper(specResult.assertions),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var assertion = _step2.value;\n\n                if (!assertion.passed) {\n                  logger.error('\\t\\t' + assertion.errorMsg);\n\n                  if (assertion.stackTrace) {\n                    logger.error('\\t\\t' + assertion.stackTrace.replace(/\\n/g, '\\n\\t\\t'));\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Gets the tests results generated by any plugins\n     *\n     * @see lib/frameworks/README.md#requirements for a complete description of what\n     *     the results object must look like\n     *\n     * @return {Object} The results object\n     */\n\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var results = {\n        failedCount: 0,\n        specResults: []\n      };\n\n      for (var specName in this.assertions) {\n        results.specResults.push({\n          description: specName,\n          assertions: this.assertions[specName]\n        });\n        results.failedCount += this.assertions[specName].filter(function (assertion) {\n          return !assertion.passed;\n        }).length;\n      }\n\n      this.printPluginResults(results.specResults);\n      this.resultsReported = true;\n      return results;\n    }\n  }, {\n    key: \"skipAngularStability\",\n\n    /**\n     * Returns true if any loaded plugin has skipAngularStability enabled.\n     *\n     * @return {boolean}\n     */\n    value: function skipAngularStability() {\n      var result = this.pluginObjs.some(function (pluginObj) {\n        return pluginObj.skipAngularStability;\n      });\n      return result;\n    }\n  }, {\n    key: \"safeCallPluginFun\",\n\n    /**\n     * Calls a function from a plugin safely.  If the plugin's function throws an\n     * exception or returns a rejected promise, that failure will be logged as a\n     * failed test result instead of crashing protractor.  If the tests results have\n     * already been reported, the failure will be logged to the console.\n     *\n     * @param {Object} pluginObj The plugin object containing the function to be run\n     * @param {string} funName The name of the function we want to run\n     * @param {*[]} args The arguments we want to invoke the function with\n     * @param {PromiseType} promiseType The type of promise (WebDriver or Q) that\n     *    should be used\n     * @param {boolean} resultsReported If the results have already been reported\n     * @param {*} failReturnVal The value to return if the function fails\n     *\n     * @return {webdriver.promise.Promise|Q.Promise} A promise which resolves to the\n     *     function's return value\n     */\n    value: function safeCallPluginFun(pluginObj, funName, args, promiseType, failReturnVal) {\n      var _this3 = this;\n\n      var resolver = function resolver(done) {\n        var logError = function logError(e) {\n          if (_this3.resultsReported) {\n            _this3.printPluginResults([{\n              description: pluginObj.name + ' Runtime',\n              assertions: [{\n                passed: false,\n                errorMsg: 'Failure during ' + funName + ': ' + (e.message || e),\n                stackTrace: e.stack\n              }]\n            }]);\n          } else {\n            pluginObj.addFailure('Failure during ' + funName + ': ' + e.message || e, {\n              stackTrace: e.stack\n            });\n          }\n\n          done(failReturnVal);\n        };\n\n        try {\n          var result = pluginObj[funName].apply(pluginObj, args);\n\n          if (webdriver.promise.isPromise(result)) {\n            result.then(done, logError);\n          } else {\n            done(result);\n          }\n        } catch (e) {\n          logError(e);\n        }\n      };\n\n      if (promiseType == PromiseType.Q) {\n        return q.Promise(resolver);\n      } else if (ptor_1.protractor.browser.controlFlowIsEnabled()) {\n        return new webdriver.promise.Promise(resolver);\n      } else {\n        return new Promise(resolver);\n      }\n    }\n  }, {\n    key: \"pluginFunFactory\",\n    value: function pluginFunFactory(funName, promiseType, failReturnVal) {\n      var _this4 = this;\n\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var promises = _this4.pluginObjs.filter(function (pluginObj) {\n          return typeof pluginObj[funName] === 'function';\n        }).map(function (pluginObj) {\n          return _this4.safeCallPluginFun(pluginObj, funName, args, promiseType, failReturnVal);\n        });\n\n        return promiseType == PromiseType.Q ? q.all(promises) : webdriver.promise.all(promises);\n      };\n    }\n  }]);\n\n  return Plugins;\n}();\n\nexports.Plugins = Plugins;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/plugins.js"],"names":["Object","defineProperty","exports","value","q","require","webdriver","configParser_1","logger_1","ptor_1","logger","Logger","PromiseType","Plugins","config","setup","pluginFunFactory","Q","onPrepare","teardown","postResults","postTest","onPageLoad","WEBDRIVER","onPageStable","waitForPromise","waitForCondition","pluginObjs","assertions","resultsReported","plugins","forEach","pluginConf","i","path","ConfigParser","resolveFilePatterns","configDir","Error","package","pluginObj","inline","annotatePluginObj","debug","name","push","obj","conf","addAssertion","info","passed","message","specName","assertion","errorMsg","stackTrace","addFailure","addSuccess","options","addWarning","warn","specResults","green","red","normalColor","printResult","pass","specResult","map","x","reduce","y","description","error","replace","results","failedCount","filter","length","printPluginResults","result","some","skipAngularStability","funName","args","promiseType","failReturnVal","resolver","done","logError","e","stack","apply","promise","isPromise","then","Promise","protractor","browser","controlFlowIsEnabled","promises","safeCallPluginFun","all"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst q = require(\"q\");\nconst webdriver = require(\"selenium-webdriver\");\nconst configParser_1 = require(\"./configParser\");\nconst logger_1 = require(\"./logger\");\nconst ptor_1 = require(\"./ptor\");\nlet logger = new logger_1.Logger('plugins');\nvar PromiseType;\n(function (PromiseType) {\n    PromiseType[PromiseType[\"Q\"] = 0] = \"Q\";\n    PromiseType[PromiseType[\"WEBDRIVER\"] = 1] = \"WEBDRIVER\";\n})(PromiseType = exports.PromiseType || (exports.PromiseType = {}));\n/**\n * The plugin API for Protractor.  Note that this API is unstable. See\n * plugins/README.md for more information.\n *\n * @constructor\n * @param {Object} config parsed from the config file\n */\nclass Plugins {\n    constructor(config) {\n        /**\n         * @see docs/plugins.md#writing-plugins for information on these functions\n         */\n        this.setup = this.pluginFunFactory('setup', PromiseType.Q);\n        this.onPrepare = this.pluginFunFactory('onPrepare', PromiseType.Q);\n        this.teardown = this.pluginFunFactory('teardown', PromiseType.Q);\n        this.postResults = this.pluginFunFactory('postResults', PromiseType.Q);\n        this.postTest = this.pluginFunFactory('postTest', PromiseType.Q);\n        this.onPageLoad = this.pluginFunFactory('onPageLoad', PromiseType.WEBDRIVER);\n        this.onPageStable = this.pluginFunFactory('onPageStable', PromiseType.WEBDRIVER);\n        this.waitForPromise = this.pluginFunFactory('waitForPromise', PromiseType.WEBDRIVER);\n        this.waitForCondition = this.pluginFunFactory('waitForCondition', PromiseType.WEBDRIVER, true);\n        this.pluginObjs = [];\n        this.assertions = {};\n        this.resultsReported = false;\n        if (config.plugins) {\n            config.plugins.forEach((pluginConf, i) => {\n                let path;\n                if (pluginConf.path) {\n                    path = configParser_1.ConfigParser.resolveFilePatterns(pluginConf.path, true, config.configDir)[0];\n                    if (!path) {\n                        throw new Error('Invalid path to plugin: ' + pluginConf.path);\n                    }\n                }\n                else {\n                    path = pluginConf.package;\n                }\n                let pluginObj;\n                if (path) {\n                    pluginObj = require(path);\n                }\n                else if (pluginConf.inline) {\n                    pluginObj = pluginConf.inline;\n                }\n                else {\n                    throw new Error('Plugin configuration did not contain a valid path or ' +\n                        'inline definition.');\n                }\n                this.annotatePluginObj(pluginObj, pluginConf, i);\n                logger.debug('Plugin \"' + pluginObj.name + '\" loaded.');\n                this.pluginObjs.push(pluginObj);\n            });\n        }\n    }\n    ;\n    /**\n     * Adds properties to a plugin's object\n     *\n     * @see docs/plugins.md#provided-properties-and-functions\n     */\n    annotatePluginObj(obj, conf, i) {\n        let addAssertion = (info, passed, message) => {\n            if (this.resultsReported) {\n                throw new Error('Cannot add new tests results, since they were already ' +\n                    'reported.');\n            }\n            info = info || {};\n            const specName = info.specName || (obj.name + ' Plugin Tests');\n            const assertion = { passed: passed };\n            if (!passed) {\n                assertion.errorMsg = message;\n                if (info.stackTrace) {\n                    assertion.stackTrace = info.stackTrace;\n                }\n            }\n            this.assertions[specName] = this.assertions[specName] || [];\n            this.assertions[specName].push(assertion);\n        };\n        obj.name = obj.name || conf.name || conf.path || conf.package || ('Plugin #' + i);\n        obj.config = conf;\n        obj.addFailure = (message, info) => {\n            addAssertion(info, false, message);\n        };\n        obj.addSuccess = (options) => {\n            addAssertion(options, true);\n        };\n        obj.addWarning = (message, options) => {\n            options = options || {};\n            logger.warn('Warning ' +\n                (options.specName ? 'in ' + options.specName : 'from \"' + obj.name + '\" plugin') + ': ' +\n                message);\n        };\n    }\n    printPluginResults(specResults) {\n        const green = '\\x1b[32m';\n        const red = '\\x1b[31m';\n        const normalColor = '\\x1b[39m';\n        const printResult = (message, pass) => {\n            logger.info(pass ? green : red, '\\t', pass ? 'Pass: ' : 'Fail: ', message, normalColor);\n        };\n        for (const specResult of specResults) {\n            const passed = specResult.assertions.map(x => x.passed).reduce((x, y) => (x && y), true);\n            printResult(specResult.description, passed);\n            if (!passed) {\n                for (const assertion of specResult.assertions) {\n                    if (!assertion.passed) {\n                        logger.error('\\t\\t' + assertion.errorMsg);\n                        if (assertion.stackTrace) {\n                            logger.error('\\t\\t' + assertion.stackTrace.replace(/\\n/g, '\\n\\t\\t'));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Gets the tests results generated by any plugins\n     *\n     * @see lib/frameworks/README.md#requirements for a complete description of what\n     *     the results object must look like\n     *\n     * @return {Object} The results object\n     */\n    getResults() {\n        const results = { failedCount: 0, specResults: [] };\n        for (const specName in this.assertions) {\n            results.specResults.push({ description: specName, assertions: this.assertions[specName] });\n            results.failedCount +=\n                this.assertions[specName].filter(assertion => !assertion.passed).length;\n        }\n        this.printPluginResults(results.specResults);\n        this.resultsReported = true;\n        return results;\n    }\n    ;\n    /**\n     * Returns true if any loaded plugin has skipAngularStability enabled.\n     *\n     * @return {boolean}\n     */\n    skipAngularStability() {\n        const result = this.pluginObjs.some(pluginObj => pluginObj.skipAngularStability);\n        return result;\n    }\n    ;\n    /**\n     * Calls a function from a plugin safely.  If the plugin's function throws an\n     * exception or returns a rejected promise, that failure will be logged as a\n     * failed test result instead of crashing protractor.  If the tests results have\n     * already been reported, the failure will be logged to the console.\n     *\n     * @param {Object} pluginObj The plugin object containing the function to be run\n     * @param {string} funName The name of the function we want to run\n     * @param {*[]} args The arguments we want to invoke the function with\n     * @param {PromiseType} promiseType The type of promise (WebDriver or Q) that\n     *    should be used\n     * @param {boolean} resultsReported If the results have already been reported\n     * @param {*} failReturnVal The value to return if the function fails\n     *\n     * @return {webdriver.promise.Promise|Q.Promise} A promise which resolves to the\n     *     function's return value\n     */\n    safeCallPluginFun(pluginObj, funName, args, promiseType, failReturnVal) {\n        const resolver = (done) => {\n            const logError = (e) => {\n                if (this.resultsReported) {\n                    this.printPluginResults([{\n                            description: pluginObj.name + ' Runtime',\n                            assertions: [{\n                                    passed: false,\n                                    errorMsg: 'Failure during ' + funName + ': ' + (e.message || e),\n                                    stackTrace: e.stack\n                                }]\n                        }]);\n                }\n                else {\n                    pluginObj.addFailure('Failure during ' + funName + ': ' + e.message || e, { stackTrace: e.stack });\n                }\n                done(failReturnVal);\n            };\n            try {\n                const result = pluginObj[funName].apply(pluginObj, args);\n                if (webdriver.promise.isPromise(result)) {\n                    result.then(done, logError);\n                }\n                else {\n                    done(result);\n                }\n            }\n            catch (e) {\n                logError(e);\n            }\n        };\n        if (promiseType == PromiseType.Q) {\n            return q.Promise(resolver);\n        }\n        else if (ptor_1.protractor.browser.controlFlowIsEnabled()) {\n            return new webdriver.promise.Promise(resolver);\n        }\n        else {\n            return new Promise(resolver);\n        }\n    }\n    pluginFunFactory(funName, promiseType, failReturnVal) {\n        return (...args) => {\n            const promises = this.pluginObjs.filter(pluginObj => typeof pluginObj[funName] === 'function')\n                .map(pluginObj => this.safeCallPluginFun(pluginObj, funName, args, promiseType, failReturnVal));\n            return promiseType == PromiseType.Q ? q.all(promises) : webdriver.promise.all(promises);\n        };\n    }\n}\nexports.Plugins = Plugins;\n//# sourceMappingURL=plugins.js.map"]},"metadata":{},"sourceType":"script"}