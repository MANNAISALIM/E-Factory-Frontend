{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar childProcess = require('child_process');\n/**\n * A hash with configuration options for an executed command.\n *\n * - `args` - Command line arguments.\n * - `env` - Command environment; will inherit from the current process if\n *     missing.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   args: (!Array<string>|undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\n\n\nvar Options;\n/**\n * Describes a command's termination conditions.\n */\n\nvar Result = /*#__PURE__*/function () {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  function Result(code, signal) {\n    _classCallCheck(this, Result);\n\n    /** @type {?number} */\n    this.code = code;\n    /** @type {?string} */\n\n    this.signal = signal;\n  }\n  /** @override */\n\n\n  _createClass(Result, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Result(code=\".concat(this.code, \", signal=\").concat(this.signal, \")\");\n    }\n  }]);\n\n  return Result;\n}();\n\nvar COMMAND_RESULT =\n/** !WeakMap<!Command, !Promise<!Result>> */\nnew WeakMap();\nvar KILL_HOOK =\n/** !WeakMap<!Command, function(string)> */\nnew WeakMap();\n/**\n * Represents a command running in a sub-process.\n */\n\nvar Command = /*#__PURE__*/function () {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  function Command(result, onKill) {\n    _classCallCheck(this, Command);\n\n    COMMAND_RESULT.set(this, result);\n    KILL_HOOK.set(this, onKill);\n  }\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n\n\n  _createClass(Command, [{\n    key: \"result\",\n    value: function result() {\n      return (\n        /** @type {!Promise<!Result>} */\n        COMMAND_RESULT.get(this)\n      );\n    }\n    /**\n     * Sends a signal to the underlying process.\n     * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n     */\n\n  }, {\n    key: \"kill\",\n    value: function kill(opt_signal) {\n      KILL_HOOK.get(this)(opt_signal || 'SIGTERM');\n    }\n  }]);\n\n  return Command;\n}(); // PUBLIC API\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\n\n\nmodule.exports = function exec(command, opt_options) {\n  var options = opt_options || {};\n  var proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore'\n  }); // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n\n  proc.unref();\n  process.once('exit', onProcessExit);\n  var result = new Promise(function (resolve) {\n    proc.once('exit', function (code, signal) {\n      proc = null;\n      process.removeListener('exit', onProcessExit);\n      resolve(new Result(code, signal));\n    });\n  });\n  return new Command(result, killCommand);\n\n  function onProcessExit() {\n    killCommand('SIGTERM');\n  }\n\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit);\n\n    if (proc) {\n      proc.kill(signal);\n      proc = null;\n    }\n  }\n}; // Exported to improve generated API documentation.\n\n\nmodule.exports.Command = Command;\n/** @typedef {!Options} */\n\nmodule.exports.Options = Options;\nmodule.exports.Result = Result;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/io/exec.js"],"names":["childProcess","require","Options","Result","code","signal","COMMAND_RESULT","WeakMap","KILL_HOOK","Command","result","onKill","set","get","opt_signal","module","exports","exec","command","opt_options","options","proc","spawn","args","env","process","stdio","unref","once","onProcessExit","Promise","resolve","removeListener","killCommand","kill"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst childProcess = require('child_process');\n\n\n/**\n * A hash with configuration options for an executed command.\n *\n * - `args` - Command line arguments.\n * - `env` - Command environment; will inherit from the current process if\n *     missing.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   args: (!Array<string>|undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\nvar Options;\n\n\n/**\n * Describes a command's termination conditions.\n */\nclass Result {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  constructor(code, signal) {\n    /** @type {?number} */\n    this.code = code;\n\n    /** @type {?string} */\n    this.signal = signal;\n  }\n\n  /** @override */\n  toString() {\n    return `Result(code=${this.code}, signal=${this.signal})`;\n  }\n}\n\n\nconst COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */new WeakMap;\nconst KILL_HOOK = /** !WeakMap<!Command, function(string)> */new WeakMap;\n\n/**\n * Represents a command running in a sub-process.\n */\nclass Command {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  constructor(result, onKill) {\n    COMMAND_RESULT.set(this, result);\n    KILL_HOOK.set(this, onKill);\n  }\n\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n  result() {\n    return /** @type {!Promise<!Result>} */(COMMAND_RESULT.get(this));\n  }\n\n  /**\n   * Sends a signal to the underlying process.\n   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n   */\n  kill(opt_signal) {\n    KILL_HOOK.get(this)(opt_signal || 'SIGTERM');\n  }\n}\n\n\n// PUBLIC API\n\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\nmodule.exports = function exec(command, opt_options) {\n  var options = opt_options || {};\n\n  var proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore'\n  });\n\n  // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n  proc.unref();\n  process.once('exit', onProcessExit);\n\n  let result = new Promise(resolve => {\n    proc.once('exit', (code, signal) => {\n      proc = null;\n      process.removeListener('exit', onProcessExit);\n      resolve(new Result(code, signal));\n    });\n  });\n  return new Command(result, killCommand);\n\n  function onProcessExit() {\n    killCommand('SIGTERM');\n  }\n\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit);\n    if (proc) {\n      proc.kill(signal);\n      proc = null;\n    }\n  }\n};\n\n// Exported to improve generated API documentation.\n\nmodule.exports.Command = Command;\n/** @typedef {!Options} */\nmodule.exports.Options = Options;\nmodule.exports.Result = Result;\n"]},"metadata":{},"sourceType":"script"}