{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n\nvar webdriver_commands_1 = require(\"./webdriver_commands\");\n/**\n * A proxy that understands WebDriver commands. Users can add barriers (similar to middleware in\n * express) that will be called before forwarding the request to WebDriver. The proxy will wait for\n * each barrier to finish, calling them in the order in which they were added.\n */\n\n\nvar WebDriverProxy = /*#__PURE__*/function () {\n  function WebDriverProxy(seleniumAddress) {\n    _classCallCheck(this, WebDriverProxy);\n\n    this.barriers = [];\n    this.seleniumAddress = seleniumAddress;\n  }\n\n  _createClass(WebDriverProxy, [{\n    key: \"addBarrier\",\n    value: function addBarrier(barrier) {\n      this.barriers.push(barrier);\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(originalRequest, response) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var command, replyWithError, _iterator, _step, barrier, parsedUrl, options, forwardedRequest, reqData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                command = webdriver_commands_1.parseWebDriverCommand(originalRequest.url, originalRequest.method);\n\n                replyWithError = function replyWithError(err) {\n                  response.writeHead(502);\n\n                  if (err && err.toString) {\n                    response.write(err.toString());\n                  }\n\n                  response.end();\n                }; // Process barriers in order, one at a time.\n\n\n                _context.prev = 2;\n                _iterator = _createForOfIteratorHelper(this.barriers);\n                _context.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                barrier = _step.value;\n                _context.next = 10;\n                return barrier.onCommand(command);\n\n              case 10:\n                _context.next = 6;\n                break;\n\n              case 12:\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](4);\n\n                _iterator.e(_context.t0);\n\n              case 17:\n                _context.prev = 17;\n\n                _iterator.f();\n\n                return _context.finish(17);\n\n              case 20:\n                _context.next = 26;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t1 = _context[\"catch\"](2);\n                replyWithError(_context.t1); // Don't call through if a barrier fails.\n\n                return _context.abrupt(\"return\");\n\n              case 26:\n                parsedUrl = url.parse(this.seleniumAddress);\n                options = {};\n                options.method = originalRequest.method;\n                options.path = parsedUrl.path + originalRequest.url;\n                options.hostname = parsedUrl.hostname;\n                options.port = parseInt(parsedUrl.port);\n                options.headers = originalRequest.headers;\n                forwardedRequest = http.request(options); // clang-format off\n\n                reqData = '';\n                originalRequest.on('data', function (d) {\n                  reqData += d;\n                  forwardedRequest.write(d);\n                }).on('end', function () {\n                  command.handleData(reqData);\n                  forwardedRequest.end();\n                }).on('error', replyWithError);\n                forwardedRequest.on('response', function (seleniumResponse) {\n                  response.writeHead(seleniumResponse.statusCode, seleniumResponse.headers);\n                  var respData = '';\n                  seleniumResponse.on('data', function (d) {\n                    respData += d;\n                    response.write(d);\n                  }).on('end', function () {\n                    command.handleResponse(seleniumResponse.statusCode, respData);\n                    response.end();\n                  }).on('error', replyWithError);\n                }).on('error', replyWithError); // clang-format on\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 22], [4, 14, 17, 20]]);\n      }));\n    }\n  }]);\n\n  return WebDriverProxy;\n}();\n\nexports.WebDriverProxy = WebDriverProxy;","map":{"version":3,"sources":["../../lib/webdriver_proxy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\n/**\n * A proxy that understands WebDriver commands. Users can add barriers (similar to middleware in\n * express) that will be called before forwarding the request to WebDriver. The proxy will wait for\n * each barrier to finish, calling them in the order in which they were added.\n */\nclass WebDriverProxy {\n    constructor(seleniumAddress) {\n        this.barriers = [];\n        this.seleniumAddress = seleniumAddress;\n    }\n    addBarrier(barrier) {\n        this.barriers.push(barrier);\n    }\n    handleRequest(originalRequest, response) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let command = webdriver_commands_1.parseWebDriverCommand(originalRequest.url, originalRequest.method);\n            let replyWithError = (err) => {\n                response.writeHead(502);\n                if (err && err.toString) {\n                    response.write(err.toString());\n                }\n                response.end();\n            };\n            // Process barriers in order, one at a time.\n            try {\n                for (let barrier of this.barriers) {\n                    yield barrier.onCommand(command);\n                }\n            }\n            catch (err) {\n                replyWithError(err);\n                // Don't call through if a barrier fails.\n                return;\n            }\n            let parsedUrl = url.parse(this.seleniumAddress);\n            let options = {};\n            options.method = originalRequest.method;\n            options.path = parsedUrl.path + originalRequest.url;\n            options.hostname = parsedUrl.hostname;\n            options.port = parseInt(parsedUrl.port);\n            options.headers = originalRequest.headers;\n            let forwardedRequest = http.request(options);\n            // clang-format off\n            let reqData = '';\n            originalRequest.on('data', (d) => {\n                reqData += d;\n                forwardedRequest.write(d);\n            }).on('end', () => {\n                command.handleData(reqData);\n                forwardedRequest.end();\n            }).on('error', replyWithError);\n            forwardedRequest.on('response', (seleniumResponse) => {\n                response.writeHead(seleniumResponse.statusCode, seleniumResponse.headers);\n                let respData = '';\n                seleniumResponse.on('data', (d) => {\n                    respData += d;\n                    response.write(d);\n                }).on('end', () => {\n                    command.handleResponse(seleniumResponse.statusCode, respData);\n                    response.end();\n                }).on('error', replyWithError);\n            }).on('error', replyWithError);\n            // clang-format on\n        });\n    }\n}\nexports.WebDriverProxy = WebDriverProxy;\n//# sourceMappingURL=webdriver_proxy.js.map"]},"metadata":{},"sourceType":"script"}