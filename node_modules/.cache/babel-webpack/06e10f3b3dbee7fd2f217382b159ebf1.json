{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnG=Search\n *\n * @enum {string}\n */\n\nvar Key = {\n  NULL: \"\\uE000\",\n  CANCEL: \"\\uE001\",\n  // ^break\n  HELP: \"\\uE002\",\n  BACK_SPACE: \"\\uE003\",\n  TAB: \"\\uE004\",\n  CLEAR: \"\\uE005\",\n  RETURN: \"\\uE006\",\n  ENTER: \"\\uE007\",\n  SHIFT: \"\\uE008\",\n  CONTROL: \"\\uE009\",\n  ALT: \"\\uE00A\",\n  PAUSE: \"\\uE00B\",\n  ESCAPE: \"\\uE00C\",\n  SPACE: \"\\uE00D\",\n  PAGE_UP: \"\\uE00E\",\n  PAGE_DOWN: \"\\uE00F\",\n  END: \"\\uE010\",\n  HOME: \"\\uE011\",\n  ARROW_LEFT: \"\\uE012\",\n  LEFT: \"\\uE012\",\n  ARROW_UP: \"\\uE013\",\n  UP: \"\\uE013\",\n  ARROW_RIGHT: \"\\uE014\",\n  RIGHT: \"\\uE014\",\n  ARROW_DOWN: \"\\uE015\",\n  DOWN: \"\\uE015\",\n  INSERT: \"\\uE016\",\n  DELETE: \"\\uE017\",\n  SEMICOLON: \"\\uE018\",\n  EQUALS: \"\\uE019\",\n  NUMPAD0: \"\\uE01A\",\n  // number pad keys\n  NUMPAD1: \"\\uE01B\",\n  NUMPAD2: \"\\uE01C\",\n  NUMPAD3: \"\\uE01D\",\n  NUMPAD4: \"\\uE01E\",\n  NUMPAD5: \"\\uE01F\",\n  NUMPAD6: \"\\uE020\",\n  NUMPAD7: \"\\uE021\",\n  NUMPAD8: \"\\uE022\",\n  NUMPAD9: \"\\uE023\",\n  MULTIPLY: \"\\uE024\",\n  ADD: \"\\uE025\",\n  SEPARATOR: \"\\uE026\",\n  SUBTRACT: \"\\uE027\",\n  DECIMAL: \"\\uE028\",\n  DIVIDE: \"\\uE029\",\n  F1: \"\\uE031\",\n  // function keys\n  F2: \"\\uE032\",\n  F3: \"\\uE033\",\n  F4: \"\\uE034\",\n  F5: \"\\uE035\",\n  F6: \"\\uE036\",\n  F7: \"\\uE037\",\n  F8: \"\\uE038\",\n  F9: \"\\uE039\",\n  F10: \"\\uE03A\",\n  F11: \"\\uE03B\",\n  F12: \"\\uE03C\",\n  COMMAND: \"\\uE03D\",\n  // Apple command key\n  META: \"\\uE03D\" // alias for Windows key\n\n};\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} var_args The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\n\nKey.chord = function (var_args) {\n  return Array.prototype.slice.call(arguments, 0).join('') + Key.NULL;\n};\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](http://docs.seleniumhq.org/download/).\n */\n\n\nvar FileDetector = /*#__PURE__*/function () {\n  function FileDetector() {\n    _classCallCheck(this, FileDetector);\n  }\n\n  _createClass(FileDetector, [{\n    key: \"handleFile\",\n\n    /**\n     * Handles the file specified by the given path, preparing it for use with\n     * the current browser. If the path does not refer to a valid file, it will\n     * be returned unchanged, otherwise a path suitable for use with the current\n     * browser will be returned.\n     *\n     * This default implementation is a no-op. Subtypes may override this function\n     * for custom tailored file handling.\n     *\n     * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n     * @param {string} path The path to process.\n     * @return {!Promise<string>} A promise for the processed file path.\n     * @package\n     */\n    value: function handleFile(driver, path) {\n      return Promise.resolve(path);\n    }\n  }]);\n\n  return FileDetector;\n}(); // PUBLIC API\n\n\nmodule.exports = {\n  Button: Button,\n  Key: Key,\n  FileDetector: FileDetector\n};","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/lib/input.js"],"names":["Button","LEFT","MIDDLE","RIGHT","Key","NULL","CANCEL","HELP","BACK_SPACE","TAB","CLEAR","RETURN","ENTER","SHIFT","CONTROL","ALT","PAUSE","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","ARROW_LEFT","ARROW_UP","UP","ARROW_RIGHT","ARROW_DOWN","DOWN","INSERT","DELETE","SEMICOLON","EQUALS","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","COMMAND","META","chord","var_args","Array","prototype","slice","call","arguments","join","FileDetector","driver","path","Promise","resolve","module","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\n\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nconst Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\n\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnG=Search\n *\n * @enum {string}\n */\nconst Key = {\n  NULL:         '\\uE000',\n  CANCEL:       '\\uE001',  // ^break\n  HELP:         '\\uE002',\n  BACK_SPACE:   '\\uE003',\n  TAB:          '\\uE004',\n  CLEAR:        '\\uE005',\n  RETURN:       '\\uE006',\n  ENTER:        '\\uE007',\n  SHIFT:        '\\uE008',\n  CONTROL:      '\\uE009',\n  ALT:          '\\uE00A',\n  PAUSE:        '\\uE00B',\n  ESCAPE:       '\\uE00C',\n  SPACE:        '\\uE00D',\n  PAGE_UP:      '\\uE00E',\n  PAGE_DOWN:    '\\uE00F',\n  END:          '\\uE010',\n  HOME:         '\\uE011',\n  ARROW_LEFT:   '\\uE012',\n  LEFT:         '\\uE012',\n  ARROW_UP:     '\\uE013',\n  UP:           '\\uE013',\n  ARROW_RIGHT:  '\\uE014',\n  RIGHT:        '\\uE014',\n  ARROW_DOWN:   '\\uE015',\n  DOWN:         '\\uE015',\n  INSERT:       '\\uE016',\n  DELETE:       '\\uE017',\n  SEMICOLON:    '\\uE018',\n  EQUALS:       '\\uE019',\n\n  NUMPAD0:      '\\uE01A',  // number pad keys\n  NUMPAD1:      '\\uE01B',\n  NUMPAD2:      '\\uE01C',\n  NUMPAD3:      '\\uE01D',\n  NUMPAD4:      '\\uE01E',\n  NUMPAD5:      '\\uE01F',\n  NUMPAD6:      '\\uE020',\n  NUMPAD7:      '\\uE021',\n  NUMPAD8:      '\\uE022',\n  NUMPAD9:      '\\uE023',\n  MULTIPLY:     '\\uE024',\n  ADD:          '\\uE025',\n  SEPARATOR:    '\\uE026',\n  SUBTRACT:     '\\uE027',\n  DECIMAL:      '\\uE028',\n  DIVIDE:       '\\uE029',\n\n  F1:           '\\uE031',  // function keys\n  F2:           '\\uE032',\n  F3:           '\\uE033',\n  F4:           '\\uE034',\n  F5:           '\\uE035',\n  F6:           '\\uE036',\n  F7:           '\\uE037',\n  F8:           '\\uE038',\n  F9:           '\\uE039',\n  F10:          '\\uE03A',\n  F11:          '\\uE03B',\n  F12:          '\\uE03C',\n\n  COMMAND:      '\\uE03D',  // Apple command key\n  META:         '\\uE03D'   // alias for Windows key\n};\n\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} var_args The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function(var_args) {\n  return Array.prototype.slice.call(arguments, 0).join('') + Key.NULL;\n};\n\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](http://docs.seleniumhq.org/download/).\n */\nclass FileDetector {\n\n  /**\n   * Handles the file specified by the given path, preparing it for use with\n   * the current browser. If the path does not refer to a valid file, it will\n   * be returned unchanged, otherwise a path suitable for use with the current\n   * browser will be returned.\n   *\n   * This default implementation is a no-op. Subtypes may override this function\n   * for custom tailored file handling.\n   *\n   * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n   * @param {string} path The path to process.\n   * @return {!Promise<string>} A promise for the processed file path.\n   * @package\n   */\n  handleFile(driver, path) {\n    return Promise.resolve(path);\n  }\n}\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Button: Button,\n  Key: Key,\n  FileDetector: FileDetector\n};\n"]},"metadata":{},"sourceType":"script"}