{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Symbols = require('./symbols');\n/**\n * Recognized browser names.\n * @enum {string}\n */\n\n\nvar Browser = {\n  ANDROID: 'android',\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  IE: 'internet explorer',\n  INTERNET_EXPLORER: 'internet explorer',\n  IPAD: 'iPad',\n  IPHONE: 'iPhone',\n  OPERA: 'opera',\n  PHANTOM_JS: 'phantomjs',\n  SAFARI: 'safari',\n  HTMLUNIT: 'htmlunit'\n};\n/**\n * Common Capability keys.\n * @enum {string}\n */\n\nvar Capability = {\n  /**\n   * Indicates whether a driver should accept all SSL certs by default. This\n   * capability only applies when requesting a new session. To query whether\n   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.\n   */\n  ACCEPT_SSL_CERTS: 'acceptSslCerts',\n\n  /**\n   * The browser name. Common browser names are defined in the {@link Browser}\n   * enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /**\n   * Defines how elements should be scrolled into the viewport for interaction.\n   * This capability will be set to zero (0) if elements are aligned with the\n   * top of the viewport, or one (1) if aligned with the bottom. The default\n   * behavior is to align with the top of the viewport.\n   */\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n\n  /**\n   * Whether the driver is capable of handling modal alerts (e.g. alert,\n   * confirm, prompt). To define how a driver <i>should</i> handle alerts,\n   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.\n   */\n  HANDLES_ALERTS: 'handlesAlerts',\n\n  /**\n   * Key for the logging driver logging preferences.\n   */\n  LOGGING_PREFS: 'loggingPrefs',\n\n  /**\n   * Whether this session generates native events when simulating user input.\n   */\n  NATIVE_EVENTS: 'nativeEvents',\n\n  /**\n   * Describes the platform the browser is running on. Will be one of\n   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a\n   * session, ANY may be used to indicate no platform preference (this is\n   * semantically equivalent to omitting the platform capability).\n   */\n  PLATFORM: 'platform',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /** Whether the driver supports changing the browser's orientation. */\n  ROTATABLE: 'rotatable',\n\n  /**\n   * Whether a driver is only capable of handling secure SSL certs. To request\n   * that a driver accept insecure SSL certs by default, use\n   * {@link #ACCEPT_SSL_CERTS}.\n   */\n  SECURE_SSL: 'secureSsl',\n\n  /** Whether the driver supports manipulating the app cache. */\n  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',\n\n  /** Whether the driver supports locating elements with CSS selectors. */\n  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',\n\n  /** Whether the browser supports JavaScript. */\n  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',\n\n  /** Whether the driver supports controlling the browser's location info. */\n  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',\n\n  /** Whether the driver supports taking screenshots. */\n  TAKES_SCREENSHOT: 'takesScreenshot',\n\n  /**\n   * Defines how the driver should handle unexpected alerts. The value should\n   * be one of \"accept\", \"dismiss\", or \"ignore\".\n   */\n  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehaviour',\n\n  /** Defines the browser version. */\n  VERSION: 'version'\n};\n/**\n * Describes how a proxy should be configured for a WebDriver session.\n * @record\n */\n\nfunction ProxyConfig() {}\n/**\n * The proxy type. Must be one of {\"manual\", \"pac\", \"system\"}.\n * @type {string}\n */\n\n\nProxyConfig.prototype.proxyType;\n/**\n * URL for the PAC file to use. Only used if {@link #proxyType} is \"pac\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.proxyAutoconfigUrl;\n/**\n * The proxy host for FTP requests. Only used if {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.ftpProxy;\n/**\n * The proxy host for HTTP requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.httpProxy;\n/**\n * The proxy host for HTTPS requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.sslProxy;\n/**\n * A comma delimited list of hosts which should bypass all proxies. Only used if\n * {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.noProxy;\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\n\nfunction toMap(hash) {\n  var m = new Map();\n\n  for (var key in hash) {\n    if (hash.hasOwnProperty(key)) {\n      m.set(key, hash[key]);\n    }\n  }\n\n  return m;\n}\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\n\n\nvar Capabilities = /*#__PURE__*/function () {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  function Capabilities() {\n    var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n    _classCallCheck(this, Capabilities);\n\n    if (other instanceof Capabilities) {\n      other = other.map_;\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other);\n    }\n    /** @private @const {!Map<string, ?>} */\n\n\n    this.map_ = new Map(other);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Android.\n   */\n\n\n  _createClass(Capabilities, [{\n    key: Symbols.serialize,\n\n    /**\n     * @return {!Object<string, ?>} The JSON representation of this instance.\n     *     Note, the returned object may contain nested promised values.\n     * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n     *     Map).\n     */\n    value: function value() {\n      return serialize(this);\n    }\n    /**\n     * @param {string} key the parameter key to get.\n     * @return {T} the stored parameter value.\n     * @template T\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.map_.get(key);\n    }\n    /**\n     * @param {string} key the key to test.\n     * @return {boolean} whether this capability set has the specified key.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this.map_.has(key);\n    }\n    /**\n     * @return {!Iterator<string>} an iterator of the keys set.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map_.keys();\n    }\n    /** @return {number} The number of capabilities set. */\n\n  }, {\n    key: \"merge\",\n\n    /**\n     * Merges another set of capabilities into this instance.\n     * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n     *     set of capabilities to merge.\n     * @return {!Capabilities} A self reference.\n     */\n    value: function merge(other) {\n      if (!other) {\n        throw new TypeError('no capabilities provided for merge');\n      }\n\n      var map;\n\n      if (other instanceof Capabilities) {\n        map = other.map_;\n      } else if (other instanceof Map) {\n        map = other;\n      } else {\n        other = toMap(other);\n      }\n\n      var _iterator = _createForOfIteratorHelper(other.keys()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          this.set(key, other.get(key));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this;\n    }\n    /**\n     * Deletes an entry from this set of capabilities.\n     *\n     * @param {string} key the capability key to delete.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.map_.delete(key);\n    }\n    /**\n     * @param {string} key The capability key.\n     * @param {*} value The capability value.\n     * @return {!Capabilities} A self reference.\n     * @throws {TypeError} If the `key` is not a string.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (typeof key !== 'string') {\n        throw new TypeError('Capability keys must be strings: ' + typeof key);\n      }\n\n      this.map_.set(key, value);\n      return this;\n    }\n    /**\n     * Sets the logging preferences. Preferences may be specified as a\n     * {@link ./logging.Preferences} instance, or as a map of log-type to\n     * log-level.\n     * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n     *     preferences.\n     * @return {!Capabilities} A self reference.\n     */\n\n  }, {\n    key: \"setLoggingPrefs\",\n    value: function setLoggingPrefs(prefs) {\n      return this.set(Capability.LOGGING_PREFS, prefs);\n    }\n    /**\n     * Sets the proxy configuration for this instance.\n     * @param {ProxyConfig} proxy The desired proxy configuration.\n     * @return {!Capabilities} A self reference.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxy) {\n      return this.set(Capability.PROXY, proxy);\n    }\n    /**\n     * Sets whether native events should be used.\n     * @param {boolean} enabled Whether to enable native events.\n     * @return {!Capabilities} A self reference.\n     */\n\n  }, {\n    key: \"setEnableNativeEvents\",\n    value: function setEnableNativeEvents(enabled) {\n      return this.set(Capability.NATIVE_EVENTS, enabled);\n    }\n    /**\n     * Sets how elements should be scrolled into view for interaction.\n     * @param {number} behavior The desired scroll behavior: either 0 to align\n     *     with the top of the viewport or 1 to align with the bottom.\n     * @return {!Capabilities} A self reference.\n     */\n\n  }, {\n    key: \"setScrollBehavior\",\n    value: function setScrollBehavior(behavior) {\n      return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);\n    }\n    /**\n     * Sets the default action to take with an unexpected alert before returning\n     * an error.\n     * @param {string} behavior The desired behavior should be \"accept\",\n     *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n     * @return {!Capabilities} A self reference.\n     */\n\n  }, {\n    key: \"setAlertBehavior\",\n    value: function setAlertBehavior(behavior) {\n      return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.map_.size;\n    }\n  }], [{\n    key: \"android\",\n    value: function android() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.ANDROID);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Chrome.\n     */\n\n  }, {\n    key: \"chrome\",\n    value: function chrome() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n     */\n\n  }, {\n    key: \"edge\",\n    value: function edge() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.EDGE);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Firefox.\n     */\n\n  }, {\n    key: \"firefox\",\n    value: function firefox() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n     */\n\n  }, {\n    key: \"ie\",\n    value: function ie() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for iPad.\n     */\n\n  }, {\n    key: \"ipad\",\n    value: function ipad() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPAD);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for iPhone.\n     */\n\n  }, {\n    key: \"iphone\",\n    value: function iphone() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPHONE);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Opera.\n     */\n\n  }, {\n    key: \"opera\",\n    value: function opera() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.OPERA);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for PhantomJS.\n     */\n\n  }, {\n    key: \"phantomjs\",\n    value: function phantomjs() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for Safari.\n     */\n\n  }, {\n    key: \"safari\",\n    value: function safari() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.SAFARI);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for HTMLUnit.\n     */\n\n  }, {\n    key: \"htmlunit\",\n    value: function htmlunit() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT);\n    }\n    /**\n     * @return {!Capabilities} A basic set of capabilities for HTMLUnit\n     *     with enabled Javascript.\n     */\n\n  }, {\n    key: \"htmlunitwithjs\",\n    value: function htmlunitwithjs() {\n      return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT).set(Capability.SUPPORTS_JAVASCRIPT, true);\n    }\n  }]);\n\n  return Capabilities;\n}();\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\n\n\nfunction serialize(caps) {\n  var ret = {};\n\n  var _iterator2 = _createForOfIteratorHelper(caps.keys()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      var cap = caps.get(key);\n\n      if (cap !== undefined && cap !== null) {\n        ret[key] = cap;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return ret;\n} // PUBLIC API\n\n\nmodule.exports = {\n  Browser: Browser,\n  Capabilities: Capabilities,\n  Capability: Capability,\n  ProxyConfig: ProxyConfig\n};","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/lib/capabilities.js"],"names":["Symbols","require","Browser","ANDROID","CHROME","EDGE","FIREFOX","IE","INTERNET_EXPLORER","IPAD","IPHONE","OPERA","PHANTOM_JS","SAFARI","HTMLUNIT","Capability","ACCEPT_SSL_CERTS","BROWSER_NAME","ELEMENT_SCROLL_BEHAVIOR","HANDLES_ALERTS","LOGGING_PREFS","NATIVE_EVENTS","PLATFORM","PROXY","ROTATABLE","SECURE_SSL","SUPPORTS_APPLICATION_CACHE","SUPPORTS_CSS_SELECTORS","SUPPORTS_JAVASCRIPT","SUPPORTS_LOCATION_CONTEXT","TAKES_SCREENSHOT","UNEXPECTED_ALERT_BEHAVIOR","VERSION","ProxyConfig","prototype","proxyType","proxyAutoconfigUrl","ftpProxy","httpProxy","sslProxy","noProxy","toMap","hash","m","Map","key","hasOwnProperty","set","Capabilities","other","undefined","map_","serialize","get","has","keys","TypeError","map","delete","value","prefs","proxy","enabled","behavior","size","caps","ret","cap","module","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nconst Symbols = require('./symbols');\n\n\n/**\n * Recognized browser names.\n * @enum {string}\n */\nconst Browser = {\n  ANDROID: 'android',\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  IE: 'internet explorer',\n  INTERNET_EXPLORER: 'internet explorer',\n  IPAD: 'iPad',\n  IPHONE: 'iPhone',\n  OPERA: 'opera',\n  PHANTOM_JS: 'phantomjs',\n  SAFARI: 'safari',\n  HTMLUNIT: 'htmlunit'\n};\n\n\n/**\n * Common Capability keys.\n * @enum {string}\n */\nconst Capability = {\n\n  /**\n   * Indicates whether a driver should accept all SSL certs by default. This\n   * capability only applies when requesting a new session. To query whether\n   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.\n   */\n  ACCEPT_SSL_CERTS: 'acceptSslCerts',\n\n\n  /**\n   * The browser name. Common browser names are defined in the {@link Browser}\n   * enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /**\n   * Defines how elements should be scrolled into the viewport for interaction.\n   * This capability will be set to zero (0) if elements are aligned with the\n   * top of the viewport, or one (1) if aligned with the bottom. The default\n   * behavior is to align with the top of the viewport.\n   */\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n\n  /**\n   * Whether the driver is capable of handling modal alerts (e.g. alert,\n   * confirm, prompt). To define how a driver <i>should</i> handle alerts,\n   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.\n   */\n  HANDLES_ALERTS: 'handlesAlerts',\n\n  /**\n   * Key for the logging driver logging preferences.\n   */\n  LOGGING_PREFS: 'loggingPrefs',\n\n  /**\n   * Whether this session generates native events when simulating user input.\n   */\n  NATIVE_EVENTS: 'nativeEvents',\n\n  /**\n   * Describes the platform the browser is running on. Will be one of\n   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a\n   * session, ANY may be used to indicate no platform preference (this is\n   * semantically equivalent to omitting the platform capability).\n   */\n  PLATFORM: 'platform',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /** Whether the driver supports changing the browser's orientation. */\n  ROTATABLE: 'rotatable',\n\n  /**\n   * Whether a driver is only capable of handling secure SSL certs. To request\n   * that a driver accept insecure SSL certs by default, use\n   * {@link #ACCEPT_SSL_CERTS}.\n   */\n  SECURE_SSL: 'secureSsl',\n\n  /** Whether the driver supports manipulating the app cache. */\n  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',\n\n  /** Whether the driver supports locating elements with CSS selectors. */\n  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',\n\n  /** Whether the browser supports JavaScript. */\n  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',\n\n  /** Whether the driver supports controlling the browser's location info. */\n  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',\n\n  /** Whether the driver supports taking screenshots. */\n  TAKES_SCREENSHOT: 'takesScreenshot',\n\n  /**\n   * Defines how the driver should handle unexpected alerts. The value should\n   * be one of \"accept\", \"dismiss\", or \"ignore\".\n   */\n  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehaviour',\n\n  /** Defines the browser version. */\n  VERSION: 'version'\n};\n\n\n/**\n * Describes how a proxy should be configured for a WebDriver session.\n * @record\n */\nfunction ProxyConfig() {}\n\n/**\n * The proxy type. Must be one of {\"manual\", \"pac\", \"system\"}.\n * @type {string}\n */\nProxyConfig.prototype.proxyType;\n\n/**\n * URL for the PAC file to use. Only used if {@link #proxyType} is \"pac\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.proxyAutoconfigUrl;\n\n/**\n * The proxy host for FTP requests. Only used if {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.ftpProxy;\n\n/**\n * The proxy host for HTTP requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.httpProxy;\n\n/**\n * The proxy host for HTTPS requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.sslProxy;\n\n/**\n * A comma delimited list of hosts which should bypass all proxies. Only used if\n * {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.noProxy;\n\n\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\nfunction toMap(hash) {\n  let m = new Map;\n  for (let key in hash) {\n    if (hash.hasOwnProperty(key)) {\n      m.set(key, hash[key]);\n    }\n  }\n  return m;\n}\n\n\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\nclass Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    if (other instanceof Capabilities) {\n      other = other.map_;\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other);\n    }\n    /** @private @const {!Map<string, ?>} */\n    this.map_ = new Map(other);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Android.\n   */\n  static android() {\n    return new Capabilities()\n        .set(Capability.BROWSER_NAME, Browser.ANDROID);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Chrome.\n   */\n  static chrome() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n   */\n  static edge() {\n    return new Capabilities()\n        .set(Capability.BROWSER_NAME, Browser.EDGE);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Firefox.\n   */\n  static firefox() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n   */\n  static ie() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPad.\n   */\n  static ipad() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.IPAD);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPhone.\n   */\n  static iphone() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.IPHONE);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Opera.\n   */\n  static opera() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.OPERA);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for PhantomJS.\n   */\n  static phantomjs() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Safari.\n   */\n  static safari() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.SAFARI);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.\n   */\n  static htmlunit() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.HTMLUNIT);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit\n   *     with enabled Javascript.\n   */\n  static htmlunitwithjs() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.HTMLUNIT).\n        set(Capability.SUPPORTS_JAVASCRIPT, true);\n  }\n\n  /**\n   * @return {!Object<string, ?>} The JSON representation of this instance.\n   *     Note, the returned object may contain nested promised values.\n   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n   *     Map).\n   */\n  [Symbols.serialize]() {\n    return serialize(this);\n  }\n\n  /**\n   * @param {string} key the parameter key to get.\n   * @return {T} the stored parameter value.\n   * @template T\n   */\n  get(key) {\n    return this.map_.get(key);\n  }\n\n  /**\n   * @param {string} key the key to test.\n   * @return {boolean} whether this capability set has the specified key.\n   */\n  has(key) {\n    return this.map_.has(key);\n  }\n\n  /**\n   * @return {!Iterator<string>} an iterator of the keys set.\n   */\n  keys() {\n    return this.map_.keys();\n  }\n\n  /** @return {number} The number of capabilities set. */\n  get size() {\n    return this.map_.size;\n  }\n\n  /**\n   * Merges another set of capabilities into this instance.\n   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n   *     set of capabilities to merge.\n   * @return {!Capabilities} A self reference.\n   */\n  merge(other) {\n    if (!other) {\n      throw new TypeError('no capabilities provided for merge');\n    }\n\n    let map;\n    if (other instanceof Capabilities) {\n      map = other.map_;\n    } else if (other instanceof Map) {\n      map = other;\n    } else {\n      other = toMap(other);\n    }\n\n    for (let key of other.keys()) {\n      this.set(key, other.get(key));\n    }\n\n    return this;\n  }\n\n  /**\n   * Deletes an entry from this set of capabilities.\n   *\n   * @param {string} key the capability key to delete.\n   */\n  delete(key) {\n    this.map_.delete(key);\n  }\n\n  /**\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Capabilities} A self reference.\n   * @throws {TypeError} If the `key` is not a string.\n   */\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('Capability keys must be strings: ' + typeof key);\n    }\n    this.map_.set(key, value);\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences. Preferences may be specified as a\n   * {@link ./logging.Preferences} instance, or as a map of log-type to\n   * log-level.\n   * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n   *     preferences.\n   * @return {!Capabilities} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    return this.set(Capability.LOGGING_PREFS, prefs);\n  }\n\n  /**\n   * Sets the proxy configuration for this instance.\n   * @param {ProxyConfig} proxy The desired proxy configuration.\n   * @return {!Capabilities} A self reference.\n   */\n  setProxy(proxy) {\n    return this.set(Capability.PROXY, proxy);\n  }\n\n  /**\n   * Sets whether native events should be used.\n   * @param {boolean} enabled Whether to enable native events.\n   * @return {!Capabilities} A self reference.\n   */\n  setEnableNativeEvents(enabled) {\n    return this.set(Capability.NATIVE_EVENTS, enabled);\n  }\n\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align\n   *     with the top of the viewport or 1 to align with the bottom.\n   * @return {!Capabilities} A self reference.\n   */\n  setScrollBehavior(behavior) {\n    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   * @param {string} behavior The desired behavior should be \"accept\",\n   *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n   * @return {!Capabilities} A self reference.\n   */\n  setAlertBehavior(behavior) {\n    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);\n  }\n}\n\n\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\nfunction serialize(caps) {\n  let ret = {};\n  for (let key of caps.keys()) {\n    let cap = caps.get(key);\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap;\n    }\n  }\n  return ret;\n}\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Browser: Browser,\n  Capabilities: Capabilities,\n  Capability: Capability,\n  ProxyConfig: ProxyConfig\n};\n"]},"metadata":{},"sourceType":"script"}