{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar util = require('util');\n\nvar httpUtil = require('../http/util');\n\nvar io = require('../io');\n\nvar exec = require('../io/exec');\n\nvar _require = require('../io/zip'),\n    Zip = _require.Zip;\n\nvar cmd = require('../lib/command');\n\nvar input = require('../lib/input');\n\nvar promise = require('../lib/promise');\n\nvar webdriver = require('../lib/webdriver');\n\nvar net = require('../net');\n\nvar portprober = require('../net/portprober');\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\n\n\nvar StdIoOptions;\n/**\n * @typedef {(string|!IThenable<string>)}\n */\n\nvar CommandLineFlag;\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\n\nfunction ServiceOptions() {}\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\n\n\nServiceOptions.prototype.loopback;\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\n\nServiceOptions.prototype.hostname;\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\n\nServiceOptions.prototype.port;\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\n\nServiceOptions.prototype.args;\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\n\nServiceOptions.prototype.path;\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\n\nServiceOptions.prototype.env;\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\n\nServiceOptions.prototype.stdio;\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\n\nvar DriverService = /*#__PURE__*/function () {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  function DriverService(executable, options) {\n    _classCallCheck(this, DriverService);\n\n    /** @private {string} */\n    this.executable_ = executable;\n    /** @private {boolean} */\n\n    this.loopbackOnly_ = !!options.loopback;\n    /** @private {(string|undefined)} */\n\n    this.hostname_ = options.hostname;\n    /** @private {(number|!IThenable<number>)} */\n\n    this.port_ = options.port;\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n\n    this.args_ = options.args;\n    /** @private {string} */\n\n    this.path_ = options.path || '/';\n    /** @private {!Object<string, string>} */\n\n    this.env_ = options.env || process.env;\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n\n    this.stdio_ = options.stdio || 'ignore';\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n\n    this.command_ = null;\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n\n    this.address_ = null;\n  }\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n\n\n  _createClass(DriverService, [{\n    key: \"address\",\n    value: function address() {\n      if (this.address_) {\n        return this.address_;\n      }\n\n      throw Error('Server has not been started.');\n    }\n    /**\n     * Returns whether the underlying process is still running. This does not take\n     * into account whether the process is in the process of shutting down.\n     * @return {boolean} Whether the underlying service process is running.\n     */\n\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.address_;\n    }\n    /**\n     * Starts the server if it is not already running.\n     * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n     *     server to start accepting requests. Defaults to 30 seconds.\n     * @return {!Promise<string>} A promise that will resolve to the server's base\n     *     URL when it has started accepting requests. If the timeout expires\n     *     before the server has started, the promise will be rejected.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(opt_timeoutMs) {\n      var _this = this;\n\n      if (this.address_) {\n        return this.address_;\n      }\n\n      var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n      var self = this;\n      var resolveCommand;\n      this.command_ = new Promise(function (resolve) {\n        return resolveCommand = resolve;\n      });\n      this.address_ = new Promise(function (resolveAddress, rejectAddress) {\n        resolveAddress(Promise.resolve(_this.port_).then(function (port) {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port);\n          }\n\n          return resolveCommandLineFlags(_this.args_).then(function (args) {\n            var command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_\n            });\n            resolveCommand(command);\n            var earlyTermination = command.result().then(function (result) {\n              var error = result.code == null ? Error('Server was killed with ' + result.signal) : Error('Server terminated early with status ' + result.code);\n              rejectAddress(error);\n              self.address_ = null;\n              self.command_ = null;\n              throw error;\n            });\n            var hostname = self.hostname_;\n\n            if (!hostname) {\n              hostname = !self.loopbackOnly_ && net.getAddress() || net.getLoopbackAddress();\n            }\n\n            var serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_\n            });\n            return new Promise(function (fulfill, reject) {\n              var cancelToken = earlyTermination.catch(function (e) {\n                return reject(Error(e.message));\n              });\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(function (_) {\n                return fulfill(serverUrl);\n              }, function (err) {\n                if (err instanceof promise.CancellationError) {\n                  fulfill(serverUrl);\n                } else {\n                  reject(err);\n                }\n              });\n            });\n          });\n        }));\n      });\n      return this.address_;\n    }\n    /**\n     * Stops the service if it is not currently running. This function will kill\n     * the server immediately. To synchronize with the active control flow, use\n     * {@link #stop()}.\n     * @return {!Promise} A promise that will be resolved when the server has been\n     *     stopped.\n     */\n\n  }, {\n    key: \"kill\",\n    value: function kill() {\n      if (!this.address_ || !this.command_) {\n        return Promise.resolve(); // Not currently running.\n      }\n\n      var cmd = this.command_;\n      this.address_ = null;\n      this.command_ = null;\n      return cmd.then(function (c) {\n        return c.kill('SIGTERM');\n      });\n    }\n    /**\n     * Schedules a task in the current control flow to stop the server if it is\n     * currently running.\n     * @return {!promise.Thenable} A promise that will be resolved when\n     *     the server has been stopped.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return promise.controlFlow().execute(this.kill.bind(this));\n    }\n  }]);\n\n  return DriverService;\n}();\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\n\n\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then(\n  /** !Array<CommandLineFlag> */\n  function (args) {\n    return Promise.all(args);\n  });\n}\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\n\n\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\n\nDriverService.Builder = /*#__PURE__*/function () {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  function _class(exe) {\n    _classCallCheck(this, _class);\n\n    if (!fs.existsSync(exe)) {\n      throw Error(\"The specified executable path does not exist: \".concat(exe));\n    }\n    /** @private @const {string} */\n\n\n    this.exe_ = exe;\n    /** @private {!ServiceOptions} */\n\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n\n\n  _createClass(_class, [{\n    key: \"addArguments\",\n    value: function addArguments(var_args) {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this.options_.args = this.options_.args.concat(args);\n      return this;\n    }\n    /**\n     * Sets the host name to access the server on. If specified, the\n     * {@linkplain #setLoopback() loopback} setting will be ignored.\n     *\n     * @param {string} hostname\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setHostname\",\n    value: function setHostname(hostname) {\n      this.options_.hostname = hostname;\n      return this;\n    }\n    /**\n     * Sets whether the service should be accessed at this host's loopback\n     * address.\n     *\n     * @param {boolean} loopback\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setLoopback\",\n    value: function setLoopback(loopback) {\n      this.options_.loopback = loopback;\n      return this;\n    }\n    /**\n     * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n     * By default, the driver will accept commands relative to \"/\".\n     *\n     * @param {?string} basePath The base path to use, or `null` to use the\n     *     default.\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setPath\",\n    value: function setPath(basePath) {\n      this.options_.path = basePath;\n      return this;\n    }\n    /**\n     * Sets the port to start the server on.\n     *\n     * @param {number} port The port to use, or 0 for any free port.\n     * @return {!DriverService.Builder} A self reference.\n     * @throws {Error} If an invalid port is specified.\n     */\n\n  }, {\n    key: \"setPort\",\n    value: function setPort(port) {\n      if (port < 0) {\n        throw Error(\"port must be >= 0: \".concat(port));\n      }\n\n      this.options_.port = port;\n      return this;\n    }\n    /**\n     * Defines the environment to start the server under. This setting will be\n     * inherited by every browser session started by the server. By default, the\n     * server will inherit the enviroment of the current process.\n     *\n     * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n     *     environment to use, or `null` if the server should inherit the\n     *     current environment.\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setEnvironment\",\n    value: function setEnvironment(env) {\n      if (env instanceof Map) {\n        var tmp = {};\n        env.forEach(function (value, key) {\n          return tmp[key] = value;\n        });\n        env = tmp;\n      }\n\n      this.options_.env = env;\n      return this;\n    }\n    /**\n     * IO configuration for the spawned server process. For more information,\n     * refer to the documentation of `child_process.spawn`.\n     *\n     * @param {StdIoOptions} config The desired IO configuration.\n     * @return {!DriverService.Builder} A self reference.\n     * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n     */\n\n  }, {\n    key: \"setStdio\",\n    value: function setStdio(config) {\n      this.options_.stdio = config;\n      return this;\n    }\n    /**\n     * Creates a new DriverService using this instance's current configuration.\n     *\n     * @return {!DriverService} A new driver service.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n\n      var port = this.options_.port || portprober.findFreePort();\n      var args = Promise.resolve(port).then(function (port) {\n        return _this2.options_.args.concat('--port=' + port);\n      });\n      var options =\n      /** @type {!ServiceOptions} */\n      Object.assign({}, this.options_, {\n        args: args,\n        port: port\n      });\n      return new DriverService(this.exe_, options);\n    }\n  }]);\n\n  return _class;\n}();\n/**\n * Manages the life and death of the\n * <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n * standalone Selenium server</a>.\n */\n\n\nvar SeleniumServer = /*#__PURE__*/function (_DriverService) {\n  _inherits(SeleniumServer, _DriverService);\n\n  var _super = _createSuper(SeleniumServer);\n\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  function SeleniumServer(jar, opt_options) {\n    _classCallCheck(this, SeleniumServer);\n\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n\n    var options = opt_options || {};\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n\n    var port = options.port || portprober.findFreePort();\n    var args = Promise.all([port, options.jvmArgs || [], options.args || []]).then(function (resolved) {\n      var port = resolved[0];\n      var jvmArgs = resolved[1];\n      var args = resolved[2];\n      return jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n    });\n    var java = 'java';\n\n    if (process.env['JAVA_HOME']) {\n      java = path.join(process.env['JAVA_HOME'], 'bin/java');\n    }\n\n    return _super.call(this, java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n\n  return SeleniumServer;\n}(DriverService);\n/**\n * Options for the Selenium server:\n *\n * - `loopback` - Whether the server should only be accessed on this host's\n *     loopback address.\n * - `port` - The port to start the server on (must be > 0). If the port is\n *     provided as a promise, the service will wait for the promise to resolve\n *     before starting.\n * - `args` - The arguments to pass to the service. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `env` - The environment variables that should be visible to the server\n *     process. Defaults to inheriting the current process's environment.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   loopback: (boolean|undefined),\n *   port: (number|!promise.Promise<number>),\n *   args: !(Array<string>|promise.Promise<!Array<string>>),\n *   jvmArgs: (!Array<string>|\n *             !promise.Promise<!Array<string>>|\n *             undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\n\n\nSeleniumServer.Options;\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transfered file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\n\nvar FileDetector = /*#__PURE__*/function (_input$FileDetector) {\n  _inherits(FileDetector, _input$FileDetector);\n\n  var _super2 = _createSuper(FileDetector);\n\n  function FileDetector() {\n    _classCallCheck(this, FileDetector);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(FileDetector, [{\n    key: \"handleFile\",\n\n    /**\n     * Prepares a `file` for use with the remote browser. If the provided path\n     * does not reference a normal file (i.e. it does not exist or is a\n     * directory), then the promise returned by this method will be resolved with\n     * the original file path. Otherwise, this method will upload the file to the\n     * remote server, which will return the file's path on the remote system so\n     * it may be referenced in subsequent commands.\n     *\n     * @override\n     */\n    value: function handleFile(driver, file) {\n      return io.stat(file).then(function (stats) {\n        if (stats.isDirectory()) {\n          return file; // Not a valid file, return original input.\n        }\n\n        var zip = new Zip();\n        return zip.addFile(file).then(function () {\n          return zip.toBuffer();\n        }).then(function (buf) {\n          return buf.toString('base64');\n        }).then(function (encodedZip) {\n          var command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter('file', encodedZip);\n          return driver.schedule(command, 'remote.FileDetector.handleFile(' + file + ')');\n        });\n      }, function (err) {\n        if (err.code === 'ENOENT') {\n          return file; // Not a file; return original input.\n        }\n\n        throw err;\n      });\n    }\n  }]);\n\n  return FileDetector;\n}(input.FileDetector); // PUBLIC API\n\n\nexports.DriverService = DriverService;\nexports.FileDetector = FileDetector;\nexports.SeleniumServer = SeleniumServer;\nexports.ServiceOptions = ServiceOptions; // Exported for API docs.","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/remote/index.js"],"names":["fs","require","path","url","util","httpUtil","io","exec","Zip","cmd","input","promise","webdriver","net","portprober","StdIoOptions","CommandLineFlag","ServiceOptions","prototype","loopback","hostname","port","args","env","stdio","DriverService","executable","options","executable_","loopbackOnly_","hostname_","port_","args_","path_","env_","process","stdio_","command_","address_","Error","opt_timeoutMs","timeout","DEFAULT_START_TIMEOUT_MS","self","resolveCommand","Promise","resolve","resolveAddress","rejectAddress","then","resolveCommandLineFlags","command","earlyTermination","result","error","code","signal","getAddress","getLoopbackAddress","serverUrl","format","protocol","pathname","fulfill","reject","cancelToken","catch","e","message","waitForServer","_","err","CancellationError","c","kill","controlFlow","execute","bind","all","Builder","exe","existsSync","exe_","options_","var_args","Array","slice","call","arguments","concat","basePath","Map","tmp","forEach","value","key","config","findFreePort","Object","assign","SeleniumServer","jar","opt_options","jvmArgs","resolved","java","join","Options","FileDetector","driver","file","stat","stats","isDirectory","zip","addFile","toBuffer","buf","toString","encodedZip","Command","Name","UPLOAD_FILE","setParameter","schedule","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\nconst util = require('util');\n\nconst httpUtil = require('../http/util');\nconst io = require('../io');\nconst exec = require('../io/exec');\nconst {Zip} = require('../io/zip');\nconst cmd = require('../lib/command');\nconst input = require('../lib/input');\nconst promise = require('../lib/promise');\nconst webdriver = require('../lib/webdriver');\nconst net = require('../net');\nconst portprober = require('../net/portprober');\n\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nvar StdIoOptions;\n\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nvar CommandLineFlag;\n\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback;\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname;\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port;\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args;\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path;\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env;\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio;\n\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private {string} */\n    this.executable_ = executable;\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback;\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname;\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port;\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args;\n\n    /** @private {string} */\n    this.path_ = options.path || '/';\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env;\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore';\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null;\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null;\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_;\n    }\n    throw Error('Server has not been started.');\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_;\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_;\n    }\n\n    var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n    var self = this;\n\n    let resolveCommand;\n    this.command_ = new Promise(resolve => resolveCommand = resolve);\n\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(Promise.resolve(this.port_).then(port => {\n        if (port <= 0) {\n          throw Error('Port must be > 0: ' + port);\n        }\n\n        return resolveCommandLineFlags(this.args_).then(args => {\n          var command = exec(self.executable_, {\n            args: args,\n            env: self.env_,\n            stdio: self.stdio_\n          });\n\n          resolveCommand(command);\n\n          var earlyTermination = command.result().then(function(result) {\n            var error = result.code == null ?\n                Error('Server was killed with ' + result.signal) :\n                Error('Server terminated early with status ' + result.code);\n            rejectAddress(error);\n            self.address_ = null;\n            self.command_ = null;\n            throw error;\n          });\n\n          var hostname = self.hostname_;\n          if (!hostname) {\n            hostname = !self.loopbackOnly_ && net.getAddress()\n                || net.getLoopbackAddress();\n          }\n\n          var serverUrl = url.format({\n            protocol: 'http',\n            hostname: hostname,\n            port: port + '',\n            pathname: self.path_\n          });\n\n          return new Promise((fulfill, reject) => {\n            let cancelToken =\n                earlyTermination.catch(e => reject(Error(e.message)));\n\n            httpUtil.waitForServer(serverUrl, timeout, cancelToken)\n                .then(_ => fulfill(serverUrl), err => {\n                  if (err instanceof promise.CancellationError) {\n                    fulfill(serverUrl);\n                  } else {\n                    reject(err);\n                  }\n                });\n          });\n        });\n      }));\n    });\n\n    return this.address_;\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve(); // Not currently running.\n    }\n    let cmd = this.command_;\n    this.address_ = null;\n    this.command_ = null;\n    return cmd.then(c => c.kill('SIGTERM'));\n  }\n\n  /**\n   * Schedules a task in the current control flow to stop the server if it is\n   * currently running.\n   * @return {!promise.Thenable} A promise that will be resolved when\n   *     the server has been stopped.\n   */\n  stop() {\n    return promise.controlFlow().execute(this.kill.bind(this));\n  }\n}\n\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args)\n      .then(/** !Array<CommandLineFlag> */args => Promise.all(args));\n}\n\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    if (!fs.existsSync(exe)) {\n      throw Error(`The specified executable path does not exist: ${exe}`);\n    }\n\n    /** @private @const {string} */\n    this.exe_ = exe;\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments(var_args) {\n    let args = Array.prototype.slice.call(arguments, 0);\n    this.options_.args = this.options_.args.concat(args);\n    return this;\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname;\n    return this;\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback;\n    return this;\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath;\n    return this;\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`);\n    }\n    this.options_.port = port;\n    return this;\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {};\n      env.forEach((value, key) => tmp[key] = value);\n      env = tmp;\n    }\n    this.options_.env = env;\n    return this;\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config;\n    return this;\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort();\n    let args = Promise.resolve(port).then(port => {\n      return this.options_.args.concat('--port=' + port);\n    });\n\n    let options =\n        /** @type {!ServiceOptions} */\n        (Object.assign({}, this.options_, {args, port}));\n    return new DriverService(this.exe_, options);\n  }\n};\n\n\n/**\n * Manages the life and death of the\n * <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n\n    var options = opt_options || {};\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n\n    let port = options.port || portprober.findFreePort();\n    let args = Promise.all([port, options.jvmArgs || [], options.args || []])\n        .then(resolved => {\n          let port = resolved[0];\n          let jvmArgs = resolved[1];\n          let args = resolved[2];\n          return jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n        });\n\n    let java = 'java';\n    if (process.env['JAVA_HOME']) {\n      java = path.join(process.env['JAVA_HOME'], 'bin/java');\n    }\n\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n}\n\n\n/**\n * Options for the Selenium server:\n *\n * - `loopback` - Whether the server should only be accessed on this host's\n *     loopback address.\n * - `port` - The port to start the server on (must be > 0). If the port is\n *     provided as a promise, the service will wait for the promise to resolve\n *     before starting.\n * - `args` - The arguments to pass to the service. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `env` - The environment variables that should be visible to the server\n *     process. Defaults to inheriting the current process's environment.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   loopback: (boolean|undefined),\n *   port: (number|!promise.Promise<number>),\n *   args: !(Array<string>|promise.Promise<!Array<string>>),\n *   jvmArgs: (!Array<string>|\n *             !promise.Promise<!Array<string>>|\n *             undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\nSeleniumServer.Options;\n\n\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transfered file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(function(stats) {\n      if (stats.isDirectory()) {\n        return file;  // Not a valid file, return original input.\n      }\n\n      let zip = new Zip;\n      return zip.addFile(file)\n          .then(() => zip.toBuffer())\n          .then(buf => buf.toString('base64'))\n          .then(encodedZip => {\n            let command = new cmd.Command(cmd.Name.UPLOAD_FILE)\n                .setParameter('file', encodedZip);\n            return driver.schedule(command,\n                'remote.FileDetector.handleFile(' + file + ')');\n          });\n    }, function(err) {\n      if (err.code === 'ENOENT') {\n        return file;  // Not a file; return original input.\n      }\n      throw err;\n    });\n  }\n}\n\n\n// PUBLIC API\n\nexports.DriverService = DriverService;\nexports.FileDetector = FileDetector;\nexports.SeleniumServer = SeleniumServer;\nexports.ServiceOptions = ServiceOptions;  // Exported for API docs.\n"]},"metadata":{},"sourceType":"script"}