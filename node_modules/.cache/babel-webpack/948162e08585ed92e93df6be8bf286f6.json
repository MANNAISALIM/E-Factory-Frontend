{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the\n * PhantomJS web browser. By default, it is expected that the PhantomJS\n * executable can be located on your\n * [PATH](https://en.wikipedia.org/wiki/PATH_(variable))\n *\n *  __Using a Custom PhantomJS Binary__\n *\n * If you have PhantomJS.exe placed somewhere other than the root of your\n * working directory, you can build a custom Capability and attach the\n * executable's location to the Capability\n *\n * For example, if you're using the\n * [phantomjs-prebuilt](https://www.npmjs.com/package/phantomjs-prebuilt) module\n * from npm:\n *\n *     //setup custom phantomJS capability\n *     var phantomjs_exe = require('phantomjs-prebuilt').path;\n *     var customPhantom = selenium.Capabilities.phantomjs();\n *     customPhantom.set(\"phantomjs.binary.path\", phantomjs_exe);\n *     //build custom phantomJS driver\n *     var driver = new selenium.Builder().\n *            withCapabilities(customPhantom).\n *            build();\n *\n */\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar fs = require('fs');\n\nvar http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    command = require('./lib/command'),\n    logging = require('./lib/logging'),\n    promise = require('./lib/promise'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n/**\n * Name of the PhantomJS executable.\n * @type {string}\n * @const\n */\n\n\nvar PHANTOMJS_EXE = process.platform === 'win32' ? 'phantomjs.exe' : 'phantomjs';\n/**\n * Capability that designates the location of the PhantomJS executable to use.\n * @type {string}\n * @const\n */\n\nvar BINARY_PATH_CAPABILITY = 'phantomjs.binary.path';\n/**\n * Capability that designates the CLI arguments to pass to PhantomJS.\n * @type {string}\n * @const\n */\n\nvar CLI_ARGS_CAPABILITY = 'phantomjs.cli.args';\n/**\n * Custom command names supported by PhantomJS.\n * @enum {string}\n */\n\nvar Command = {\n  EXECUTE_PHANTOM_SCRIPT: 'executePhantomScript'\n};\n/**\n * Finds the PhantomJS executable.\n * @param {string=} opt_exe Path to the executable to use.\n * @return {string} The located executable.\n * @throws {Error} If the executable cannot be found on the PATH, or if the\n *     provided executable path does not exist.\n */\n\nfunction findExecutable(opt_exe) {\n  var exe = opt_exe || io.findInPath(PHANTOMJS_EXE, true);\n\n  if (!exe) {\n    throw Error('The PhantomJS executable could not be found on the current PATH. ' + 'Please download the latest version from ' + 'http://phantomjs.org/download.html and ensure it can be found on ' + 'your PATH. For more information, see ' + 'https://github.com/ariya/phantomjs/wiki');\n  }\n\n  if (!fs.existsSync(exe)) {\n    throw Error('File does not exist: ' + exe);\n  }\n\n  return exe;\n}\n/**\n * Maps WebDriver logging level name to those recognised by PhantomJS.\n * @const {!Map<string, string>}\n */\n\n\nvar WEBDRIVER_TO_PHANTOMJS_LEVEL = new Map([[logging.Level.ALL.name, 'DEBUG'], [logging.Level.DEBUG.name, 'DEBUG'], [logging.Level.INFO.name, 'INFO'], [logging.Level.WARNING.name, 'WARN'], [logging.Level.SEVERE.name, 'ERROR']]);\n/**\n * Creates a command executor with support for PhantomJS' custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @return {!command.Executor} The new command executor.\n */\n\nfunction createExecutor(url) {\n  var client = url.then(function (url) {\n    return new http.HttpClient(url);\n  });\n  var executor = new http.Executor(client);\n  executor.defineCommand(Command.EXECUTE_PHANTOM_SCRIPT, 'POST', '/session/:sessionId/phantom/execute');\n  return executor;\n}\n/**\n * Creates a new WebDriver client for PhantomJS.\n */\n\n\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n\n  var _super = _createSuper(Driver);\n\n  function Driver() {\n    _classCallCheck(this, Driver);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    value: function setFileDetector() {}\n    /**\n     * Executes a PhantomJS fragment. This method is similar to\n     * {@link #executeScript}, except it exposes the\n     * <a href=\"http://phantomjs.org/api/\">PhantomJS API</a> to the injected\n     * script.\n     *\n     * <p>The injected script will execute in the context of PhantomJS's\n     * {@code page} variable. If a page has not been loaded before calling this\n     * method, one will be created.</p>\n     *\n     * <p>Be sure to wrap callback definitions in a try/catch block, as failures\n     * may cause future WebDriver calls to fail.</p>\n     *\n     * <p>Certain callbacks are used by GhostDriver (the PhantomJS WebDriver\n     * implementation) and overriding these may cause the script to fail. It is\n     * recommended that you check for existing callbacks before defining your own.\n     * </p>\n     *\n     * As with {@link #executeScript}, the injected script may be defined as\n     * a string for an anonymous function body (e.g. \"return 123;\"), or as a\n     * function. If a function is provided, it will be decompiled to its original\n     * source. Note that injecting functions is provided as a convenience to\n     * simplify defining complex scripts. Care must be taken that the function\n     * only references variables that will be defined in the page's scope and\n     * that the function does not override {@code Function.prototype.toString}\n     * (overriding toString() will interfere with how the function is\n     * decompiled.\n     *\n     * @param {(string|!Function)} script The script to execute.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @return {!promise.Thenable<T>} A promise that resolve to the\n     *     script's return value.\n     * @template T\n     */\n\n  }, {\n    key: \"executePhantomJS\",\n    value: function executePhantomJS(script, var_args) {\n      if (typeof script === 'function') {\n        script = 'return (' + script + ').apply(this, arguments);';\n      }\n\n      var args = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];\n      return this.schedule(new command.Command(Command.EXECUTE_PHANTOM_SCRIPT).setParameter('script', script).setParameter('args', args), 'Driver.executePhantomJS()');\n    }\n  }], [{\n    key: \"createSession\",\n\n    /**\n     * Creates a new PhantomJS session.\n     *\n     * @param {capabilities.Capabilities=} opt_capabilities The desired\n     *     capabilities.\n     * @param {promise.ControlFlow=} opt_flow The control flow to use,\n     *     or {@code null} to use the currently active flow.\n     * @param {string=} opt_logFile Path to the log file for the phantomjs\n     *     executable's output. For convenience, this may be set at runtime with\n     *     the `SELENIUM_PHANTOMJS_LOG` environment variable.\n     * @return {!Driver} A new driver reference.\n     */\n    value: function createSession(opt_capabilities, opt_flow, opt_logFile) {\n      // TODO: add an Options class for consistency with the other driver types.\n      var caps = opt_capabilities || capabilities.Capabilities.phantomjs();\n      var exe = findExecutable(caps.get(BINARY_PATH_CAPABILITY));\n      var args = [];\n      var logPrefs = caps.get(capabilities.Capability.LOGGING_PREFS);\n\n      if (logPrefs instanceof logging.Preferences) {\n        logPrefs = logPrefs.toJSON();\n      }\n\n      if (logPrefs && logPrefs[logging.Type.DRIVER]) {\n        var level = WEBDRIVER_TO_PHANTOMJS_LEVEL.get(logPrefs[logging.Type.DRIVER]);\n\n        if (level) {\n          args.push('--webdriver-loglevel=' + level);\n        }\n      }\n\n      opt_logFile = process.env['SELENIUM_PHANTOMJS_LOG'] || opt_logFile;\n\n      if (typeof opt_logFile === 'string') {\n        args.push('--webdriver-logfile=' + opt_logFile);\n      }\n\n      var proxy = caps.get(capabilities.Capability.PROXY);\n\n      if (proxy) {\n        switch (proxy.proxyType) {\n          case 'manual':\n            if (proxy.httpProxy) {\n              args.push('--proxy-type=http', '--proxy=' + proxy.httpProxy);\n              console.log(args);\n            }\n\n            break;\n\n          case 'pac':\n            throw Error('PhantomJS does not support Proxy PAC files');\n\n          case 'system':\n            args.push('--proxy-type=system');\n            break;\n\n          case 'direct':\n            args.push('--proxy-type=none');\n            break;\n        }\n      }\n\n      args = args.concat(caps.get(CLI_ARGS_CAPABILITY) || []);\n      var port = portprober.findFreePort();\n      var service = new remote.DriverService(exe, {\n        port: port,\n        args: Promise.resolve(port).then(function (port) {\n          args.push('--webdriver=' + port);\n          return args;\n        })\n      });\n      var executor = createExecutor(service.start());\n      return (\n        /** @type {!Driver} */\n        _get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, opt_flow, function () {\n          return service.kill();\n        })\n      );\n    }\n  }]);\n\n  return Driver;\n}(webdriver.WebDriver); // PUBLIC API\n\n\nexports.Driver = Driver;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/phantomjs.js"],"names":["fs","require","http","io","capabilities","command","logging","promise","webdriver","portprober","remote","PHANTOMJS_EXE","process","platform","BINARY_PATH_CAPABILITY","CLI_ARGS_CAPABILITY","Command","EXECUTE_PHANTOM_SCRIPT","findExecutable","opt_exe","exe","findInPath","Error","existsSync","WEBDRIVER_TO_PHANTOMJS_LEVEL","Map","Level","ALL","name","DEBUG","INFO","WARNING","SEVERE","createExecutor","url","client","then","HttpClient","executor","Executor","defineCommand","Driver","script","var_args","args","arguments","length","Array","prototype","slice","call","schedule","setParameter","opt_capabilities","opt_flow","opt_logFile","caps","Capabilities","phantomjs","get","logPrefs","Capability","LOGGING_PREFS","Preferences","toJSON","Type","DRIVER","level","push","env","proxy","PROXY","proxyType","httpProxy","console","log","concat","port","findFreePort","service","DriverService","Promise","resolve","start","kill","WebDriver","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAAA,IACIE,EAAE,GAAGF,OAAO,CAAC,MAAD,CADhB;AAAA,IAEIG,YAAY,GAAGH,OAAO,CAAC,oBAAD,CAF1B;AAAA,IAGII,OAAO,GAAGJ,OAAO,CAAC,eAAD,CAHrB;AAAA,IAIIK,OAAO,GAAGL,OAAO,CAAC,eAAD,CAJrB;AAAA,IAKIM,OAAO,GAAGN,OAAO,CAAC,eAAD,CALrB;AAAA,IAMIO,SAAS,GAAGP,OAAO,CAAC,iBAAD,CANvB;AAAA,IAOIQ,UAAU,GAAGR,OAAO,CAAC,kBAAD,CAPxB;AAAA,IAQIS,MAAM,GAAGT,OAAO,CAAC,UAAD,CARpB;AAWA;AACA;AACA;AACA;AACA;;;AACA,IAAMU,aAAa,GACfC,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+B,eAA/B,GAAiD,WADrD;AAIA;AACA;AACA;AACA;AACA;;AACA,IAAMC,sBAAsB,GAAG,uBAA/B;AAGA;AACA;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAG,oBAA5B;AAGA;AACA;AACA;AACA;;AACA,IAAMC,OAAO,GAAG;AACdC,EAAAA,sBAAsB,EAAE;AADV,CAAhB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,GAAG,GAAGD,OAAO,IAAIhB,EAAE,CAACkB,UAAH,CAAcV,aAAd,EAA6B,IAA7B,CAArB;;AACA,MAAI,CAACS,GAAL,EAAU;AACR,UAAME,KAAK,CACP,sEACA,0CADA,GAEA,mEAFA,GAGA,uCAHA,GAIA,yCALO,CAAX;AAMD;;AACD,MAAI,CAACtB,EAAE,CAACuB,UAAH,CAAcH,GAAd,CAAL,EAAyB;AACvB,UAAME,KAAK,CAAC,0BAA0BF,GAA3B,CAAX;AACD;;AACD,SAAOA,GAAP;AACD;AAGD;AACA;AACA;AACA;;;AACA,IAAMI,4BAA4B,GAAG,IAAIC,GAAJ,CAAQ,CACzC,CAACnB,OAAO,CAACoB,KAAR,CAAcC,GAAd,CAAkBC,IAAnB,EAAyB,OAAzB,CADyC,EAEzC,CAACtB,OAAO,CAACoB,KAAR,CAAcG,KAAd,CAAoBD,IAArB,EAA2B,OAA3B,CAFyC,EAGzC,CAACtB,OAAO,CAACoB,KAAR,CAAcI,IAAd,CAAmBF,IAApB,EAA0B,MAA1B,CAHyC,EAIzC,CAACtB,OAAO,CAACoB,KAAR,CAAcK,OAAd,CAAsBH,IAAvB,EAA6B,MAA7B,CAJyC,EAKzC,CAACtB,OAAO,CAACoB,KAAR,CAAcM,MAAd,CAAqBJ,IAAtB,EAA4B,OAA5B,CALyC,CAAR,CAArC;AAQA;AACA;AACA;AACA;AACA;;AACA,SAASK,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,MAAM,GAAGD,GAAG,CAACE,IAAJ,CAAS,UAAAF,GAAG;AAAA,WAAI,IAAIhC,IAAI,CAACmC,UAAT,CAAoBH,GAApB,CAAJ;AAAA,GAAZ,CAAb;AACA,MAAII,QAAQ,GAAG,IAAIpC,IAAI,CAACqC,QAAT,CAAkBJ,MAAlB,CAAf;AAEAG,EAAAA,QAAQ,CAACE,aAAT,CACIxB,OAAO,CAACC,sBADZ,EAEI,MAFJ,EAEY,qCAFZ;AAIA,SAAOqB,QAAP;AACD;AAED;AACA;AACA;;;IACMG,M;;;;;;;;;;;;;;AA2EJ;AACF;AACA;AACA;AACA;sCACoB,CAAE;AAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCACmBC,M,EAAQC,Q,EAAU;AACjC,UAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,QAAAA,MAAM,GAAG,aAAaA,MAAb,GAAsB,2BAA/B;AACD;;AACD,UAAIE,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GACLC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,CADK,GACsC,EADjD;AAEA,aAAO,KAAKM,QAAL,CACH,IAAI9C,OAAO,CAACW,OAAZ,CAAoBA,OAAO,CAACC,sBAA5B,EACKmC,YADL,CACkB,QADlB,EAC4BV,MAD5B,EAEKU,YAFL,CAEkB,MAFlB,EAE0BR,IAF1B,CADG,EAIH,2BAJG,CAAP;AAKD;;;;AA9HD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCACuBS,gB,EAAkBC,Q,EAAUC,W,EAAa;AAC5D;AAEA,UAAIC,IAAI,GAAGH,gBAAgB,IAAIjD,YAAY,CAACqD,YAAb,CAA0BC,SAA1B,EAA/B;AACA,UAAItC,GAAG,GAAGF,cAAc,CAACsC,IAAI,CAACG,GAAL,CAAS7C,sBAAT,CAAD,CAAxB;AACA,UAAI8B,IAAI,GAAG,EAAX;AAEA,UAAIgB,QAAQ,GAAGJ,IAAI,CAACG,GAAL,CAASvD,YAAY,CAACyD,UAAb,CAAwBC,aAAjC,CAAf;;AACA,UAAIF,QAAQ,YAAYtD,OAAO,CAACyD,WAAhC,EAA6C;AAC3CH,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,EAAX;AACD;;AAED,UAAIJ,QAAQ,IAAIA,QAAQ,CAACtD,OAAO,CAAC2D,IAAR,CAAaC,MAAd,CAAxB,EAA+C;AAC7C,YAAIC,KAAK,GAAG3C,4BAA4B,CAACmC,GAA7B,CACRC,QAAQ,CAACtD,OAAO,CAAC2D,IAAR,CAAaC,MAAd,CADA,CAAZ;;AAEA,YAAIC,KAAJ,EAAW;AACTvB,UAAAA,IAAI,CAACwB,IAAL,CAAU,0BAA0BD,KAApC;AACD;AACF;;AAEDZ,MAAAA,WAAW,GAAG3C,OAAO,CAACyD,GAAR,CAAY,wBAAZ,KAAyCd,WAAvD;;AACA,UAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnCX,QAAAA,IAAI,CAACwB,IAAL,CAAU,yBAAyBb,WAAnC;AACD;;AAED,UAAIe,KAAK,GAAGd,IAAI,CAACG,GAAL,CAASvD,YAAY,CAACyD,UAAb,CAAwBU,KAAjC,CAAZ;;AACA,UAAID,KAAJ,EAAW;AACT,gBAAQA,KAAK,CAACE,SAAd;AACE,eAAK,QAAL;AACE,gBAAIF,KAAK,CAACG,SAAV,EAAqB;AACnB7B,cAAAA,IAAI,CAACwB,IAAL,CACI,mBADJ,EAEI,aAAaE,KAAK,CAACG,SAFvB;AAGAC,cAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ;AACD;;AACD;;AACF,eAAK,KAAL;AACE,kBAAMtB,KAAK,CAAC,4CAAD,CAAX;;AACF,eAAK,QAAL;AACEsB,YAAAA,IAAI,CAACwB,IAAL,CAAU,qBAAV;AACA;;AACF,eAAK,QAAL;AACExB,YAAAA,IAAI,CAACwB,IAAL,CAAU,mBAAV;AACA;AAhBJ;AAkBD;;AACDxB,MAAAA,IAAI,GAAGA,IAAI,CAACgC,MAAL,CAAYpB,IAAI,CAACG,GAAL,CAAS5C,mBAAT,KAAiC,EAA7C,CAAP;AAEA,UAAI8D,IAAI,GAAGpE,UAAU,CAACqE,YAAX,EAAX;AACA,UAAIC,OAAO,GAAG,IAAIrE,MAAM,CAACsE,aAAX,CAAyB5D,GAAzB,EAA8B;AAC1CyD,QAAAA,IAAI,EAAEA,IADoC;AAE1CjC,QAAAA,IAAI,EAAEqC,OAAO,CAACC,OAAR,CAAgBL,IAAhB,EAAsBzC,IAAtB,CAA2B,UAASyC,IAAT,EAAe;AAC9CjC,UAAAA,IAAI,CAACwB,IAAL,CAAU,iBAAiBS,IAA3B;AACA,iBAAOjC,IAAP;AACD,SAHK;AAFoC,OAA9B,CAAd;AAQA,UAAIN,QAAQ,GAAGL,cAAc,CAAC8C,OAAO,CAACI,KAAR,EAAD,CAA7B;AACA;AAAO;AAAP,wEACI7C,QADJ,EACckB,IADd,EACoBF,QADpB,EAC8B;AAAA,iBAAMyB,OAAO,CAACK,IAAR,EAAN;AAAA,SAD9B;AAAA;AAED;;;;EAzEkB5E,SAAS,CAAC6E,S,GAmI/B;;;AAEAC,OAAO,CAAC7C,MAAR,GAAiBA,MAAjB","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the\n * PhantomJS web browser. By default, it is expected that the PhantomJS\n * executable can be located on your\n * [PATH](https://en.wikipedia.org/wiki/PATH_(variable))\n *\n *  __Using a Custom PhantomJS Binary__\n *\n * If you have PhantomJS.exe placed somewhere other than the root of your\n * working directory, you can build a custom Capability and attach the\n * executable's location to the Capability\n *\n * For example, if you're using the\n * [phantomjs-prebuilt](https://www.npmjs.com/package/phantomjs-prebuilt) module\n * from npm:\n *\n *     //setup custom phantomJS capability\n *     var phantomjs_exe = require('phantomjs-prebuilt').path;\n *     var customPhantom = selenium.Capabilities.phantomjs();\n *     customPhantom.set(\"phantomjs.binary.path\", phantomjs_exe);\n *     //build custom phantomJS driver\n *     var driver = new selenium.Builder().\n *            withCapabilities(customPhantom).\n *            build();\n *\n */\n\n'use strict';\n\nconst fs = require('fs');\n\nconst http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    command = require('./lib/command'),\n    logging = require('./lib/logging'),\n    promise = require('./lib/promise'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\n\n/**\n * Name of the PhantomJS executable.\n * @type {string}\n * @const\n */\nconst PHANTOMJS_EXE =\n    process.platform === 'win32' ? 'phantomjs.exe' : 'phantomjs';\n\n\n/**\n * Capability that designates the location of the PhantomJS executable to use.\n * @type {string}\n * @const\n */\nconst BINARY_PATH_CAPABILITY = 'phantomjs.binary.path';\n\n\n/**\n * Capability that designates the CLI arguments to pass to PhantomJS.\n * @type {string}\n * @const\n */\nconst CLI_ARGS_CAPABILITY = 'phantomjs.cli.args';\n\n\n/**\n * Custom command names supported by PhantomJS.\n * @enum {string}\n */\nconst Command = {\n  EXECUTE_PHANTOM_SCRIPT: 'executePhantomScript'\n};\n\n\n/**\n * Finds the PhantomJS executable.\n * @param {string=} opt_exe Path to the executable to use.\n * @return {string} The located executable.\n * @throws {Error} If the executable cannot be found on the PATH, or if the\n *     provided executable path does not exist.\n */\nfunction findExecutable(opt_exe) {\n  var exe = opt_exe || io.findInPath(PHANTOMJS_EXE, true);\n  if (!exe) {\n    throw Error(\n        'The PhantomJS executable could not be found on the current PATH. ' +\n        'Please download the latest version from ' +\n        'http://phantomjs.org/download.html and ensure it can be found on ' +\n        'your PATH. For more information, see ' +\n        'https://github.com/ariya/phantomjs/wiki');\n  }\n  if (!fs.existsSync(exe)) {\n    throw Error('File does not exist: ' + exe);\n  }\n  return exe;\n}\n\n\n/**\n * Maps WebDriver logging level name to those recognised by PhantomJS.\n * @const {!Map<string, string>}\n */\nconst WEBDRIVER_TO_PHANTOMJS_LEVEL = new Map([\n    [logging.Level.ALL.name, 'DEBUG'],\n    [logging.Level.DEBUG.name, 'DEBUG'],\n    [logging.Level.INFO.name, 'INFO'],\n    [logging.Level.WARNING.name, 'WARN'],\n    [logging.Level.SEVERE.name, 'ERROR']]);\n\n\n/**\n * Creates a command executor with support for PhantomJS' custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url) {\n  let client = url.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n\n  executor.defineCommand(\n      Command.EXECUTE_PHANTOM_SCRIPT,\n      'POST', '/session/:sessionId/phantom/execute');\n\n  return executor;\n}\n\n/**\n * Creates a new WebDriver client for PhantomJS.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new PhantomJS session.\n   *\n   * @param {capabilities.Capabilities=} opt_capabilities The desired\n   *     capabilities.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use,\n   *     or {@code null} to use the currently active flow.\n   * @param {string=} opt_logFile Path to the log file for the phantomjs\n   *     executable's output. For convenience, this may be set at runtime with\n   *     the `SELENIUM_PHANTOMJS_LOG` environment variable.\n   * @return {!Driver} A new driver reference.\n   */\n  static createSession(opt_capabilities, opt_flow, opt_logFile) {\n    // TODO: add an Options class for consistency with the other driver types.\n\n    var caps = opt_capabilities || capabilities.Capabilities.phantomjs();\n    var exe = findExecutable(caps.get(BINARY_PATH_CAPABILITY));\n    var args = [];\n\n    var logPrefs = caps.get(capabilities.Capability.LOGGING_PREFS);\n    if (logPrefs instanceof logging.Preferences) {\n      logPrefs = logPrefs.toJSON();\n    }\n\n    if (logPrefs && logPrefs[logging.Type.DRIVER]) {\n      let level = WEBDRIVER_TO_PHANTOMJS_LEVEL.get(\n          logPrefs[logging.Type.DRIVER]);\n      if (level) {\n        args.push('--webdriver-loglevel=' + level);\n      }\n    }\n\n    opt_logFile = process.env['SELENIUM_PHANTOMJS_LOG'] || opt_logFile;\n    if (typeof opt_logFile === 'string') {\n      args.push('--webdriver-logfile=' + opt_logFile);\n    }\n\n    var proxy = caps.get(capabilities.Capability.PROXY);\n    if (proxy) {\n      switch (proxy.proxyType) {\n        case 'manual':\n          if (proxy.httpProxy) {\n            args.push(\n                '--proxy-type=http',\n                '--proxy=' + proxy.httpProxy);\n            console.log(args);\n          }\n          break;\n        case 'pac':\n          throw Error('PhantomJS does not support Proxy PAC files');\n        case 'system':\n          args.push('--proxy-type=system');\n          break;\n        case 'direct':\n          args.push('--proxy-type=none');\n          break;\n      }\n    }\n    args = args.concat(caps.get(CLI_ARGS_CAPABILITY) || []);\n\n    var port = portprober.findFreePort();\n    var service = new remote.DriverService(exe, {\n      port: port,\n      args: Promise.resolve(port).then(function(port) {\n        args.push('--webdriver=' + port);\n        return args;\n      })\n    });\n\n    var executor = createExecutor(service.start());\n    return /** @type {!Driver} */(super.createSession(\n        executor, caps, opt_flow, () => service.kill()));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Executes a PhantomJS fragment. This method is similar to\n   * {@link #executeScript}, except it exposes the\n   * <a href=\"http://phantomjs.org/api/\">PhantomJS API</a> to the injected\n   * script.\n   *\n   * <p>The injected script will execute in the context of PhantomJS's\n   * {@code page} variable. If a page has not been loaded before calling this\n   * method, one will be created.</p>\n   *\n   * <p>Be sure to wrap callback definitions in a try/catch block, as failures\n   * may cause future WebDriver calls to fail.</p>\n   *\n   * <p>Certain callbacks are used by GhostDriver (the PhantomJS WebDriver\n   * implementation) and overriding these may cause the script to fail. It is\n   * recommended that you check for existing callbacks before defining your own.\n   * </p>\n   *\n   * As with {@link #executeScript}, the injected script may be defined as\n   * a string for an anonymous function body (e.g. \"return 123;\"), or as a\n   * function. If a function is provided, it will be decompiled to its original\n   * source. Note that injecting functions is provided as a convenience to\n   * simplify defining complex scripts. Care must be taken that the function\n   * only references variables that will be defined in the page's scope and\n   * that the function does not override {@code Function.prototype.toString}\n   * (overriding toString() will interfere with how the function is\n   * decompiled.\n   *\n   * @param {(string|!Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {!promise.Thenable<T>} A promise that resolve to the\n   *     script's return value.\n   * @template T\n   */\n  executePhantomJS(script, var_args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(this, arguments);';\n    }\n    var args = arguments.length > 1\n        ? Array.prototype.slice.call(arguments, 1) : [];\n    return this.schedule(\n        new command.Command(Command.EXECUTE_PHANTOM_SCRIPT)\n            .setParameter('script', script)\n            .setParameter('args', args),\n        'Driver.executePhantomJS()');\n  }\n}\n\n\n// PUBLIC API\n\nexports.Driver = Driver;\n"]},"metadata":{},"sourceType":"script"}