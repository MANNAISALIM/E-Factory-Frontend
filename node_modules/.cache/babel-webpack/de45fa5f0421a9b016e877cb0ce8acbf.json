{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar blockingproxy_1 = require(\"./blockingproxy\");\n\nvar config_1 = require(\"./config\");\n/**\n * Starts up a proxy server which modifies calls between the test process\n * and the selenium server.\n */\n\n\nvar argv = config_1.processArgs(process.argv.slice(2));\n\nif (argv.help) {\n  config_1.printHelp();\n  process.exit(0);\n}\n\nvar proxy = new blockingproxy_1.BlockingProxy(argv.seleniumAddress, parseInt(argv.highlightDelay));\n\nif (argv.logDir) {\n  proxy.enableLogging(argv.logDir);\n}\n\nvar port = proxy.listen(argv.port);\nconsole.log(\"Listening on :\".concat(port));\n\nif (argv.fork) {\n  process.send({\n    ready: true,\n    port: port\n  });\n  process.on('disconnect', function () {\n    console.log('parent exited, quitting');\n    process.exit();\n  });\n}","map":{"version":3,"sources":["../../lib/bin.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;AAGG;;;AAEH,IAAM,IAAI,GAAG,QAAA,CAAA,WAAA,CAAY,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAZ,CAAb;;AAEA,IAAI,IAAI,CAAC,IAAT,EAAe;AACb,EAAA,QAAA,CAAA,SAAA;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACD;;AAED,IAAM,KAAK,GAAG,IAAI,eAAA,CAAA,aAAJ,CAAkB,IAAI,CAAC,eAAvB,EAAwC,QAAQ,CAAC,IAAI,CAAC,cAAN,CAAhD,CAAd;;AACA,IAAI,IAAI,CAAC,MAAT,EAAiB;AACf,EAAA,KAAK,CAAC,aAAN,CAAoB,IAAI,CAAC,MAAzB;AACD;;AACD,IAAI,IAAI,GAAG,KAAK,CAAC,MAAN,CAAa,IAAI,CAAC,IAAlB,CAAX;AACA,OAAO,CAAC,GAAR,yBAA6B,IAA7B;;AACA,IAAI,IAAI,CAAC,IAAT,EAAe;AACb,EAAA,OAAO,CAAC,IAAR,CAAa;AAAC,IAAA,KAAK,EAAE,IAAR;AAAc,IAAA,IAAI,EAAE;AAApB,GAAb;AACA,EAAA,OAAO,CAAC,EAAR,CAAW,YAAX,EAAyB,YAAA;AACvB,IAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ;AACA,IAAA,OAAO,CAAC,IAAR;AACD,GAHD;AAID","sourceRoot":"","sourcesContent":["#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blockingproxy_1 = require(\"./blockingproxy\");\nconst config_1 = require(\"./config\");\n/**\n * Starts up a proxy server which modifies calls between the test process\n * and the selenium server.\n */\nconst argv = config_1.processArgs(process.argv.slice(2));\nif (argv.help) {\n    config_1.printHelp();\n    process.exit(0);\n}\nconst proxy = new blockingproxy_1.BlockingProxy(argv.seleniumAddress, parseInt(argv.highlightDelay));\nif (argv.logDir) {\n    proxy.enableLogging(argv.logDir);\n}\nlet port = proxy.listen(argv.port);\nconsole.log(`Listening on :${port}`);\nif (argv.fork) {\n    process.send({ ready: true, port: port });\n    process.on('disconnect', function () {\n        console.log('parent exited, quitting');\n        process.exit();\n    });\n}\n//# sourceMappingURL=bin.js.map"]},"metadata":{},"sourceType":"script"}