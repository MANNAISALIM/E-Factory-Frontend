{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an mock implementation of the Driver Provider.\n * It returns a fake webdriver and never actually contacts a selenium\n * server.\n */\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar MockExecutor = /*#__PURE__*/function () {\n  function MockExecutor() {\n    _classCallCheck(this, MockExecutor);\n  }\n\n  _createClass(MockExecutor, [{\n    key: \"execute\",\n    value: function execute(command) {}\n  }]);\n\n  return MockExecutor;\n}();\n\nexports.MockExecutor = MockExecutor;\n\nvar Mock = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(Mock, _driverProvider_1$Dri);\n\n  var _super = _createSuper(Mock);\n\n  function Mock(config) {\n    _classCallCheck(this, Mock);\n\n    return _super.call(this, config);\n  }\n  /**\n   * An execute function that returns a promise with a test value.\n   */\n\n\n  _createClass(Mock, [{\n    key: \"execute\",\n    value: function execute() {\n      var deferred = q.defer();\n      deferred.resolve({\n        value: 'test_response'\n      });\n      return deferred.promise;\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve immediately.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      return q.fcall(function () {});\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var mockSession = new selenium_webdriver_1.Session('test_session_id', {});\n      var newDriver = new selenium_webdriver_1.WebDriver(mockSession, new MockExecutor());\n      this.drivers_.push(newDriver);\n      return newDriver;\n    }\n  }]);\n\n  return Mock;\n}(driverProvider_1.DriverProvider);\n\nexports.Mock = Mock;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/mock.js"],"names":["Object","defineProperty","exports","value","q","require","selenium_webdriver_1","driverProvider_1","MockExecutor","command","Mock","config","deferred","defer","resolve","promise","fcall","mockSession","Session","newDriver","WebDriver","drivers_","push","DriverProvider"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,oBAAD,CAApC;;AACA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;IACMG,Y;;;;;;;4BACMC,O,EAAS,CAAG;;;;;;AAExBP,OAAO,CAACM,YAAR,GAAuBA,YAAvB;;IACME,I;;;;;AACF,gBAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACVA,MADU;AAEnB;AACD;AACJ;AACA;;;;;8BACc;AACN,UAAIC,QAAQ,GAAGR,CAAC,CAACS,KAAF,EAAf;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB;AAAEX,QAAAA,KAAK,EAAE;AAAT,OAAjB;AACA,aAAOS,QAAQ,CAACG,OAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;qCACqB;AACb,aAAOX,CAAC,CAACY,KAAF,CAAQ,YAAY,CAAG,CAAvB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;mCACmB;AACX,UAAIC,WAAW,GAAG,IAAIX,oBAAoB,CAACY,OAAzB,CAAiC,iBAAjC,EAAoD,EAApD,CAAlB;AACA,UAAIC,SAAS,GAAG,IAAIb,oBAAoB,CAACc,SAAzB,CAAmCH,WAAnC,EAAgD,IAAIT,YAAJ,EAAhD,CAAhB;AACA,WAAKa,QAAL,CAAcC,IAAd,CAAmBH,SAAnB;AACA,aAAOA,SAAP;AACH;;;;EAhCcZ,gBAAgB,CAACgB,c;;AAkCpCrB,OAAO,CAACQ,IAAR,GAAeA,IAAf","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * This is an mock implementation of the Driver Provider.\n * It returns a fake webdriver and never actually contacts a selenium\n * server.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst driverProvider_1 = require(\"./driverProvider\");\nclass MockExecutor {\n    execute(command) { }\n}\nexports.MockExecutor = MockExecutor;\nclass Mock extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * An execute function that returns a promise with a test value.\n     */\n    execute() {\n        let deferred = q.defer();\n        deferred.resolve({ value: 'test_response' });\n        return deferred.promise;\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve immediately.\n     */\n    setupDriverEnv() {\n        return q.fcall(function () { });\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n    getNewDriver() {\n        let mockSession = new selenium_webdriver_1.Session('test_session_id', {});\n        let newDriver = new selenium_webdriver_1.WebDriver(mockSession, new MockExecutor());\n        this.drivers_.push(newDriver);\n        return newDriver;\n    }\n}\nexports.Mock = Mock;\n//# sourceMappingURL=mock.js.map"]},"metadata":{},"sourceType":"script"}