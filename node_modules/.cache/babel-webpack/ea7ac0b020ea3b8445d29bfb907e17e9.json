{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar util_1 = require(\"./util\");\n/**\n * Represents a library of canned expected conditions that are useful for\n * protractor, especially when dealing with non-angular apps.\n *\n * Each condition returns a function that evaluates to a promise. You may mix\n * multiple conditions using `and`, `or`, and/or `not`. You may also\n * mix these conditions with any other conditions that you write.\n *\n * See ExpectedCondition Class in Selenium WebDriver codebase.\n * http://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/ExpectedConditions.html\n *\n *\n * @example\n * var EC = protractor.ExpectedConditions;\n * var button = $('#xyz');\n * var isClickable = EC.elementToBeClickable(button);\n *\n * browser.get(URL);\n * browser.wait(isClickable, 5000); //wait for an element to become clickable\n * button.click();\n *\n * // You can define your own expected condition, which is a function that\n * // takes no parameter and evaluates to a promise of a boolean.\n * var urlChanged = function() {\n *   return browser.getCurrentUrl().then(function(url) {\n *     return url === 'http://www.angularjs.org';\n *   });\n * };\n *\n * // You can customize the conditions with EC.and, EC.or, and EC.not.\n * // Here's a condition to wait for url to change, $('abc') element to contain\n * // text 'bar', and button becomes clickable.\n * var condition = EC.and(urlChanged, EC.textToBePresentInElement($('abc'),\n * 'bar'), isClickable);\n * browser.get(URL);\n * browser.wait(condition, 5000); //wait for condition to be true.\n * button.click();\n *\n * @alias ExpectedConditions\n * @constructor\n */\n\n\nvar ProtractorExpectedConditions = /*#__PURE__*/function () {\n  function ProtractorExpectedConditions(browser) {\n    _classCallCheck(this, ProtractorExpectedConditions);\n\n    this.browser = browser;\n  }\n\n  _createClass(ProtractorExpectedConditions, [{\n    key: \"not\",\n\n    /**\n     * Negates the result of a promise.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleIsNotFoo = EC.not(EC.titleIs('Foo'));\n     * // Waits for title to become something besides 'foo'.\n     * browser.wait(titleIsNotFoo, 5000);\n     *\n     * @alias ExpectedConditions.not\n     * @param {!function} expectedCondition\n     *\n     * @returns {!function} An expected condition that returns the negated value.\n     */\n    value: function not(expectedCondition) {\n      return function () {\n        return expectedCondition().then(function (bool) {\n          return !bool;\n        });\n      };\n    }\n    /**\n     * Helper function that is equivalent to the logical_and if defaultRet==true,\n     * or logical_or if defaultRet==false\n     *\n     * @private\n     * @param {boolean} defaultRet\n     * @param {Array.<Function>} fns An array of expected conditions to chain.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical chain.\n     */\n\n  }, {\n    key: \"logicalChain_\",\n    value: function logicalChain_(defaultRet, fns) {\n      var self = this;\n      return function () {\n        if (fns.length === 0) {\n          return defaultRet;\n        }\n\n        var fn = fns[0];\n        return fn().then(function (bool) {\n          if (bool === defaultRet) {\n            return self.logicalChain_(defaultRet, fns.slice(1))();\n          } else {\n            return !defaultRet;\n          }\n        });\n      };\n    }\n    /**\n     * Chain a number of expected conditions using logical_and, short circuiting\n     * at the first expected condition that evaluates to false.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleContainsFoo = EC.titleContains('Foo');\n     * var titleIsNotFooBar = EC.not(EC.titleIs('FooBar'));\n     * // Waits for title to contain 'Foo', but is not 'FooBar'\n     * browser.wait(EC.and(titleContainsFoo, titleIsNotFooBar), 5000);\n     *\n     * @alias ExpectedConditions.and\n     * @param {Array.<Function>} fns An array of expected conditions to 'and'\n     * together.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical and.\n     */\n\n  }, {\n    key: \"and\",\n    value: function and() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.logicalChain_(true, args);\n    }\n    /**\n     * Chain a number of expected conditions using logical_or, short circuiting\n     * at the first expected condition that evaluates to true.\n     *\n     * @alias ExpectedConditions.or\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleContainsFoo = EC.titleContains('Foo');\n     * var titleContainsBar = EC.titleContains('Bar');\n     * // Waits for title to contain either 'Foo' or 'Bar'\n     * browser.wait(EC.or(titleContainsFoo, titleContainsBar), 5000);\n     *\n     * @param {Array.<Function>} fns An array of expected conditions to 'or'\n     * together.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical or.\n     */\n\n  }, {\n    key: \"or\",\n    value: function or() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.logicalChain_(false, args);\n    }\n    /**\n     * Expect an alert to be present.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for an alert pops up.\n     * browser.wait(EC.alertIsPresent(), 5000);\n     *\n     * @alias ExpectedConditions.alertIsPresent\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether an alert is present.\n     */\n\n  }, {\n    key: \"alertIsPresent\",\n    value: function alertIsPresent() {\n      var _this = this;\n\n      return function () {\n        return _this.browser.driver.switchTo().alert().then(function () {\n          return true;\n        }, function (err) {\n          if (err instanceof selenium_webdriver_1.error.NoSuchAlertError) {\n            return false;\n          } else {\n            throw err;\n          }\n        });\n      };\n    }\n    /**\n     * An Expectation for checking an element is visible and enabled such that you\n     * can click it.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be clickable.\n     * browser.wait(EC.elementToBeClickable($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.elementToBeClickable\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is clickable.\n     */\n\n  }, {\n    key: \"elementToBeClickable\",\n    value: function elementToBeClickable(elementFinder) {\n      return this.and(this.visibilityOf(elementFinder), function () {\n        return elementFinder.isEnabled().then(util_1.passBoolean, util_1.falseIfMissing);\n      });\n    }\n    /**\n     * An expectation for checking if the given text is present in the\n     * element. Returns false if the elementFinder does not find an element.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to contain the text 'foo'.\n     * browser.wait(EC.textToBePresentInElement($('#abc'), 'foo'), 5000);\n     *\n     * @alias ExpectedConditions.textToBePresentInElement\n     * @param {!ElementFinder} elementFinder The element to check\n     * @param {!string} text The text to verify against\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the text is present in the element.\n     */\n\n  }, {\n    key: \"textToBePresentInElement\",\n    value: function textToBePresentInElement(elementFinder, text) {\n      var hasText = function hasText() {\n        return elementFinder.getText().then(function (actualText) {\n          // MSEdge does not properly remove newlines, which causes false\n          // negatives\n          return actualText.replace(/\\r?\\n|\\r/g, '').indexOf(text) > -1;\n        }, util_1.falseIfMissing);\n      };\n\n      return this.and(this.presenceOf(elementFinder), hasText);\n    }\n    /**\n     * An expectation for checking if the given text is present in the elementâ€™s\n     * value. Returns false if the elementFinder does not find an element.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'myInput' to contain the input 'foo'.\n     * browser.wait(EC.textToBePresentInElementValue($('#myInput'), 'foo'), 5000);\n     *\n     * @alias ExpectedConditions.textToBePresentInElementValue\n     * @param {!ElementFinder} elementFinder The element to check\n     * @param {!string} text The text to verify against\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the text is present in the element's value.\n     */\n\n  }, {\n    key: \"textToBePresentInElementValue\",\n    value: function textToBePresentInElementValue(elementFinder, text) {\n      var hasText = function hasText() {\n        return elementFinder.getAttribute('value').then(function (actualText) {\n          return actualText.indexOf(text) > -1;\n        }, util_1.falseIfMissing);\n      };\n\n      return this.and(this.presenceOf(elementFinder), hasText);\n    }\n    /**\n     * An expectation for checking that the title contains a case-sensitive\n     * substring.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the title to contain 'foo'.\n     * browser.wait(EC.titleContains('foo'), 5000);\n     *\n     * @alias ExpectedConditions.titleContains\n     * @param {!string} title The fragment of title expected\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the title contains the string.\n     */\n\n  }, {\n    key: \"titleContains\",\n    value: function titleContains(title) {\n      var _this2 = this;\n\n      return function () {\n        return _this2.browser.driver.getTitle().then(function (actualTitle) {\n          return actualTitle.indexOf(title) > -1;\n        });\n      };\n    }\n    /**\n     * An expectation for checking the title of a page.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the title to be 'foo'.\n     * browser.wait(EC.titleIs('foo'), 5000);\n     *\n     * @alias ExpectedConditions.titleIs\n     * @param {!string} title The expected title, which must be an exact match.\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the title equals the string.\n     */\n\n  }, {\n    key: \"titleIs\",\n    value: function titleIs(title) {\n      var _this3 = this;\n\n      return function () {\n        return _this3.browser.driver.getTitle().then(function (actualTitle) {\n          return actualTitle === title;\n        });\n      };\n    }\n    /**\n     * An expectation for checking that the URL contains a case-sensitive\n     * substring.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the URL to contain 'foo'.\n     * browser.wait(EC.urlContains('foo'), 5000);\n     *\n     * @alias ExpectedConditions.urlContains\n     * @param {!string} url The fragment of URL expected\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the URL contains the string.\n     */\n\n  }, {\n    key: \"urlContains\",\n    value: function urlContains(url) {\n      var _this4 = this;\n\n      return function () {\n        return _this4.browser.driver.getCurrentUrl().then(function (actualUrl) {\n          return actualUrl.indexOf(url) > -1;\n        });\n      };\n    }\n    /**\n     * An expectation for checking the URL of a page.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the URL to be 'foo'.\n     * browser.wait(EC.urlIs('foo'), 5000);\n     *\n     * @alias ExpectedConditions.urlIs\n     * @param {!string} url The expected URL, which must be an exact match.\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the url equals the string.\n     */\n\n  }, {\n    key: \"urlIs\",\n    value: function urlIs(url) {\n      var _this5 = this;\n\n      return function () {\n        return _this5.browser.driver.getCurrentUrl().then(function (actualUrl) {\n          return actualUrl === url;\n        });\n      };\n    }\n    /**\n     * An expectation for checking that an element is present on the DOM\n     * of a page. This does not necessarily mean that the element is visible.\n     * This is the opposite of 'stalenessOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be present on the dom.\n     * browser.wait(EC.presenceOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.presenceOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is present.\n     */\n\n  }, {\n    key: \"presenceOf\",\n    value: function presenceOf(elementFinder) {\n      return elementFinder.isPresent.bind(elementFinder);\n    }\n  }, {\n    key: \"stalenessOf\",\n\n    /**\n     * An expectation for checking that an element is not attached to the DOM\n     * of a page. This is the opposite of 'presenceOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be no longer present on the dom.\n     * browser.wait(EC.stalenessOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.stalenessOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is stale.\n     */\n    value: function stalenessOf(elementFinder) {\n      return this.not(this.presenceOf(elementFinder));\n    }\n    /**\n     * An expectation for checking that an element is present on the DOM of a\n     * page and visible. Visibility means that the element is not only displayed\n     * but also has a height and width that is greater than 0. This is the\n     * opposite\n     * of 'invisibilityOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be visible on the dom.\n     * browser.wait(EC.visibilityOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.visibilityOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is visible.\n     */\n\n  }, {\n    key: \"visibilityOf\",\n    value: function visibilityOf(elementFinder) {\n      return this.and(this.presenceOf(elementFinder), function () {\n        return elementFinder.isDisplayed().then(util_1.passBoolean, util_1.falseIfMissing);\n      });\n    }\n    /**\n     * An expectation for checking that an element is either invisible or not\n     * present on the DOM. This is the opposite of 'visibilityOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be no longer visible on the dom.\n     * browser.wait(EC.invisibilityOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.invisibilityOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is invisible.\n     */\n\n  }, {\n    key: \"invisibilityOf\",\n    value: function invisibilityOf(elementFinder) {\n      return this.not(this.visibilityOf(elementFinder));\n    }\n    /**\n     * An expectation for checking the selection is selected.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'myCheckbox' to be selected.\n     * browser.wait(EC.elementToBeSelected($('#myCheckbox')), 5000);\n     *\n     * @alias ExpectedConditions.elementToBeSelected\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is selected.\n     */\n\n  }, {\n    key: \"elementToBeSelected\",\n    value: function elementToBeSelected(elementFinder) {\n      return this.and(this.presenceOf(elementFinder), function () {\n        return elementFinder.isSelected().then(util_1.passBoolean, util_1.falseIfMissing);\n      });\n    }\n  }]);\n\n  return ProtractorExpectedConditions;\n}();\n\nexports.ProtractorExpectedConditions = ProtractorExpectedConditions;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/expectedConditions.js"],"names":["Object","defineProperty","exports","value","selenium_webdriver_1","require","util_1","ProtractorExpectedConditions","browser","expectedCondition","then","bool","defaultRet","fns","self","length","fn","logicalChain_","slice","args","driver","switchTo","alert","err","error","NoSuchAlertError","elementFinder","and","visibilityOf","isEnabled","passBoolean","falseIfMissing","text","hasText","getText","actualText","replace","indexOf","presenceOf","getAttribute","title","getTitle","actualTitle","url","getCurrentUrl","actualUrl","isPresent","bind","not","isDisplayed","isSelected"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst util_1 = require(\"./util\");\n/**\n * Represents a library of canned expected conditions that are useful for\n * protractor, especially when dealing with non-angular apps.\n *\n * Each condition returns a function that evaluates to a promise. You may mix\n * multiple conditions using `and`, `or`, and/or `not`. You may also\n * mix these conditions with any other conditions that you write.\n *\n * See ExpectedCondition Class in Selenium WebDriver codebase.\n * http://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/ExpectedConditions.html\n *\n *\n * @example\n * var EC = protractor.ExpectedConditions;\n * var button = $('#xyz');\n * var isClickable = EC.elementToBeClickable(button);\n *\n * browser.get(URL);\n * browser.wait(isClickable, 5000); //wait for an element to become clickable\n * button.click();\n *\n * // You can define your own expected condition, which is a function that\n * // takes no parameter and evaluates to a promise of a boolean.\n * var urlChanged = function() {\n *   return browser.getCurrentUrl().then(function(url) {\n *     return url === 'http://www.angularjs.org';\n *   });\n * };\n *\n * // You can customize the conditions with EC.and, EC.or, and EC.not.\n * // Here's a condition to wait for url to change, $('abc') element to contain\n * // text 'bar', and button becomes clickable.\n * var condition = EC.and(urlChanged, EC.textToBePresentInElement($('abc'),\n * 'bar'), isClickable);\n * browser.get(URL);\n * browser.wait(condition, 5000); //wait for condition to be true.\n * button.click();\n *\n * @alias ExpectedConditions\n * @constructor\n */\nclass ProtractorExpectedConditions {\n    constructor(browser) {\n        this.browser = browser;\n    }\n    ;\n    /**\n     * Negates the result of a promise.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleIsNotFoo = EC.not(EC.titleIs('Foo'));\n     * // Waits for title to become something besides 'foo'.\n     * browser.wait(titleIsNotFoo, 5000);\n     *\n     * @alias ExpectedConditions.not\n     * @param {!function} expectedCondition\n     *\n     * @returns {!function} An expected condition that returns the negated value.\n     */\n    not(expectedCondition) {\n        return () => {\n            return expectedCondition().then((bool) => {\n                return !bool;\n            });\n        };\n    }\n    /**\n     * Helper function that is equivalent to the logical_and if defaultRet==true,\n     * or logical_or if defaultRet==false\n     *\n     * @private\n     * @param {boolean} defaultRet\n     * @param {Array.<Function>} fns An array of expected conditions to chain.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical chain.\n     */\n    logicalChain_(defaultRet, fns) {\n        let self = this;\n        return () => {\n            if (fns.length === 0) {\n                return defaultRet;\n            }\n            let fn = fns[0];\n            return fn().then((bool) => {\n                if (bool === defaultRet) {\n                    return self.logicalChain_(defaultRet, fns.slice(1))();\n                }\n                else {\n                    return !defaultRet;\n                }\n            });\n        };\n    }\n    /**\n     * Chain a number of expected conditions using logical_and, short circuiting\n     * at the first expected condition that evaluates to false.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleContainsFoo = EC.titleContains('Foo');\n     * var titleIsNotFooBar = EC.not(EC.titleIs('FooBar'));\n     * // Waits for title to contain 'Foo', but is not 'FooBar'\n     * browser.wait(EC.and(titleContainsFoo, titleIsNotFooBar), 5000);\n     *\n     * @alias ExpectedConditions.and\n     * @param {Array.<Function>} fns An array of expected conditions to 'and'\n     * together.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical and.\n     */\n    and(...args) {\n        return this.logicalChain_(true, args);\n    }\n    /**\n     * Chain a number of expected conditions using logical_or, short circuiting\n     * at the first expected condition that evaluates to true.\n     *\n     * @alias ExpectedConditions.or\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * var titleContainsFoo = EC.titleContains('Foo');\n     * var titleContainsBar = EC.titleContains('Bar');\n     * // Waits for title to contain either 'Foo' or 'Bar'\n     * browser.wait(EC.or(titleContainsFoo, titleContainsBar), 5000);\n     *\n     * @param {Array.<Function>} fns An array of expected conditions to 'or'\n     * together.\n     *\n     * @returns {!function} An expected condition that returns a promise which\n     *     evaluates to the result of the logical or.\n     */\n    or(...args) {\n        return this.logicalChain_(false, args);\n    }\n    /**\n     * Expect an alert to be present.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for an alert pops up.\n     * browser.wait(EC.alertIsPresent(), 5000);\n     *\n     * @alias ExpectedConditions.alertIsPresent\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether an alert is present.\n     */\n    alertIsPresent() {\n        return () => {\n            return this.browser.driver.switchTo().alert().then(() => {\n                return true;\n            }, (err) => {\n                if (err instanceof selenium_webdriver_1.error.NoSuchAlertError) {\n                    return false;\n                }\n                else {\n                    throw err;\n                }\n            });\n        };\n    }\n    /**\n     * An Expectation for checking an element is visible and enabled such that you\n     * can click it.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be clickable.\n     * browser.wait(EC.elementToBeClickable($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.elementToBeClickable\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is clickable.\n     */\n    elementToBeClickable(elementFinder) {\n        return this.and(this.visibilityOf(elementFinder), () => {\n            return elementFinder.isEnabled().then(util_1.passBoolean, util_1.falseIfMissing);\n        });\n    }\n    /**\n     * An expectation for checking if the given text is present in the\n     * element. Returns false if the elementFinder does not find an element.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to contain the text 'foo'.\n     * browser.wait(EC.textToBePresentInElement($('#abc'), 'foo'), 5000);\n     *\n     * @alias ExpectedConditions.textToBePresentInElement\n     * @param {!ElementFinder} elementFinder The element to check\n     * @param {!string} text The text to verify against\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the text is present in the element.\n     */\n    textToBePresentInElement(elementFinder, text) {\n        let hasText = () => {\n            return elementFinder.getText().then((actualText) => {\n                // MSEdge does not properly remove newlines, which causes false\n                // negatives\n                return actualText.replace(/\\r?\\n|\\r/g, '').indexOf(text) > -1;\n            }, util_1.falseIfMissing);\n        };\n        return this.and(this.presenceOf(elementFinder), hasText);\n    }\n    /**\n     * An expectation for checking if the given text is present in the elementâ€™s\n     * value. Returns false if the elementFinder does not find an element.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'myInput' to contain the input 'foo'.\n     * browser.wait(EC.textToBePresentInElementValue($('#myInput'), 'foo'), 5000);\n     *\n     * @alias ExpectedConditions.textToBePresentInElementValue\n     * @param {!ElementFinder} elementFinder The element to check\n     * @param {!string} text The text to verify against\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the text is present in the element's value.\n     */\n    textToBePresentInElementValue(elementFinder, text) {\n        let hasText = () => {\n            return elementFinder.getAttribute('value').then((actualText) => {\n                return actualText.indexOf(text) > -1;\n            }, util_1.falseIfMissing);\n        };\n        return this.and(this.presenceOf(elementFinder), hasText);\n    }\n    /**\n     * An expectation for checking that the title contains a case-sensitive\n     * substring.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the title to contain 'foo'.\n     * browser.wait(EC.titleContains('foo'), 5000);\n     *\n     * @alias ExpectedConditions.titleContains\n     * @param {!string} title The fragment of title expected\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the title contains the string.\n     */\n    titleContains(title) {\n        return () => {\n            return this.browser.driver.getTitle().then((actualTitle) => {\n                return actualTitle.indexOf(title) > -1;\n            });\n        };\n    }\n    /**\n     * An expectation for checking the title of a page.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the title to be 'foo'.\n     * browser.wait(EC.titleIs('foo'), 5000);\n     *\n     * @alias ExpectedConditions.titleIs\n     * @param {!string} title The expected title, which must be an exact match.\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the title equals the string.\n     */\n    titleIs(title) {\n        return () => {\n            return this.browser.driver.getTitle().then((actualTitle) => {\n                return actualTitle === title;\n            });\n        };\n    }\n    /**\n     * An expectation for checking that the URL contains a case-sensitive\n     * substring.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the URL to contain 'foo'.\n     * browser.wait(EC.urlContains('foo'), 5000);\n     *\n     * @alias ExpectedConditions.urlContains\n     * @param {!string} url The fragment of URL expected\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the URL contains the string.\n     */\n    urlContains(url) {\n        return () => {\n            return this.browser.driver.getCurrentUrl().then((actualUrl) => {\n                return actualUrl.indexOf(url) > -1;\n            });\n        };\n    }\n    /**\n     * An expectation for checking the URL of a page.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the URL to be 'foo'.\n     * browser.wait(EC.urlIs('foo'), 5000);\n     *\n     * @alias ExpectedConditions.urlIs\n     * @param {!string} url The expected URL, which must be an exact match.\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the url equals the string.\n     */\n    urlIs(url) {\n        return () => {\n            return this.browser.driver.getCurrentUrl().then((actualUrl) => {\n                return actualUrl === url;\n            });\n        };\n    }\n    /**\n     * An expectation for checking that an element is present on the DOM\n     * of a page. This does not necessarily mean that the element is visible.\n     * This is the opposite of 'stalenessOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be present on the dom.\n     * browser.wait(EC.presenceOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.presenceOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is present.\n     */\n    presenceOf(elementFinder) {\n        return elementFinder.isPresent.bind(elementFinder);\n    }\n    ;\n    /**\n     * An expectation for checking that an element is not attached to the DOM\n     * of a page. This is the opposite of 'presenceOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be no longer present on the dom.\n     * browser.wait(EC.stalenessOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.stalenessOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is stale.\n     */\n    stalenessOf(elementFinder) {\n        return this.not(this.presenceOf(elementFinder));\n    }\n    /**\n     * An expectation for checking that an element is present on the DOM of a\n     * page and visible. Visibility means that the element is not only displayed\n     * but also has a height and width that is greater than 0. This is the\n     * opposite\n     * of 'invisibilityOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be visible on the dom.\n     * browser.wait(EC.visibilityOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.visibilityOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is visible.\n     */\n    visibilityOf(elementFinder) {\n        return this.and(this.presenceOf(elementFinder), () => {\n            return elementFinder.isDisplayed().then(util_1.passBoolean, util_1.falseIfMissing);\n        });\n    }\n    /**\n     * An expectation for checking that an element is either invisible or not\n     * present on the DOM. This is the opposite of 'visibilityOf'.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'abc' to be no longer visible on the dom.\n     * browser.wait(EC.invisibilityOf($('#abc')), 5000);\n     *\n     * @alias ExpectedConditions.invisibilityOf\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is invisible.\n     */\n    invisibilityOf(elementFinder) {\n        return this.not(this.visibilityOf(elementFinder));\n    }\n    /**\n     * An expectation for checking the selection is selected.\n     *\n     * @example\n     * var EC = protractor.ExpectedConditions;\n     * // Waits for the element with id 'myCheckbox' to be selected.\n     * browser.wait(EC.elementToBeSelected($('#myCheckbox')), 5000);\n     *\n     * @alias ExpectedConditions.elementToBeSelected\n     * @param {!ElementFinder} elementFinder The element to check\n     *\n     * @returns {!function} An expected condition that returns a promise\n     *     representing whether the element is selected.\n     */\n    elementToBeSelected(elementFinder) {\n        return this.and(this.presenceOf(elementFinder), () => {\n            return elementFinder.isSelected().then(util_1.passBoolean, util_1.falseIfMissing);\n        });\n    }\n}\nexports.ProtractorExpectedConditions = ProtractorExpectedConditions;\n//# sourceMappingURL=expectedConditions.js.map"]},"metadata":{},"sourceType":"script"}