{"ast":null,"code":"/*!\n * Tmp\n *\n * Copyright (c) 2011-2015 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    path = require('path'),\n    crypto = require('crypto'),\n    tmpDir = require('os-tmpdir'),\n    _c = process.binding('constants');\n/**\n * The working inner variables.\n */\n\n\nvar // store the actual TMP directory\n_TMP = tmpDir(),\n    // the random characters to choose from\nRANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n    TEMPLATE_PATTERN = /XXXXXX/,\n    DEFAULT_TRIES = 3,\n    CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n    DIR_MODE = 448\n/* 0700 */\n,\n    FILE_MODE = 384\n/* 0600 */\n,\n    // this will hold the objects need to be removed on exit\n_removeObjects = [],\n    _gracefulCleanup = false,\n    _uncaughtException = false;\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {Number} howMany\n * @return {String}\n * @api private\n */\n\n\nfunction _randomChars(howMany) {\n  var value = [],\n      rnd = null; // make sure that we do not fail because we ran out of entropy\n\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\n\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api private\n */\n\n\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    var tmp = options,\n        options = callback || {},\n        callback = tmp;\n  } else if (typeof options == 'undefined') {\n    options = {};\n  }\n\n  return [options, callback];\n}\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {String}\n * @api private\n */\n\n\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || _TMP, opts.name);\n  } // mkstemps like template\n\n\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  } // prefix and postfix\n\n\n  var name = [opts.prefix || 'tmp-', process.pid, _randomChars(12), opts.postfix || ''].join('');\n  return path.join(opts.dir || _TMP, name);\n}\n/**\n * Gets a temporary file name.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api private\n */\n\n\nfunction _getTmpName(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1],\n      tries = opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0) return cb(new Error('Invalid tries'));\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    var name = _generateTmpName(opts); // check whether the path exists then retry if needed\n\n\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  })();\n}\n/**\n * Synchronous version of _getTmpName.\n *\n * @param {Object} options\n * @returns {String}\n * @api private\n */\n\n\nfunction _getTmpNameSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0],\n      tries = opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0) throw new Error('Invalid tries');\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) throw new Error('Invalid template provided');\n\n  do {\n    var name = _generateTmpName(opts);\n\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n/**\n * Creates and opens a temporary file.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\n\n\nfunction _createTmpFile(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1];\n\n  opts.postfix = _isUndefined(opts.postfix) ? '.tmp' : opts.postfix; // gets a temporary filename\n\n  _getTmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err); // create and open the file\n\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n/**\n * Synchronous version of _createTmpFile.\n *\n * @param {Object} options\n * @returns {Object} object consists of name, fd and removeCallback\n * @api private\n */\n\n\nfunction _createTmpFileSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n\n  var name = _getTmpNameSync(opts);\n\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, fd, opts)\n  };\n}\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {String} root\n * @api private\n */\n\n\nfunction _rmdirRecursiveSync(root) {\n  var dirs = [root];\n\n  do {\n    var dir = dirs.pop(),\n        deferred = false,\n        files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var file = path.join(dir, files[i]),\n          stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n/**\n * Creates a temporary directory.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\n\n\nfunction _createTmpDir(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1]; // gets a temporary filename\n\n\n  _getTmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err); // create the directory\n\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n/**\n * Synchronous version of _createTmpDir.\n *\n * @param {Object} options\n * @returns {Object} object consists of name and removeCallback\n * @api private\n */\n\n\nfunction _createTmpDirSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0];\n\n  var name = _getTmpNameSync(opts);\n\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {String} name\n * @param {int} fd\n * @param {Object} opts\n * @api private\n * @returns {Function} the callback\n */\n\n\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  var removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      fs.closeSync(fdPath[0]);\n    } catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (e.errno != -(_c.EBADF || _c.os.errno.EBADF) && e.errno != -(_c.ENOENT || _c.os.errno.ENOENT)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n\n    fs.unlinkSync(fdPath[1]);\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {String} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @api private\n */\n\n\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  var removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n\n  var removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @api private\n */\n\n\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n  return function _cleanupCallback() {\n    if (called) return;\n\n    var index = _removeObjects.indexOf(_cleanupCallback);\n\n    if (index >= 0) {\n      _removeObjects.splice(index, 1);\n    }\n\n    called = true;\n    removeFunction(arg);\n  };\n}\n/**\n * The garbage collector.\n *\n * @api private\n */\n\n\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  } // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n\n\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {// already removed?\n    }\n  }\n}\n\nfunction _setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nvar version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n\n  _garbageCollector();\n}); // exporting all the needed methods\n\nmodule.exports.tmpdir = _TMP;\nmodule.exports.dir = _createTmpDir;\nmodule.exports.dirSync = _createTmpDirSync;\nmodule.exports.file = _createTmpFile;\nmodule.exports.fileSync = _createTmpFileSync;\nmodule.exports.tmpName = _getTmpName;\nmodule.exports.tmpNameSync = _getTmpNameSync;\nmodule.exports.setGracefulCleanup = _setGracefulCleanup;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/node_modules/tmp/lib/tmp.js"],"names":["fs","require","path","crypto","tmpDir","_c","process","binding","_TMP","RANDOM_CHARS","TEMPLATE_PATTERN","DEFAULT_TRIES","CREATE_FLAGS","O_CREAT","O_EXCL","O_RDWR","DIR_MODE","FILE_MODE","_removeObjects","_gracefulCleanup","_uncaughtException","_randomChars","howMany","value","rnd","randomBytes","e","pseudoRandomBytes","i","push","length","join","_isUndefined","obj","_parseArguments","options","callback","tmp","_generateTmpName","opts","name","dir","template","replace","prefix","pid","postfix","_getTmpName","args","cb","tries","isNaN","Error","match","_getUniqueName","stat","err","_getTmpNameSync","statSync","_createTmpFile","_tmpNameCreated","open","mode","_fileCreated","fd","_prepareTmpFileRemoveCallback","_createTmpFileSync","openSync","removeCallback","_rmdirRecursiveSync","root","dirs","pop","deferred","files","readdirSync","file","lstatSync","isDirectory","unlinkSync","rmdirSync","_createTmpDir","mkdir","_dirCreated","_prepareTmpDirRemoveCallback","_createTmpDirSync","mkdirSync","_prepareRemoveCallback","_removeCallback","fdPath","closeSync","errno","EBADF","os","ENOENT","keep","unshift","removeFunction","unsafeCleanup","bind","arg","called","_cleanupCallback","index","indexOf","splice","_garbageCollector","call","_setGracefulCleanup","version","versions","node","split","map","parseInt","addListener","_uncaughtExceptionThrown","_exit","code","module","exports","tmpdir","dirSync","fileSync","tmpName","tmpNameSync","setGracefulCleanup"],"mappings":"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","sourcesContent":["/*!\n * Tmp\n *\n * Copyright (c) 2011-2015 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar\n  fs     = require('fs'),\n  path   = require('path'),\n  crypto = require('crypto'),\n  tmpDir = require('os-tmpdir'),\n  _c     = process.binding('constants');\n\n\n/**\n * The working inner variables.\n */\nvar\n  // store the actual TMP directory\n  _TMP = tmpDir(),\n\n  // the random characters to choose from\n  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\n  TEMPLATE_PATTERN = /XXXXXX/,\n\n  DEFAULT_TRIES = 3,\n\n  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n\n  DIR_MODE = 448 /* 0700 */,\n  FILE_MODE = 384 /* 0600 */,\n\n  // this will hold the objects need to be removed on exit\n  _removeObjects = [],\n\n  _gracefulCleanup = false,\n  _uncaughtException = false;\n\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {Number} howMany\n * @return {String}\n * @api private\n */\nfunction _randomChars(howMany) {\n  var\n    value = [],\n    rnd = null;\n\n  // make sure that we do not fail because we ran out of entropy\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api private\n */\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    var\n      tmp = options,\n      options = callback || {},\n      callback = tmp;\n  } else if (typeof options == 'undefined') {\n    options = {};\n  }\n\n  return [options, callback];\n}\n\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {String}\n * @api private\n */\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || _TMP, opts.name);\n  }\n\n  // mkstemps like template\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  }\n\n  // prefix and postfix\n  var name = [\n    opts.prefix || 'tmp-',\n    process.pid,\n    _randomChars(12),\n    opts.postfix || ''\n  ].join('');\n\n  return path.join(opts.dir || _TMP, name);\n}\n\n/**\n * Gets a temporary file name.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api private\n */\nfunction _getTmpName(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    tries = opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    return cb(new Error('Invalid tries'));\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    var name = _generateTmpName(opts);\n\n    // check whether the path exists then retry if needed\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  }());\n}\n\n/**\n * Synchronous version of _getTmpName.\n *\n * @param {Object} options\n * @returns {String}\n * @api private\n */\nfunction _getTmpNameSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0],\n    tries = opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    throw new Error('Invalid tries');\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    throw new Error('Invalid template provided');\n\n  do {\n    var name = _generateTmpName(opts);\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n\n/**\n * Creates and opens a temporary file.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\nfunction _createTmpFile(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;\n\n  // gets a temporary filename\n  _getTmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create and open the file\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of _createTmpFile.\n *\n * @param {Object} options\n * @returns {Object} object consists of name, fd and removeCallback\n * @api private\n */\nfunction _createTmpFileSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n\n  var name = _getTmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n\n  return {\n    name : name,\n    fd : fd,\n    removeCallback : _prepareTmpFileRemoveCallback(name, fd, opts)\n  };\n}\n\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {String} root\n * @api private\n */\nfunction _rmdirRecursiveSync(root) {\n  var dirs = [root];\n\n  do {\n    var\n      dir = dirs.pop(),\n      deferred = false,\n      files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var\n        file = path.join(dir, files[i]),\n        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n\n/**\n * Creates a temporary directory.\n *\n * @param {Object} options\n * @param {Function} callback\n * @api public\n */\nfunction _createTmpDir(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  // gets a temporary filename\n  _getTmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create the directory\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of _createTmpDir.\n *\n * @param {Object} options\n * @returns {Object} object consists of name and removeCallback\n * @api private\n */\nfunction _createTmpDirSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  var name = _getTmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n\n  return {\n    name : name,\n    removeCallback : _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {String} name\n * @param {int} fd\n * @param {Object} opts\n * @api private\n * @returns {Function} the callback\n */\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  var removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      fs.closeSync(fdPath[0]);\n    }\n    catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (e.errno != -(_c.EBADF || _c.os.errno.EBADF) && e.errno != -(_c.ENOENT || _c.os.errno.ENOENT)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n    fs.unlinkSync(fdPath[1]);\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {String} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @api private\n */\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  var removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n  var removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @api private\n */\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n\n  return function _cleanupCallback() {\n    if (called) return;\n\n    var index = _removeObjects.indexOf(_cleanupCallback);\n    if (index >= 0) {\n      _removeObjects.splice(index, 1);\n    }\n\n    called = true;\n    removeFunction(arg);\n  };\n}\n\n/**\n * The garbage collector.\n *\n * @api private\n */\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  }\n\n  // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {\n      // already removed?\n    }\n  }\n}\n\nfunction _setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nvar version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n  _garbageCollector();\n});\n\n// exporting all the needed methods\nmodule.exports.tmpdir = _TMP;\nmodule.exports.dir = _createTmpDir;\nmodule.exports.dirSync = _createTmpDirSync;\nmodule.exports.file = _createTmpFile;\nmodule.exports.fileSync = _createTmpFileSync;\nmodule.exports.tmpName = _getTmpName;\nmodule.exports.tmpNameSync = _getTmpNameSync;\nmodule.exports.setGracefulCleanup = _setGracefulCleanup;\n"]},"metadata":{},"sourceType":"script"}