{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome\n * web browser. Before using this module, you must download the latest\n * [ChromeDriver release] and ensure it can be found on your system [PATH].\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages the [ChromeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chrome\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n * __Headless Chrome__ <a id=\"headless\"></a>\n *\n * To start Chrome in headless mode, simply call\n * {@linkplain Options#headless Options.headless()}. Note, starting in headless\n * mode currently also disables GPU acceleration.\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().headless())\n *         .build();\n *\n * __Customizing the ChromeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every Chrome session will use a single driver service, which is\n * started the first time a {@link Driver} instance is created and terminated\n * when this process exits. The default service will inherit its environment\n * from the current process and direct all output to /dev/null. You may obtain\n * a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start Chrome using the\n * {@link selenium-webdriver.Builder}.\n *\n * __Working with Android__ <a id=\"android\"></a>\n *\n * The [ChromeDriver][android] supports running tests on the Chrome browser as\n * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to\n * work with Android, you must first start the adb\n *\n *     adb start-server\n *\n * By default, adb will start on port 5037. You may change this port, but this\n * will require configuring a [custom server](#custom-server) that will connect\n * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:\n *\n *     let service = new chrome.ServiceBuilder()\n *         .setAdbPort(1234)\n *         build();\n *     // etc.\n *\n * The ChromeDriver may be configured to launch Chrome on Android using\n * {@link Options#androidChrome()}:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().androidChrome())\n *         .build();\n *\n * Alternatively, you can configure the ChromeDriver to launch an app with a\n * Chrome-WebView by setting the {@linkplain Options#androidActivity\n * androidActivity} option:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options()\n *             .androidPackage('com.example')\n *             .androidActivity('com.example.Activity'))\n *         .build();\n *\n * [Refer to the ChromeDriver site] for more information on using the\n * [ChromeDriver with Android][android].\n *\n * [ChromeDriver]: https://sites.google.com/a/chromium.org/chromedriver/\n * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n * [android]: https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android\n * [webview]: https://developer.chrome.com/multidevice/webview/overview\n */\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar fs = require('fs');\n\nvar util = require('util');\n\nvar http = require('./http');\n\nvar io = require('./io');\n\nvar _require = require('./lib/capabilities'),\n    Capabilities = _require.Capabilities,\n    Capability = _require.Capability;\n\nvar command = require('./lib/command');\n\nvar logging = require('./lib/logging');\n\nvar promise = require('./lib/promise');\n\nvar Symbols = require('./lib/symbols');\n\nvar webdriver = require('./lib/webdriver');\n\nvar portprober = require('./net/portprober');\n\nvar remote = require('./remote');\n/**\n * Name of the ChromeDriver executable.\n * @type {string}\n * @const\n */\n\n\nvar CHROMEDRIVER_EXE = process.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver';\n/**\n * Custom command names supported by ChromeDriver.\n * @enum {string}\n */\n\nvar Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions'\n};\n/**\n * Creates a command executor with support for ChromeDriver's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @return {!command.Executor} The new command executor.\n */\n\nfunction createExecutor(url) {\n  var client = url.then(function (url) {\n    return new http.HttpClient(url);\n  });\n  var executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n/**\n * Configures the given executor with Chrome-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\n\n\nfunction configureExecutor(executor) {\n  executor.defineCommand(Command.LAUNCH_APP, 'POST', '/session/:sessionId/chromium/launch_app');\n  executor.defineCommand(Command.GET_NETWORK_CONDITIONS, 'GET', '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(Command.SET_NETWORK_CONDITIONS, 'POST', '/session/:sessionId/chromium/network_conditions');\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/)\n * server in a child process.\n */\n\n\nvar ServiceBuilder = /*#__PURE__*/function (_remote$DriverService) {\n  _inherits(ServiceBuilder, _remote$DriverService);\n\n  var _super = _createSuper(ServiceBuilder);\n\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the chromedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the chromedriver\n   *     cannot be found on the PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this;\n\n    _classCallCheck(this, ServiceBuilder);\n\n    var exe = opt_exe || io.findInPath(CHROMEDRIVER_EXE, true);\n\n    if (!exe) {\n      throw Error('The ChromeDriver could not be found on the current PATH. Please ' + 'download the latest version of the ChromeDriver from ' + 'http://chromedriver.storage.googleapis.com/index.html and ensure ' + 'it can be found on your PATH.');\n    }\n\n    _this = _super.call(this, exe);\n\n    _this.setLoopback(true); // Required\n\n\n    return _this;\n  }\n  /**\n   * Sets which port adb is listening to. _The ChromeDriver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n\n\n  _createClass(ServiceBuilder, [{\n    key: \"setAdbPort\",\n    value: function setAdbPort(port) {\n      return this.addArguments('--adb-port=' + port);\n    }\n    /**\n     * Sets the path of the log file the driver should log to. If a log file is\n     * not specified, the driver will log to stderr.\n     * @param {string} path Path of the log file to use.\n     * @return {!ServiceBuilder} A self reference.\n     */\n\n  }, {\n    key: \"loggingTo\",\n    value: function loggingTo(path) {\n      return this.addArguments('--log-path=' + path);\n    }\n    /**\n     * Enables verbose logging.\n     * @return {!ServiceBuilder} A self reference.\n     */\n\n  }, {\n    key: \"enableVerboseLogging\",\n    value: function enableVerboseLogging() {\n      return this.addArguments('--verbose');\n    }\n    /**\n     * Sets the number of threads the driver should use to manage HTTP requests.\n     * By default, the driver will use 4 threads.\n     * @param {number} n The number of threads to use.\n     * @return {!ServiceBuilder} A self reference.\n     */\n\n  }, {\n    key: \"setNumHttpThreads\",\n    value: function setNumHttpThreads(n) {\n      return this.addArguments('--http-threads=' + n);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"setPath\",\n    value: function setPath(path) {\n      _get(_getPrototypeOf(ServiceBuilder.prototype), \"setPath\", this).call(this, path);\n\n      return this.addArguments('--url-base=' + path);\n    }\n  }]);\n\n  return ServiceBuilder;\n}(remote.DriverService.Builder);\n/** @type {remote.DriverService} */\n\n\nvar defaultService = null;\n/**\n * Sets the default service to use for new ChromeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\n\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error('The previously configured ChromeDriver service is still running. ' + 'You must shut it down before you may adjust its configuration.');\n  }\n\n  defaultService = service;\n}\n/**\n * Returns the default ChromeDriver service. If such a service has not been\n * configured, one will be constructed using the default configuration for\n * a ChromeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default ChromeDriver service.\n */\n\n\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n\n  return defaultService;\n}\n\nvar OPTIONS_CAPABILITY_KEY = 'chromeOptions';\n/**\n * Class for managing ChromeDriver specific options.\n */\n\nvar Options = /*#__PURE__*/function () {\n  function Options() {\n    _classCallCheck(this, Options);\n\n    /** @private {!Object} */\n    this.options_ = {};\n    /** @private {!Array<(string|!Buffer)>} */\n\n    this.extensions_ = [];\n    /** @private {?logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?./lib/capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Extracts the ChromeDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} caps The capabilities object.\n   * @return {!Options} The ChromeDriver options.\n   */\n\n\n  _createClass(Options, [{\n    key: \"addArguments\",\n\n    /**\n     * Add additional command line arguments to use when launching the Chrome\n     * browser.  Each argument may be specified with or without the \"--\" prefix\n     * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n     * delimited by an \"=\": \"foo=bar\".\n     *\n     * @param {...(string|!Array<string>)} args The arguments to add.\n     * @return {!Options} A self reference.\n     */\n    value: function addArguments() {\n      var _ref;\n\n      var newArgs = (_ref = this.options_.args || []).concat.apply(_ref, arguments);\n\n      if (newArgs.length) {\n        this.options_.args = newArgs;\n      }\n\n      return this;\n    }\n    /**\n     * Configures the chromedriver to start Chrome in headless mode.\n     *\n     * > __NOTE:__ Resizing the browser window in headless mode is only supported\n     * > in Chrome 60. Users are encouraged to set an initial window size with\n     * > the {@link #windowSize windowSize({width, height})} option.\n     *\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"headless\",\n    value: function headless() {\n      // TODO(jleyba): Remove `disable-gpu` once head Chrome no longer requires\n      // that to be set.\n      return this.addArguments('headless', 'disable-gpu');\n    }\n    /**\n     * Sets the initial window size.\n     *\n     * @param {{width: number, height: number}} size The desired window size.\n     * @return {!Options} A self reference.\n     * @throws {TypeError} if width or height is unspecified, not a number, or\n     *     less than or equal to 0.\n     */\n\n  }, {\n    key: \"windowSize\",\n    value: function windowSize(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n\n      function checkArg(arg) {\n        if (typeof arg !== 'number' || arg <= 0) {\n          throw TypeError('Arguments must be {width, height} with numbers > 0');\n        }\n      }\n\n      checkArg(width);\n      checkArg(height);\n      return this.addArguments(\"window-size=\".concat(width, \",\").concat(height));\n    }\n    /**\n     * List of Chrome command line switches to exclude that ChromeDriver by default\n     * passes when starting Chrome.  Do not prefix switches with \"--\".\n     *\n     * @param {...(string|!Array<string>)} args The switches to exclude.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"excludeSwitches\",\n    value: function excludeSwitches() {\n      var _ref3;\n\n      var switches = (_ref3 = this.options_.excludeSwitches || []).concat.apply(_ref3, arguments);\n\n      if (switches.length) {\n        this.options_.excludeSwitches = switches;\n      }\n\n      return this;\n    }\n    /**\n     * Add additional extensions to install when launching Chrome. Each extension\n     * should be specified as the path to the packed CRX file, or a Buffer for an\n     * extension.\n     * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n     *     extensions to add.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"addExtensions\",\n    value: function addExtensions() {\n      var _this$extensions_;\n\n      this.extensions_ = (_this$extensions_ = this.extensions_).concat.apply(_this$extensions_, arguments);\n      return this;\n    }\n    /**\n     * Sets the path to the Chrome binary to use. On Mac OS X, this path should\n     * reference the actual Chrome executable, not just the application binary\n     * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n     *\n     * The binary path be absolute or relative to the chromedriver server\n     * executable, but it must exist on the machine that will launch Chrome.\n     *\n     * @param {string} path The path to the Chrome binary to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setChromeBinaryPath\",\n    value: function setChromeBinaryPath(path) {\n      this.options_.binary = path;\n      return this;\n    }\n    /**\n     * Sets whether to leave the started Chrome browser running if the controlling\n     * ChromeDriver service is killed before {@link webdriver.WebDriver#quit()} is\n     * called.\n     * @param {boolean} detach Whether to leave the browser running if the\n     *     chromedriver service is killed before the session.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"detachDriver\",\n    value: function detachDriver(detach) {\n      this.options_.detach = detach;\n      return this;\n    }\n    /**\n     * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n     * file in Chrome's user data directory for examples.\n     * @param {!Object} prefs Dictionary of user preferences to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setUserPreferences\",\n    value: function setUserPreferences(prefs) {\n      this.options_.prefs = prefs;\n      return this;\n    }\n    /**\n     * Sets the logging preferences for the new session.\n     * @param {!logging.Preferences} prefs The logging preferences.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setLoggingPrefs\",\n    value: function setLoggingPrefs(prefs) {\n      this.logPrefs_ = prefs;\n      return this;\n    }\n    /**\n     * Sets the performance logging preferences. Options include:\n     *\n     * - `enableNetwork`: Whether or not to collect events from Network domain.\n     * - `enablePage`: Whether or not to collect events from Page domain.\n     * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n     *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n     *     unless `enableTimeline` is explicitly set to true.\n     * - `tracingCategories`: A comma-separated string of Chrome tracing\n     *     categories for which trace events should be collected. An unspecified\n     *     or empty string disables tracing.\n     * - `bufferUsageReportingInterval`: The requested number of milliseconds\n     *     between DevTools trace buffer usage events. For example, if 1000, then\n     *     once per second, DevTools will report how full the trace buffer is. If\n     *     a report indicates the buffer usage is 100%, a warning will be issued.\n     *\n     * @param {{enableNetwork: boolean,\n     *          enablePage: boolean,\n     *          enableTimeline: boolean,\n     *          tracingCategories: string,\n     *          bufferUsageReportingInterval: number}} prefs The performance\n     *     logging preferences.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setPerfLoggingPrefs\",\n    value: function setPerfLoggingPrefs(prefs) {\n      this.options_.perfLoggingPrefs = prefs;\n      return this;\n    }\n    /**\n     * Sets preferences for the \"Local State\" file in Chrome's user data\n     * directory.\n     * @param {!Object} state Dictionary of local state preferences.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setLocalState\",\n    value: function setLocalState(state) {\n      this.options_.localState = state;\n      return this;\n    }\n    /**\n     * Sets the name of the activity hosting a Chrome-based Android WebView. This\n     * option must be set to connect to an [Android WebView](\n     * https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android)\n     *\n     * @param {string} name The activity name.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidActivity\",\n    value: function androidActivity(name) {\n      this.options_.androidActivity = name;\n      return this;\n    }\n    /**\n     * Sets the device serial number to connect to via ADB. If not specified, the\n     * ChromeDriver will select an unused device at random. An error will be\n     * returned if all devices already have active sessions.\n     *\n     * @param {string} serial The device serial number to connect to.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidDeviceSerial\",\n    value: function androidDeviceSerial(serial) {\n      this.options_.androidDeviceSerial = serial;\n      return this;\n    }\n    /**\n     * Configures the ChromeDriver to launch Chrome on Android via adb. This\n     * function is shorthand for\n     * {@link #androidPackage options.androidPackage('com.android.chrome')}.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidChrome\",\n    value: function androidChrome() {\n      return this.androidPackage('com.android.chrome');\n    }\n    /**\n     * Sets the package name of the Chrome or WebView app.\n     *\n     * @param {?string} pkg The package to connect to, or `null` to disable Android\n     *     and switch back to using desktop Chrome.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidPackage\",\n    value: function androidPackage(pkg) {\n      this.options_.androidPackage = pkg;\n      return this;\n    }\n    /**\n     * Sets the process name of the Activity hosting the WebView (as given by\n     * `ps`). If not specified, the process name is assumed to be the same as\n     * {@link #androidPackage}.\n     *\n     * @param {string} processName The main activity name.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidProcess\",\n    value: function androidProcess(processName) {\n      this.options_.androidProcess = processName;\n      return this;\n    }\n    /**\n     * Sets whether to connect to an already-running instead of the specified\n     * {@linkplain #androidProcess app} instead of launching the app with a clean\n     * data directory.\n     *\n     * @param {boolean} useRunning Whether to connect to a running instance.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"androidUseRunningApp\",\n    value: function androidUseRunningApp(useRunning) {\n      this.options_.androidUseRunningApp = useRunning;\n      return this;\n    }\n    /**\n     * Sets the path to Chrome's log file. This path should exist on the machine\n     * that will launch Chrome.\n     * @param {string} path Path to the log file to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setChromeLogFile\",\n    value: function setChromeLogFile(path) {\n      this.options_.logPath = path;\n      return this;\n    }\n    /**\n     * Sets the directory to store Chrome minidumps in. This option is only\n     * supported when ChromeDriver is running on Linux.\n     * @param {string} path The directory path.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setChromeMinidumpPath\",\n    value: function setChromeMinidumpPath(path) {\n      this.options_.minidumpPath = path;\n      return this;\n    }\n    /**\n     * Configures Chrome to emulate a mobile device. For more information, refer\n     * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n     * options include:\n     *\n     * - `deviceName`: The name of a pre-configured [emulated device][devem]\n     * - `width`: screen width, in pixels\n     * - `height`: screen height, in pixels\n     * - `pixelRatio`: screen pixel ratio\n     *\n     * __Example 1: Using a Pre-configured Device__\n     *\n     *     let options = new chrome.Options().setMobileEmulation(\n     *         {deviceName: 'Google Nexus 5'});\n     *\n     *     let driver = chrome.Driver.createSession(options);\n     *\n     * __Example 2: Using Custom Screen Configuration__\n     *\n     *     let options = new chrome.Options().setMobileEmulation({\n     *         width: 360,\n     *         height: 640,\n     *         pixelRatio: 3.0\n     *     });\n     *\n     *     let driver = chrome.Driver.createSession(options);\n     *\n     *\n     * [em]: https://sites.google.com/a/chromium.org/chromedriver/mobile-emulation\n     * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n     *\n     * @param {?({deviceName: string}|\n     *           {width: number, height: number, pixelRatio: number})} config The\n     *     mobile emulation configuration, or `null` to disable emulation.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setMobileEmulation\",\n    value: function setMobileEmulation(config) {\n      this.options_.mobileEmulation = config;\n      return this;\n    }\n    /**\n     * Sets the proxy settings for the new session.\n     * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to\n     *    use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n    /**\n     * Converts this options instance to a {@link Capabilities} object.\n     * @param {Capabilities=} opt_capabilities The capabilities to merge\n     *     these options into, if any.\n     * @return {!Capabilities} The capabilities.\n     */\n\n  }, {\n    key: \"toCapabilities\",\n    value: function toCapabilities(opt_capabilities) {\n      var caps = opt_capabilities || Capabilities.chrome();\n      caps.set(Capability.PROXY, this.proxy_).set(Capability.LOGGING_PREFS, this.logPrefs_).set(OPTIONS_CAPABILITY_KEY, this);\n      return caps;\n    }\n    /**\n     * Converts this instance to its JSON wire protocol representation. Note this\n     * function is an implementation not intended for general use.\n     * @return {!Object} The JSON wire protocol representation of this instance.\n     */\n\n  }, {\n    key: Symbols.serialize,\n    value: function value() {\n      var json = {};\n\n      for (var key in this.options_) {\n        if (this.options_[key] != null) {\n          json[key] = this.options_[key];\n        }\n      }\n\n      if (this.extensions_.length) {\n        json.extensions = this.extensions_.map(function (extension) {\n          if (Buffer.isBuffer(extension)) {\n            return extension.toString('base64');\n          }\n\n          return io.read(\n          /** @type {string} */\n          extension).then(function (buffer) {\n            return buffer.toString('base64');\n          });\n        });\n      }\n\n      return json;\n    }\n  }], [{\n    key: \"fromCapabilities\",\n    value: function fromCapabilities(caps) {\n      var options = new Options();\n      var o = caps.get(OPTIONS_CAPABILITY_KEY);\n\n      if (o instanceof Options) {\n        options = o;\n      } else if (o) {\n        options.addArguments(o.args || []).addExtensions(o.extensions || []).detachDriver(o.detach).excludeSwitches(o.excludeSwitches || []).setChromeBinaryPath(o.binary).setChromeLogFile(o.logPath).setChromeMinidumpPath(o.minidumpPath).setLocalState(o.localState).setMobileEmulation(o.mobileEmulation).setUserPreferences(o.prefs).setPerfLoggingPrefs(o.perfLoggingPrefs);\n      }\n\n      if (caps.has(Capability.PROXY)) {\n        options.setProxy(caps.get(Capability.PROXY));\n      }\n\n      if (caps.has(Capability.LOGGING_PREFS)) {\n        options.setLoggingPrefs(caps.get(Capability.LOGGING_PREFS));\n      }\n\n      return options;\n    }\n  }]);\n\n  return Options;\n}();\n/**\n * Creates a new WebDriver client for Chrome.\n */\n\n\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n\n  var _super2 = _createSuper(Driver);\n\n  function Driver() {\n    _classCallCheck(this, Driver);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    value: function setFileDetector() {}\n    /**\n     * Schedules a command to launch Chrome App with given ID.\n     * @param {string} id ID of the App to launch.\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when app is launched.\n     */\n\n  }, {\n    key: \"launchApp\",\n    value: function launchApp(id) {\n      return this.schedule(new command.Command(Command.LAUNCH_APP).setParameter('id', id), 'Driver.launchApp()');\n    }\n    /**\n     * Schedules a command to get Chrome network emulation settings.\n     * @return {!promise.Thenable<T>} A promise that will be resolved\n     *     when network emulation settings are retrievied.\n     */\n\n  }, {\n    key: \"getNetworkConditions\",\n    value: function getNetworkConditions() {\n      return this.schedule(new command.Command(Command.GET_NETWORK_CONDITIONS), 'Driver.getNetworkConditions()');\n    }\n    /**\n     * Schedules a command to set Chrome network emulation settings.\n     *\n     * __Sample Usage:__\n     *\n     *  driver.setNetworkConditions({\n     *    offline: false,\n     *    latency: 5, // Additional latency (ms).\n     *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n     *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n     * });\n     *\n     * @param {Object} spec Defines the network conditions to set\n     * @return {!promise.Thenable<void>} A promise that will be resolved\n     *     when network emulation settings are set.\n     */\n\n  }, {\n    key: \"setNetworkConditions\",\n    value: function setNetworkConditions(spec) {\n      if (!spec || typeof spec !== 'object') {\n        throw TypeError('setNetworkConditions called with non-network-conditions parameter');\n      }\n\n      return this.schedule(new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec), 'Driver.setNetworkConditions(' + JSON.stringify(spec) + ')');\n    }\n  }], [{\n    key: \"createSession\",\n\n    /**\n     * Creates a new session with the ChromeDriver.\n     *\n     * @param {(Capabilities|Options)=} opt_config The configuration options.\n     * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n     *     a  DriverService to use for the remote end, or a preconfigured executor\n     *     for an externally managed endpoint. If neither is provided, the\n     *     {@linkplain ##getDefaultService default service} will be used by\n     *     default.\n     * @param {promise.ControlFlow=} opt_flow The control flow to use, or `null`\n     *     to use the currently active flow.\n     * @return {!Driver} A new driver instance.\n     */\n    value: function createSession(opt_config, opt_serviceExecutor, opt_flow) {\n      var executor;\n\n      if (opt_serviceExecutor instanceof http.Executor) {\n        executor = opt_serviceExecutor;\n        configureExecutor(executor);\n      } else {\n        var service = opt_serviceExecutor || getDefaultService();\n        executor = createExecutor(service.start());\n      }\n\n      var caps = opt_config instanceof Options ? opt_config.toCapabilities() : opt_config || Capabilities.chrome();\n      return (\n        /** @type {!Driver} */\n        _get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, opt_flow)\n      );\n    }\n  }]);\n\n  return Driver;\n}(webdriver.WebDriver); // PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/chrome.js"],"names":["fs","require","util","http","io","Capabilities","Capability","command","logging","promise","Symbols","webdriver","portprober","remote","CHROMEDRIVER_EXE","process","platform","Command","LAUNCH_APP","GET_NETWORK_CONDITIONS","SET_NETWORK_CONDITIONS","createExecutor","url","client","then","HttpClient","executor","Executor","configureExecutor","defineCommand","ServiceBuilder","opt_exe","exe","findInPath","Error","setLoopback","port","addArguments","path","n","DriverService","Builder","defaultService","setDefaultService","service","isRunning","getDefaultService","build","OPTIONS_CAPABILITY_KEY","Options","options_","extensions_","logPrefs_","proxy_","newArgs","args","concat","length","width","height","checkArg","arg","TypeError","switches","excludeSwitches","binary","detach","prefs","perfLoggingPrefs","state","localState","name","androidActivity","serial","androidDeviceSerial","androidPackage","pkg","processName","androidProcess","useRunning","androidUseRunningApp","logPath","minidumpPath","config","mobileEmulation","proxy","opt_capabilities","caps","chrome","set","PROXY","LOGGING_PREFS","serialize","json","key","extensions","map","extension","Buffer","isBuffer","toString","read","buffer","options","o","get","addExtensions","detachDriver","setChromeBinaryPath","setChromeLogFile","setChromeMinidumpPath","setLocalState","setMobileEmulation","setUserPreferences","setPerfLoggingPrefs","has","setProxy","setLoggingPrefs","Driver","id","schedule","setParameter","spec","JSON","stringify","opt_config","opt_serviceExecutor","opt_flow","start","toCapabilities","WebDriver","exports"],"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ACA;AACA;AACA;AACA;;;;sCAC2B;AAAA;;AACvB,UAAII,QAAQ,GAAG,SAAC,KAAKb,QAAL,CAAcc,eAAd,IAAiC,EAAlC,EAAsCR,MAAtC,wBAAf;;AACA,UAAIO,QAAQ,CAACN,MAAb,EAAqB;AACnB,aAAKP,QAAL,CAAcc,eAAd,GAAgCD,QAAhC;AACD;;AACD,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACyB;AAAA;;AACrB,WAAKZ,WAAL,GAAmB,0BAAKA,WAAL,EAAiBK,MAAjB,oCAAnB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wCACsBlB,I,EAAM;AACxB,WAAKY,QAAL,CAAce,MAAd,GAAuB3B,IAAvB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCACe4B,M,EAAQ;AACnB,WAAKhB,QAAL,CAAcgB,MAAd,GAAuBA,MAAvB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;uCACqBC,K,EAAO;AACxB,WAAKjB,QAAL,CAAciB,KAAd,GAAsBA,KAAtB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;oCACkBA,K,EAAO;AACrB,WAAKf,SAAL,GAAiBe,KAAjB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wCACsBA,K,EAAO;AACzB,WAAKjB,QAAL,CAAckB,gBAAd,GAAiCD,KAAjC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;kCACgBE,K,EAAO;AACnB,WAAKnB,QAAL,CAAcoB,UAAd,GAA2BD,KAA3B;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACkBE,I,EAAM;AACpB,WAAKrB,QAAL,CAAcsB,eAAd,GAAgCD,IAAhC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;wCACsBE,M,EAAQ;AAC1B,WAAKvB,QAAL,CAAcwB,mBAAd,GAAoCD,MAApC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;oCACkB;AACd,aAAO,KAAKE,cAAL,CAAoB,oBAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;mCACiBC,G,EAAK;AAClB,WAAK1B,QAAL,CAAcyB,cAAd,GAA+BC,GAA/B;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCACiBC,W,EAAa;AAC1B,WAAK3B,QAAL,CAAc4B,cAAd,GAA+BD,WAA/B;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACuBE,U,EAAY;AAC/B,WAAK7B,QAAL,CAAc8B,oBAAd,GAAqCD,UAArC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;qCACmBzC,I,EAAM;AACrB,WAAKY,QAAL,CAAc+B,OAAd,GAAwB3C,IAAxB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;0CACwBA,I,EAAM;AAC1B,WAAKY,QAAL,CAAcgC,YAAd,GAA6B5C,IAA7B;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCACqB6C,M,EAAQ;AACzB,WAAKjC,QAAL,CAAckC,eAAd,GAAgCD,MAAhC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;6BACWE,K,EAAO;AACd,WAAKhC,MAAL,GAAcgC,KAAd;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;mCACiBC,gB,EAAkB;AAC/B,UAAIC,IAAI,GAAGD,gBAAgB,IAAIjF,YAAY,CAACmF,MAAb,EAA/B;AACAD,MAAAA,IAAI,CACAE,GADJ,CACQnF,UAAU,CAACoF,KADnB,EAC0B,KAAKrC,MAD/B,EAEIoC,GAFJ,CAEQnF,UAAU,CAACqF,aAFnB,EAEkC,KAAKvC,SAFvC,EAGIqC,GAHJ,CAGQzC,sBAHR,EAGgC,IAHhC;AAIA,aAAOuC,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;SACG7E,OAAO,CAACkF,S;4BAAa;AACpB,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAK5C,QAArB,EAA+B;AAC7B,YAAI,KAAKA,QAAL,CAAc4C,GAAd,KAAsB,IAA1B,EAAgC;AAC9BD,UAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,KAAK5C,QAAL,CAAc4C,GAAd,CAAZ;AACD;AACF;;AACD,UAAI,KAAK3C,WAAL,CAAiBM,MAArB,EAA6B;AAC3BoC,QAAAA,IAAI,CAACE,UAAL,GAAkB,KAAK5C,WAAL,CAAiB6C,GAAjB,CAAqB,UAASC,SAAT,EAAoB;AACzD,cAAIC,MAAM,CAACC,QAAP,CAAgBF,SAAhB,CAAJ,EAAgC;AAC9B,mBAAOA,SAAS,CAACG,QAAV,CAAmB,QAAnB,CAAP;AACD;;AACD,iBAAOhG,EAAE,CAACiG,IAAH;AAAQ;AAAsBJ,UAAAA,SAA9B,EACFzE,IADE,CACG,UAAA8E,MAAM;AAAA,mBAAIA,MAAM,CAACF,QAAP,CAAgB,QAAhB,CAAJ;AAAA,WADT,CAAP;AAED,SANiB,CAAlB;AAOD;;AACD,aAAOP,IAAP;AACD;;;qCAnYuBN,I,EAAM;AAC5B,UAAIgB,OAAO,GAAG,IAAItD,OAAJ,EAAd;AAEA,UAAIuD,CAAC,GAAGjB,IAAI,CAACkB,GAAL,CAASzD,sBAAT,CAAR;;AACA,UAAIwD,CAAC,YAAYvD,OAAjB,EAA0B;AACxBsD,QAAAA,OAAO,GAAGC,CAAV;AACD,OAFD,MAEO,IAAIA,CAAJ,EAAO;AACZD,QAAAA,OAAO,CACHlE,YADJ,CACiBmE,CAAC,CAACjD,IAAF,IAAU,EAD3B,EAEImD,aAFJ,CAEkBF,CAAC,CAACT,UAAF,IAAgB,EAFlC,EAGIY,YAHJ,CAGiBH,CAAC,CAACtC,MAHnB,EAIIF,eAJJ,CAIoBwC,CAAC,CAACxC,eAAF,IAAqB,EAJzC,EAKI4C,mBALJ,CAKwBJ,CAAC,CAACvC,MAL1B,EAMI4C,gBANJ,CAMqBL,CAAC,CAACvB,OANvB,EAOI6B,qBAPJ,CAO0BN,CAAC,CAACtB,YAP5B,EAQI6B,aARJ,CAQkBP,CAAC,CAAClC,UARpB,EASI0C,kBATJ,CASuBR,CAAC,CAACpB,eATzB,EAUI6B,kBAVJ,CAUuBT,CAAC,CAACrC,KAVzB,EAWI+C,mBAXJ,CAWwBV,CAAC,CAACpC,gBAX1B;AAYD;;AAED,UAAImB,IAAI,CAAC4B,GAAL,CAAS7G,UAAU,CAACoF,KAApB,CAAJ,EAAgC;AAC9Ba,QAAAA,OAAO,CAACa,QAAR,CAAiB7B,IAAI,CAACkB,GAAL,CAASnG,UAAU,CAACoF,KAApB,CAAjB;AACD;;AAED,UAAIH,IAAI,CAAC4B,GAAL,CAAS7G,UAAU,CAACqF,aAApB,CAAJ,EAAwC;AACtCY,QAAAA,OAAO,CAACc,eAAR,CACI9B,IAAI,CAACkB,GAAL,CAASnG,UAAU,CAACqF,aAApB,CADJ;AAED;;AAED,aAAOY,OAAP;AACD;;;;;AAwWH;AACA;AACA;;;IACMe,M;;;;;;;;;;;;;;AAiCJ;AACF;AACA;AACA;AACA;sCACoB,CAAE;AAEpB;AACF;AACA;AACA;AACA;AACA;;;;8BACYC,E,EAAI;AACZ,aAAO,KAAKC,QAAL,CACH,IAAIjH,OAAO,CAACU,OAAZ,CAAoBA,OAAO,CAACC,UAA5B,EAAwCuG,YAAxC,CAAqD,IAArD,EAA2DF,EAA3D,CADG,EAEH,oBAFG,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;;;2CACyB;AACrB,aAAO,KAAKC,QAAL,CACH,IAAIjH,OAAO,CAACU,OAAZ,CAAoBA,OAAO,CAACE,sBAA5B,CADG,EAEH,+BAFG,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACuBuG,I,EAAM;AACzB,UAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,cAAM5D,SAAS,CAAC,mEAAD,CAAf;AACD;;AAED,aAAO,KAAK0D,QAAL,CACH,IAAIjH,OAAO,CAACU,OAAZ,CAAoBA,OAAO,CAACG,sBAA5B,EAAoDqG,YAApD,CAAiE,oBAAjE,EAAuFC,IAAvF,CADG,EAEH,iCAAiCC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAjC,GAAwD,GAFrD,CAAP;AAGD;;;;AArFD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCACuBG,U,EAAYC,mB,EAAqBC,Q,EAAU;AAC9D,UAAIrG,QAAJ;;AACA,UAAIoG,mBAAmB,YAAY3H,IAAI,CAACwB,QAAxC,EAAkD;AAChDD,QAAAA,QAAQ,GAAGoG,mBAAX;AACAlG,QAAAA,iBAAiB,CAACF,QAAD,CAAjB;AACD,OAHD,MAGO;AACL,YAAIkB,OAAO,GAAGkF,mBAAmB,IAAIhF,iBAAiB,EAAtD;AACApB,QAAAA,QAAQ,GAAGL,cAAc,CAACuB,OAAO,CAACoF,KAAR,EAAD,CAAzB;AACD;;AAED,UAAIzC,IAAI,GACJsC,UAAU,YAAY5E,OAAtB,GAAgC4E,UAAU,CAACI,cAAX,EAAhC,GACCJ,UAAU,IAAIxH,YAAY,CAACmF,MAAb,EAFnB;AAIA;AAAO;AAAP,wEACwB9D,QADxB,EACkC6D,IADlC,EACwCwC,QADxC;AAAA;AAED;;;;EA/BkBpH,SAAS,CAACuH,S,GA2F/B;;;AAGAC,OAAO,CAACb,MAAR,GAAiBA,MAAjB;AACAa,OAAO,CAAClF,OAAR,GAAkBA,OAAlB;AACAkF,OAAO,CAACrG,cAAR,GAAyBA,cAAzB;AACAqG,OAAO,CAACrF,iBAAR,GAA4BA,iBAA5B;AACAqF,OAAO,CAACxF,iBAAR,GAA4BA,iBAA5B","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome\n * web browser. Before using this module, you must download the latest\n * [ChromeDriver release] and ensure it can be found on your system [PATH].\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages the [ChromeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chrome\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n * __Headless Chrome__ <a id=\"headless\"></a>\n *\n * To start Chrome in headless mode, simply call\n * {@linkplain Options#headless Options.headless()}. Note, starting in headless\n * mode currently also disables GPU acceleration.\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().headless())\n *         .build();\n *\n * __Customizing the ChromeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every Chrome session will use a single driver service, which is\n * started the first time a {@link Driver} instance is created and terminated\n * when this process exits. The default service will inherit its environment\n * from the current process and direct all output to /dev/null. You may obtain\n * a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start Chrome using the\n * {@link selenium-webdriver.Builder}.\n *\n * __Working with Android__ <a id=\"android\"></a>\n *\n * The [ChromeDriver][android] supports running tests on the Chrome browser as\n * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to\n * work with Android, you must first start the adb\n *\n *     adb start-server\n *\n * By default, adb will start on port 5037. You may change this port, but this\n * will require configuring a [custom server](#custom-server) that will connect\n * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:\n *\n *     let service = new chrome.ServiceBuilder()\n *         .setAdbPort(1234)\n *         build();\n *     // etc.\n *\n * The ChromeDriver may be configured to launch Chrome on Android using\n * {@link Options#androidChrome()}:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().androidChrome())\n *         .build();\n *\n * Alternatively, you can configure the ChromeDriver to launch an app with a\n * Chrome-WebView by setting the {@linkplain Options#androidActivity\n * androidActivity} option:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options()\n *             .androidPackage('com.example')\n *             .androidActivity('com.example.Activity'))\n *         .build();\n *\n * [Refer to the ChromeDriver site] for more information on using the\n * [ChromeDriver with Android][android].\n *\n * [ChromeDriver]: https://sites.google.com/a/chromium.org/chromedriver/\n * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n * [android]: https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android\n * [webview]: https://developer.chrome.com/multidevice/webview/overview\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst util = require('util');\n\nconst http = require('./http');\nconst io = require('./io');\nconst {Capabilities, Capability} = require('./lib/capabilities');\nconst command = require('./lib/command');\nconst logging = require('./lib/logging');\nconst promise = require('./lib/promise');\nconst Symbols = require('./lib/symbols');\nconst webdriver = require('./lib/webdriver');\nconst portprober = require('./net/portprober');\nconst remote = require('./remote');\n\n\n/**\n * Name of the ChromeDriver executable.\n * @type {string}\n * @const\n */\nconst CHROMEDRIVER_EXE =\n    process.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver';\n\n\n/**\n * Custom command names supported by ChromeDriver.\n * @enum {string}\n */\nconst Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions'\n};\n\n\n/**\n * Creates a command executor with support for ChromeDriver's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url) {\n  let client = url.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Chrome-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      Command.LAUNCH_APP,\n      'POST',\n      '/session/:sessionId/chromium/launch_app');\n  executor.defineCommand(\n      Command.GET_NETWORK_CONDITIONS,\n      'GET',\n      '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(\n      Command.SET_NETWORK_CONDITIONS,\n      'POST',\n      '/session/:sessionId/chromium/network_conditions');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the chromedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the chromedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || io.findInPath(CHROMEDRIVER_EXE, true);\n    if (!exe) {\n      throw Error(\n          'The ChromeDriver could not be found on the current PATH. Please ' +\n          'download the latest version of the ChromeDriver from ' +\n          'http://chromedriver.storage.googleapis.com/index.html and ensure ' +\n          'it can be found on your PATH.');\n    }\n\n    super(exe);\n    this.setLoopback(true);  // Required\n  }\n\n  /**\n   * Sets which port adb is listening to. _The ChromeDriver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setAdbPort(port) {\n    return this.addArguments('--adb-port=' + port);\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path);\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose');\n  }\n\n  /**\n   * Sets the number of threads the driver should use to manage HTTP requests.\n   * By default, the driver will use 4 threads.\n   * @param {number} n The number of threads to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setNumHttpThreads(n) {\n    return this.addArguments('--http-threads=' + n);\n  }\n\n  /**\n   * @override\n   */\n  setPath(path) {\n    super.setPath(path);\n    return this.addArguments('--url-base=' + path);\n  }\n}\n\n\n\n/** @type {remote.DriverService} */\nlet defaultService = null;\n\n\n/**\n * Sets the default service to use for new ChromeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error(\n        'The previously configured ChromeDriver service is still running. ' +\n        'You must shut it down before you may adjust its configuration.');\n  }\n  defaultService = service;\n}\n\n\n/**\n * Returns the default ChromeDriver service. If such a service has not been\n * configured, one will be constructed using the default configuration for\n * a ChromeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default ChromeDriver service.\n */\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n  return defaultService;\n}\n\n\nconst OPTIONS_CAPABILITY_KEY = 'chromeOptions';\n\n\n/**\n * Class for managing ChromeDriver specific options.\n */\nclass Options {\n  constructor() {\n    /** @private {!Object} */\n    this.options_ = {};\n\n    /** @private {!Array<(string|!Buffer)>} */\n    this.extensions_ = [];\n\n    /** @private {?logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?./lib/capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the ChromeDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} caps The capabilities object.\n   * @return {!Options} The ChromeDriver options.\n   */\n  static fromCapabilities(caps) {\n    let options = new Options();\n\n    let o = caps.get(OPTIONS_CAPABILITY_KEY);\n    if (o instanceof Options) {\n      options = o;\n    } else if (o) {\n      options.\n          addArguments(o.args || []).\n          addExtensions(o.extensions || []).\n          detachDriver(o.detach).\n          excludeSwitches(o.excludeSwitches || []).\n          setChromeBinaryPath(o.binary).\n          setChromeLogFile(o.logPath).\n          setChromeMinidumpPath(o.minidumpPath).\n          setLocalState(o.localState).\n          setMobileEmulation(o.mobileEmulation).\n          setUserPreferences(o.prefs).\n          setPerfLoggingPrefs(o.perfLoggingPrefs);\n    }\n\n    if (caps.has(Capability.PROXY)) {\n      options.setProxy(caps.get(Capability.PROXY));\n    }\n\n    if (caps.has(Capability.LOGGING_PREFS)) {\n      options.setLoggingPrefs(\n          caps.get(Capability.LOGGING_PREFS));\n    }\n\n    return options;\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the Chrome\n   * browser.  Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   *\n   * @param {...(string|!Array<string>)} args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    let newArgs = (this.options_.args || []).concat(...args);\n    if (newArgs.length) {\n      this.options_.args = newArgs;\n    }\n    return this;\n  }\n\n  /**\n   * Configures the chromedriver to start Chrome in headless mode.\n   *\n   * > __NOTE:__ Resizing the browser window in headless mode is only supported\n   * > in Chrome 60. Users are encouraged to set an initial window size with\n   * > the {@link #windowSize windowSize({width, height})} option.\n   *\n   * @return {!Options} A self reference.\n   */\n  headless() {\n    // TODO(jleyba): Remove `disable-gpu` once head Chrome no longer requires\n    // that to be set.\n    return this.addArguments('headless', 'disable-gpu');\n  }\n\n  /**\n   * Sets the initial window size.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({width, height}) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`window-size=${width},${height}`);\n  }\n\n  /**\n   * List of Chrome command line switches to exclude that ChromeDriver by default\n   * passes when starting Chrome.  Do not prefix switches with \"--\".\n   *\n   * @param {...(string|!Array<string>)} args The switches to exclude.\n   * @return {!Options} A self reference.\n   */\n  excludeSwitches(...args) {\n    let switches = (this.options_.excludeSwitches || []).concat(...args);\n    if (switches.length) {\n      this.options_.excludeSwitches = switches;\n    }\n    return this;\n  }\n\n  /**\n   * Add additional extensions to install when launching Chrome. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...args) {\n    this.extensions_ = this.extensions_.concat(...args);\n    return this;\n  }\n\n  /**\n   * Sets the path to the Chrome binary to use. On Mac OS X, this path should\n   * reference the actual Chrome executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path be absolute or relative to the chromedriver server\n   * executable, but it must exist on the machine that will launch Chrome.\n   *\n   * @param {string} path The path to the Chrome binary to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeBinaryPath(path) {\n    this.options_.binary = path;\n    return this;\n  }\n\n  /**\n   * Sets whether to leave the started Chrome browser running if the controlling\n   * ChromeDriver service is killed before {@link webdriver.WebDriver#quit()} is\n   * called.\n   * @param {boolean} detach Whether to leave the browser running if the\n   *     chromedriver service is killed before the session.\n   * @return {!Options} A self reference.\n   */\n  detachDriver(detach) {\n    this.options_.detach = detach;\n    return this;\n  }\n\n  /**\n   * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n   * file in Chrome's user data directory for examples.\n   * @param {!Object} prefs Dictionary of user preferences to use.\n   * @return {!Options} A self reference.\n   */\n  setUserPreferences(prefs) {\n    this.options_.prefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {!logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the performance logging preferences. Options include:\n   *\n   * - `enableNetwork`: Whether or not to collect events from Network domain.\n   * - `enablePage`: Whether or not to collect events from Page domain.\n   * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n   *     unless `enableTimeline` is explicitly set to true.\n   * - `tracingCategories`: A comma-separated string of Chrome tracing\n   *     categories for which trace events should be collected. An unspecified\n   *     or empty string disables tracing.\n   * - `bufferUsageReportingInterval`: The requested number of milliseconds\n   *     between DevTools trace buffer usage events. For example, if 1000, then\n   *     once per second, DevTools will report how full the trace buffer is. If\n   *     a report indicates the buffer usage is 100%, a warning will be issued.\n   *\n   * @param {{enableNetwork: boolean,\n   *          enablePage: boolean,\n   *          enableTimeline: boolean,\n   *          tracingCategories: string,\n   *          bufferUsageReportingInterval: number}} prefs The performance\n   *     logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setPerfLoggingPrefs(prefs) {\n    this.options_.perfLoggingPrefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets preferences for the \"Local State\" file in Chrome's user data\n   * directory.\n   * @param {!Object} state Dictionary of local state preferences.\n   * @return {!Options} A self reference.\n   */\n  setLocalState(state) {\n    this.options_.localState = state;\n    return this;\n  }\n\n  /**\n   * Sets the name of the activity hosting a Chrome-based Android WebView. This\n   * option must be set to connect to an [Android WebView](\n   * https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android)\n   *\n   * @param {string} name The activity name.\n   * @return {!Options} A self reference.\n   */\n  androidActivity(name) {\n    this.options_.androidActivity = name;\n    return this;\n  }\n\n  /**\n   * Sets the device serial number to connect to via ADB. If not specified, the\n   * ChromeDriver will select an unused device at random. An error will be\n   * returned if all devices already have active sessions.\n   *\n   * @param {string} serial The device serial number to connect to.\n   * @return {!Options} A self reference.\n   */\n  androidDeviceSerial(serial) {\n    this.options_.androidDeviceSerial = serial;\n    return this;\n  }\n\n  /**\n   * Configures the ChromeDriver to launch Chrome on Android via adb. This\n   * function is shorthand for\n   * {@link #androidPackage options.androidPackage('com.android.chrome')}.\n   * @return {!Options} A self reference.\n   */\n  androidChrome() {\n    return this.androidPackage('com.android.chrome');\n  }\n\n  /**\n   * Sets the package name of the Chrome or WebView app.\n   *\n   * @param {?string} pkg The package to connect to, or `null` to disable Android\n   *     and switch back to using desktop Chrome.\n   * @return {!Options} A self reference.\n   */\n  androidPackage(pkg) {\n    this.options_.androidPackage = pkg;\n    return this;\n  }\n\n  /**\n   * Sets the process name of the Activity hosting the WebView (as given by\n   * `ps`). If not specified, the process name is assumed to be the same as\n   * {@link #androidPackage}.\n   *\n   * @param {string} processName The main activity name.\n   * @return {!Options} A self reference.\n   */\n  androidProcess(processName) {\n    this.options_.androidProcess = processName;\n    return this;\n  }\n\n  /**\n   * Sets whether to connect to an already-running instead of the specified\n   * {@linkplain #androidProcess app} instead of launching the app with a clean\n   * data directory.\n   *\n   * @param {boolean} useRunning Whether to connect to a running instance.\n   * @return {!Options} A self reference.\n   */\n  androidUseRunningApp(useRunning) {\n    this.options_.androidUseRunningApp = useRunning;\n    return this;\n  }\n\n  /**\n   * Sets the path to Chrome's log file. This path should exist on the machine\n   * that will launch Chrome.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeLogFile(path) {\n    this.options_.logPath = path;\n    return this;\n  }\n\n  /**\n   * Sets the directory to store Chrome minidumps in. This option is only\n   * supported when ChromeDriver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setChromeMinidumpPath(path) {\n    this.options_.minidumpPath = path;\n    return this;\n  }\n\n  /**\n   * Configures Chrome to emulate a mobile device. For more information, refer\n   * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n   * options include:\n   *\n   * - `deviceName`: The name of a pre-configured [emulated device][devem]\n   * - `width`: screen width, in pixels\n   * - `height`: screen height, in pixels\n   * - `pixelRatio`: screen pixel ratio\n   *\n   * __Example 1: Using a Pre-configured Device__\n   *\n   *     let options = new chrome.Options().setMobileEmulation(\n   *         {deviceName: 'Google Nexus 5'});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   * __Example 2: Using Custom Screen Configuration__\n   *\n   *     let options = new chrome.Options().setMobileEmulation({\n   *         width: 360,\n   *         height: 640,\n   *         pixelRatio: 3.0\n   *     });\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   *\n   * [em]: https://sites.google.com/a/chromium.org/chromedriver/mobile-emulation\n   * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n   *\n   * @param {?({deviceName: string}|\n   *           {width: number, height: number, pixelRatio: number})} config The\n   *     mobile emulation configuration, or `null` to disable emulation.\n   * @return {!Options} A self reference.\n   */\n  setMobileEmulation(config) {\n    this.options_.mobileEmulation = config;\n    return this;\n  }\n\n  /**\n   * Sets the proxy settings for the new session.\n   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to\n   *    use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link Capabilities} object.\n   * @param {Capabilities=} opt_capabilities The capabilities to merge\n   *     these options into, if any.\n   * @return {!Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    let caps = opt_capabilities || Capabilities.chrome();\n    caps.\n        set(Capability.PROXY, this.proxy_).\n        set(Capability.LOGGING_PREFS, this.logPrefs_).\n        set(OPTIONS_CAPABILITY_KEY, this);\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation not intended for general use.\n   * @return {!Object} The JSON wire protocol representation of this instance.\n   */\n  [Symbols.serialize]() {\n    let json = {};\n    for (let key in this.options_) {\n      if (this.options_[key] != null) {\n        json[key] = this.options_[key];\n      }\n    }\n    if (this.extensions_.length) {\n      json.extensions = this.extensions_.map(function(extension) {\n        if (Buffer.isBuffer(extension)) {\n          return extension.toString('base64');\n        }\n        return io.read(/** @type {string} */(extension))\n            .then(buffer => buffer.toString('base64'));\n      });\n    }\n    return json;\n  }\n}\n\n\n/**\n * Creates a new WebDriver client for Chrome.\n */\nclass Driver extends webdriver.WebDriver {\n\n  /**\n   * Creates a new session with the ChromeDriver.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use, or `null`\n   *     to use the currently active flow.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor, opt_flow) {\n    let executor;\n    if (opt_serviceExecutor instanceof http.Executor) {\n      executor = opt_serviceExecutor;\n      configureExecutor(executor);\n    } else {\n      let service = opt_serviceExecutor || getDefaultService();\n      executor = createExecutor(service.start());\n    }\n\n    let caps =\n        opt_config instanceof Options ? opt_config.toCapabilities() :\n        (opt_config || Capabilities.chrome());\n\n    return /** @type {!Driver} */(\n        super.createSession(executor, caps, opt_flow));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Schedules a command to launch Chrome App with given ID.\n   * @param {string} id ID of the App to launch.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when app is launched.\n   */\n  launchApp(id) {\n    return this.schedule(\n        new command.Command(Command.LAUNCH_APP).setParameter('id', id),\n        'Driver.launchApp()');\n  }\n\n  /**\n   * Schedules a command to get Chrome network emulation settings.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     when network emulation settings are retrievied.\n   */\n  getNetworkConditions() {\n    return this.schedule(\n        new command.Command(Command.GET_NETWORK_CONDITIONS),\n        'Driver.getNetworkConditions()');\n  }\n\n  /**\n   * Schedules a command to set Chrome network emulation settings.\n   *\n   * __Sample Usage:__\n   *\n   *  driver.setNetworkConditions({\n   *    offline: false,\n   *    latency: 5, // Additional latency (ms).\n   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n   * });\n   *\n   * @param {Object} spec Defines the network conditions to set\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when network emulation settings are set.\n   */\n  setNetworkConditions(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('setNetworkConditions called with non-network-conditions parameter');\n    }\n\n    return this.schedule(\n        new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec),\n        'Driver.setNetworkConditions(' + JSON.stringify(spec) + ')');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;\n"]},"metadata":{},"sourceType":"script"}