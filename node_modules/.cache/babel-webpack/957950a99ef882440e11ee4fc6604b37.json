{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @fileoverview Utilities for working with Firefox extensions. */\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar fs = require('fs'),\n    path = require('path'),\n    xml = require('xml2js');\n\nvar io = require('../io');\n\nvar zip = require('../io/zip');\n/**\n * Thrown when there an add-on is malformed.\n */\n\n\nvar AddonFormatError = /*#__PURE__*/function (_Error) {\n  _inherits(AddonFormatError, _Error);\n\n  var _super = _createSuper(AddonFormatError);\n\n  /** @param {string} msg The error message. */\n  function AddonFormatError(msg) {\n    var _this;\n\n    _classCallCheck(this, AddonFormatError);\n\n    _this = _super.call(this, msg);\n    /** @override */\n\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return AddonFormatError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the extension to install, as either a xpi\n *     file or a directory.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\n\n\nfunction install(extension, dir) {\n  return getDetails(extension).then(function (details) {\n    var dst = path.join(dir, details.id);\n\n    if (extension.slice(-4) === '.xpi') {\n      if (!details.unpack) {\n        return io.copy(extension, dst + '.xpi').then(function () {\n          return details.id;\n        });\n      } else {\n        return zip.unzip(extension, dst).then(function () {\n          return details.id;\n        });\n      }\n    } else {\n      return io.copyDir(extension, dst).then(function () {\n        return details.id;\n      });\n    }\n  });\n}\n/**\n * Describes a Firefox add-on.\n * @typedef {{id: string, name: string, version: string, unpack: boolean}}\n */\n\n\nvar AddonDetails;\n/** @typedef {{$: !Object<string, string>}} */\n\nvar RdfRoot;\n/**\n * Extracts the details needed to install an add-on.\n * @param {string} addonPath Path to the extension directory.\n * @return {!Promise<!AddonDetails>} A promise for the add-on details.\n */\n\nfunction getDetails(addonPath) {\n  return io.stat(addonPath).then(function (stats) {\n    if (stats.isDirectory()) {\n      return parseDirectory(addonPath);\n    } else if (addonPath.slice(-4) === '.xpi') {\n      return parseXpiFile(addonPath);\n    } else {\n      throw Error('Add-on path is not an xpi or a directory: ' + addonPath);\n    }\n  });\n  /**\n   * Parse an install.rdf for a Firefox add-on.\n   * @param {string} rdf The contents of install.rdf for the add-on.\n   * @return {!Promise<!AddonDetails>} A promise for the add-on details.\n   */\n\n  function parseInstallRdf(rdf) {\n    return parseXml(rdf).then(function (doc) {\n      var em = getNamespaceId(doc, 'http://www.mozilla.org/2004/em-rdf#');\n      var rdf = getNamespaceId(doc, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');\n      var description = doc[rdf + 'RDF'][rdf + 'Description'][0];\n      var details = {\n        id: getNodeText(description, em + 'id'),\n        name: getNodeText(description, em + 'name'),\n        version: getNodeText(description, em + 'version'),\n        unpack: getNodeText(description, em + 'unpack') || false\n      };\n\n      if (typeof details.unpack === 'string') {\n        details.unpack = details.unpack.toLowerCase() === 'true';\n      }\n\n      if (!details.id) {\n        throw new AddonFormatError('Could not find add-on ID for ' + addonPath);\n      }\n\n      return details;\n    });\n\n    function parseXml(text) {\n      return new Promise(function (resolve, reject) {\n        xml.parseString(text, function (err, data) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      });\n    }\n\n    function getNodeText(node, name) {\n      return node[name] && node[name][0] || '';\n    }\n\n    function getNamespaceId(doc, url) {\n      var keys = Object.keys(doc);\n\n      if (keys.length !== 1) {\n        throw new AddonFormatError('Malformed manifest for add-on ' + addonPath);\n      }\n\n      var namespaces =\n      /** @type {!RdfRoot} */\n      doc[keys[0]].$;\n      var id = '';\n      Object.keys(namespaces).some(function (ns) {\n        if (namespaces[ns] !== url) {\n          return false;\n        }\n\n        if (ns.indexOf(':') != -1) {\n          id = ns.split(':')[1] + ':';\n        }\n\n        return true;\n      });\n      return id;\n    }\n  }\n  /**\n   * Parse a manifest for a Firefox WebExtension.\n   * @param {{\n   *   name: string,\n   *   version: string,\n   *   applications: {gecko:{id:string}}\n   * }} json JSON representation of the manifest.\n   * @return {!AddonDetails} The add-on details.\n   */\n\n\n  function parseManifestJson(_ref) {\n    var name = _ref.name,\n        version = _ref.version,\n        applications = _ref.applications;\n\n    if (!(applications && applications.gecko && applications.gecko.id)) {\n      throw new AddonFormatError('Could not find add-on ID for ' + addonPath);\n    }\n\n    return {\n      id: applications.gecko.id,\n      name: name,\n      version: version,\n      unpack: false\n    };\n  }\n\n  function parseXpiFile(filePath) {\n    return zip.load(filePath).then(function (archive) {\n      if (archive.has('install.rdf')) {\n        return archive.getFile('install.rdf').then(function (buf) {\n          return parseInstallRdf(buf.toString('utf8'));\n        });\n      }\n\n      if (archive.has('manifest.json')) {\n        return archive.getFile('manifest.json').then(function (buf) {\n          return JSON.parse(buf.toString('utf8'));\n        }).then(parseManifestJson);\n      }\n\n      throw new AddonFormatError(\"Couldn't find install.rdf or manifest.json in \".concat(filePath));\n    });\n  }\n\n  function parseDirectory(dirPath) {\n    var rdfPath = path.join(dirPath, 'install.rdf');\n    var jsonPath = path.join(dirPath, 'manifest.json');\n    return io.exists(rdfPath).then(function (rdfExists) {\n      if (rdfExists) {\n        return io.read(rdfPath).then(function (buf) {\n          return parseInstallRdf(buf.toString('utf8'));\n        });\n      }\n\n      return io.exists(jsonPath).then(function (jsonExists) {\n        if (jsonExists) {\n          return io.read(jsonPath).then(function (buf) {\n            return JSON.parse(buf.toString('utf8'));\n          }).then(parseManifestJson);\n        }\n\n        throw new AddonFormatError(\"Couldn't find install.rdf or manifest.json in \".concat(dirPath));\n      });\n    });\n  }\n} // PUBLIC API\n\n\nexports.install = install;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/firefox/extension.js"],"names":["fs","require","path","xml","io","zip","AddonFormatError","msg","name","constructor","Error","install","extension","dir","getDetails","then","details","dst","join","id","slice","unpack","copy","unzip","copyDir","AddonDetails","RdfRoot","addonPath","stat","stats","isDirectory","parseDirectory","parseXpiFile","parseInstallRdf","rdf","parseXml","doc","em","getNamespaceId","description","getNodeText","version","toLowerCase","text","Promise","resolve","reject","parseString","err","data","node","url","keys","Object","length","namespaces","$","some","ns","indexOf","split","parseManifestJson","applications","gecko","filePath","load","archive","has","getFile","buf","toString","JSON","parse","dirPath","rdfPath","jsonPath","exists","rdfExists","read","jsonExists","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @fileoverview Utilities for working with Firefox extensions. */\n\n'use strict';\n\nconst fs = require('fs'),\n    path = require('path'),\n    xml = require('xml2js');\n\nconst io = require('../io');\nconst zip = require('../io/zip');\n\n\n/**\n * Thrown when there an add-on is malformed.\n */\nclass AddonFormatError extends Error {\n  /** @param {string} msg The error message. */\n  constructor(msg) {\n    super(msg);\n    /** @override */\n    this.name = this.constructor.name;\n  }\n}\n\n\n\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the extension to install, as either a xpi\n *     file or a directory.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\nfunction install(extension, dir) {\n  return getDetails(extension).then(function(details) {\n    var dst = path.join(dir, details.id);\n    if (extension.slice(-4) === '.xpi') {\n      if (!details.unpack) {\n        return io.copy(extension, dst + '.xpi').then(() => details.id);\n      } else {\n        return zip.unzip(extension, dst).then(() => details.id);\n      }\n    } else {\n      return io.copyDir(extension, dst).then(() => details.id);\n    }\n  });\n}\n\n\n/**\n * Describes a Firefox add-on.\n * @typedef {{id: string, name: string, version: string, unpack: boolean}}\n */\nvar AddonDetails;\n\n/** @typedef {{$: !Object<string, string>}} */\nvar RdfRoot;\n\n\n/**\n * Extracts the details needed to install an add-on.\n * @param {string} addonPath Path to the extension directory.\n * @return {!Promise<!AddonDetails>} A promise for the add-on details.\n */\nfunction getDetails(addonPath) {\n  return io.stat(addonPath).then((stats) => {\n    if (stats.isDirectory()) {\n      return parseDirectory(addonPath);\n    } else if (addonPath.slice(-4) === '.xpi') {\n      return parseXpiFile(addonPath);\n    } else {\n      throw Error('Add-on path is not an xpi or a directory: ' + addonPath);\n    }\n  });\n\n  /**\n   * Parse an install.rdf for a Firefox add-on.\n   * @param {string} rdf The contents of install.rdf for the add-on.\n   * @return {!Promise<!AddonDetails>} A promise for the add-on details.\n   */\n  function parseInstallRdf(rdf) {\n    return parseXml(rdf).then(function(doc) {\n      var em = getNamespaceId(doc, 'http://www.mozilla.org/2004/em-rdf#');\n      var rdf = getNamespaceId(\n          doc, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');\n\n      var description = doc[rdf + 'RDF'][rdf + 'Description'][0];\n      var details = {\n        id: getNodeText(description, em + 'id'),\n        name: getNodeText(description, em + 'name'),\n        version: getNodeText(description, em + 'version'),\n        unpack: getNodeText(description, em + 'unpack') || false\n      };\n\n      if (typeof details.unpack === 'string') {\n        details.unpack = details.unpack.toLowerCase() === 'true';\n      }\n\n      if (!details.id) {\n        throw new AddonFormatError('Could not find add-on ID for ' + addonPath);\n      }\n\n      return details;\n    });\n\n    function parseXml(text) {\n      return new Promise((resolve, reject) => {\n        xml.parseString(text, (err, data) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      });\n    }\n\n    function getNodeText(node, name) {\n      return node[name] && node[name][0] || '';\n    }\n\n    function getNamespaceId(doc, url) {\n      var keys = Object.keys(doc);\n      if (keys.length !== 1) {\n        throw new AddonFormatError('Malformed manifest for add-on ' + addonPath);\n      }\n\n      var namespaces = /** @type {!RdfRoot} */(doc[keys[0]]).$;\n      var id = '';\n      Object.keys(namespaces).some(function(ns) {\n        if (namespaces[ns] !== url) {\n          return false;\n        }\n\n        if (ns.indexOf(':') != -1) {\n          id = ns.split(':')[1] + ':';\n        }\n        return true;\n      });\n      return id;\n    }\n  }\n\n  /**\n   * Parse a manifest for a Firefox WebExtension.\n   * @param {{\n   *   name: string,\n   *   version: string,\n   *   applications: {gecko:{id:string}}\n   * }} json JSON representation of the manifest.\n   * @return {!AddonDetails} The add-on details.\n   */\n  function parseManifestJson({name, version, applications}) {\n    if (!(applications && applications.gecko && applications.gecko.id)) {\n      throw new AddonFormatError('Could not find add-on ID for ' + addonPath);\n    }\n\n    return {id: applications.gecko.id, name, version, unpack: false};\n  }\n\n  function parseXpiFile(filePath) {\n    return zip.load(filePath).then(archive => {\n      if (archive.has('install.rdf')) {\n        return archive.getFile('install.rdf')\n            .then(buf => parseInstallRdf(buf.toString('utf8')));\n      }\n\n      if (archive.has('manifest.json')) {\n        return archive.getFile('manifest.json')\n            .then(buf => JSON.parse(buf.toString('utf8')))\n            .then(parseManifestJson);\n      }\n\n      throw new AddonFormatError(\n          `Couldn't find install.rdf or manifest.json in ${filePath}`);\n    });\n  }\n\n  function parseDirectory(dirPath) {\n    const rdfPath = path.join(dirPath, 'install.rdf');\n    const jsonPath = path.join(dirPath, 'manifest.json');\n    return io.exists(rdfPath)\n        .then(rdfExists => {\n          if (rdfExists) {\n            return io.read(rdfPath)\n                .then(buf => parseInstallRdf(buf.toString('utf8')));\n          }\n          return io.exists(jsonPath)\n              .then(jsonExists => {\n                if (jsonExists) {\n                  return io.read(jsonPath)\n                      .then(buf => JSON.parse(buf.toString('utf8')))\n                      .then(parseManifestJson);\n                }\n                throw new AddonFormatError(\n                    `Couldn't find install.rdf or manifest.json in ${dirPath}`);\n              });\n        })\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.install = install;\n"]},"metadata":{},"sourceType":"script"}