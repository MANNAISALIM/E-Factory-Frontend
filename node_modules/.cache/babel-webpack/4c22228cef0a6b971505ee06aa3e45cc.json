{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n'use strict';\n\nvar _construct = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/construct\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar chrome = require('./chrome');\n\nvar edge = require('./edge');\n\nvar firefox = require('./firefox');\n\nvar _http = require('./http');\n\nvar ie = require('./ie');\n\nvar actions = require('./lib/actions');\n\nvar by = require('./lib/by');\n\nvar capabilities = require('./lib/capabilities');\n\nvar command = require('./lib/command');\n\nvar error = require('./lib/error');\n\nvar events = require('./lib/events');\n\nvar input = require('./lib/input');\n\nvar logging = require('./lib/logging');\n\nvar promise = require('./lib/promise');\n\nvar session = require('./lib/session');\n\nvar until = require('./lib/until');\n\nvar webdriver = require('./lib/webdriver');\n\nvar opera = require('./opera');\n\nvar phantomjs = require('./phantomjs');\n\nvar remote = require('./remote');\n\nvar safari = require('./safari');\n\nvar Browser = capabilities.Browser;\nvar Capabilities = capabilities.Capabilities;\nvar Capability = capabilities.Capability;\nvar Session = session.Session;\nvar WebDriver = webdriver.WebDriver;\nvar seleniumServer;\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\n\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar);\n  }\n\n  return seleniumServer.start();\n}\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\n\n\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  var mixin = /*#__PURE__*/function (_ctor) {\n    _inherits(mixin, _ctor);\n\n    var _super = _createSuper(mixin);\n\n    function mixin() {\n      _classCallCheck(this, mixin);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(mixin, [{\n      key: \"setFileDetector\",\n\n      /** @param {input.FileDetector} detector */\n      value: function setFileDetector(detector) {\n        webdriver.WebDriver.prototype.setFileDetector.call(this, detector);\n      }\n    }]);\n\n    return mixin;\n  }(ctor);\n\n  return mixin;\n}\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {promise.CancellableThenable<!webdriver.IWebDriver>}\n * @interface\n */\n\n\nvar ThenableWebDriver = /*#__PURE__*/function () {\n  function ThenableWebDriver() {\n    _classCallCheck(this, ThenableWebDriver);\n  }\n\n  _createClass(ThenableWebDriver, null, [{\n    key: \"createSession\",\n\n    /** @param {...?} args */\n    value: function createSession() {}\n  }]);\n\n  return ThenableWebDriver;\n}();\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\n\n\nvar THENABLE_DRIVERS = new Map();\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\n\nfunction createDriver(ctor) {\n  var _thenableWebDriverPro;\n\n  var thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);\n\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = /*#__PURE__*/function (_ctor2) {\n      _inherits(thenableWebDriverProxy, _ctor2);\n\n      var _super2 = _createSuper(thenableWebDriverProxy);\n\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      function thenableWebDriverProxy(session) {\n        var _this;\n\n        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          rest[_key2 - 1] = arguments[_key2];\n        }\n\n        _classCallCheck(this, thenableWebDriverProxy);\n\n        _this = _super2.call.apply(_super2, [this, session].concat(rest));\n\n        var pd = _this.getSession().then(function (session) {\n          return _construct(ctor, [session].concat(rest));\n        });\n        /**\n         * @param {(string|Error)=} opt_reason\n         * @override\n         */\n\n\n        _this.cancel = function (opt_reason) {\n          if (promise.CancellableThenable.isImplementation(pd)) {\n            /** @type {!promise.CancellableThenable} */\n            pd.cancel(opt_reason);\n          }\n        };\n        /** @override */\n\n\n        _this.then = pd.then.bind(pd);\n        /** @override */\n\n        _this.catch = pd.then.bind(pd);\n        return _this;\n      }\n\n      return thenableWebDriverProxy;\n    }(ctor);\n\n    promise.CancellableThenable.addImplementation(thenableWebDriverProxy);\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);\n  }\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return (_thenableWebDriverPro = thenableWebDriverProxy).createSession.apply(_thenableWebDriverPro, args);\n}\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\n\n\nvar Builder = /*#__PURE__*/function () {\n  function Builder() {\n    _classCallCheck(this, Builder);\n\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder');\n    /** @private {promise.ControlFlow} */\n\n    this.flow_ = null;\n    /** @private {string} */\n\n    this.url_ = '';\n    /** @private {?string} */\n\n    this.proxy_ = null;\n    /** @private {!Capabilities} */\n\n    this.capabilities_ = new Capabilities();\n    /** @private {chrome.Options} */\n\n    this.chromeOptions_ = null;\n    /** @private {firefox.Options} */\n\n    this.firefoxOptions_ = null;\n    /** @private {opera.Options} */\n\n    this.operaOptions_ = null;\n    /** @private {ie.Options} */\n\n    this.ieOptions_ = null;\n    /** @private {safari.Options} */\n\n    this.safariOptions_ = null;\n    /** @private {edge.Options} */\n\n    this.edgeOptions_ = null;\n    /** @private {boolean} */\n\n    this.ignoreEnv_ = false;\n    /** @private {http.Agent} */\n\n    this.agent_ = null;\n  }\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n\n\n  _createClass(Builder, [{\n    key: \"disableEnvironmentOverrides\",\n    value: function disableEnvironmentOverrides() {\n      this.ignoreEnv_ = true;\n      return this;\n    }\n    /**\n     * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n     * been specified, the builder direct all new clients to that server. If this\n     * method is never called, the Builder will attempt to create all clients\n     * locally.\n     *\n     * As an alternative to this method, you may also set the\n     * `SELENIUM_REMOTE_URL` environment variable.\n     *\n     * @param {string} url The URL of a remote server to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"usingServer\",\n    value: function usingServer(url) {\n      this.url_ = url;\n      return this;\n    }\n    /**\n     * @return {string} The URL of the WebDriver server this instance is\n     *     configured to use.\n     */\n\n  }, {\n    key: \"getServerUrl\",\n    value: function getServerUrl() {\n      return this.url_;\n    }\n    /**\n     * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n     * If this method is never called, the Builder will create a connection\n     * without a proxy.\n     *\n     * @param {string} proxy The URL of a proxy to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"usingWebDriverProxy\",\n    value: function usingWebDriverProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n    /**\n     * @return {?string} The URL of the proxy server to use for the WebDriver's\n     *    HTTP connections, or `null` if not set.\n     */\n\n  }, {\n    key: \"getWebDriverProxy\",\n    value: function getWebDriverProxy() {\n      return this.proxy_;\n    }\n    /**\n     * Sets the http agent to use for each request.\n     * If this method is not called, the Builder will use http.globalAgent by default.\n     *\n     * @param {http.Agent} agent The agent to use for each request.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"usingHttpAgent\",\n    value: function usingHttpAgent(agent) {\n      this.agent_ = agent;\n      return this;\n    }\n    /**\n     * @return {http.Agent} The http agent used for each request\n     */\n\n  }, {\n    key: \"getHttpAgent\",\n    value: function getHttpAgent() {\n      return this.agent_;\n    }\n    /**\n     * Sets the desired capabilities when requesting a new session. This will\n     * overwrite any previously set capabilities.\n     * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n     *     a new session.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"withCapabilities\",\n    value: function withCapabilities(capabilities) {\n      this.capabilities_ = new Capabilities(capabilities);\n      return this;\n    }\n    /**\n     * Returns the base set of capabilities this instance is currently configured\n     * to use.\n     * @return {!Capabilities} The current capabilities for this builder.\n     */\n\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      return this.capabilities_;\n    }\n    /**\n     * Configures the target browser for clients created by this instance.\n     * Any calls to {@link #withCapabilities} after this function will\n     * overwrite these settings.\n     *\n     * You may also define the target browser using the {@code SELENIUM_BROWSER}\n     * environment variable. If set, this environment variable should be of the\n     * form `browser[:[version][:platform]]`.\n     *\n     * @param {(string|Browser)} name The name of the target browser;\n     *     common defaults are available on the {@link webdriver.Browser} enum.\n     * @param {string=} opt_version A desired version; may be omitted if any\n     *     version should be used.\n     * @param {string=} opt_platform The desired platform; may be omitted if any\n     *     version may be used.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"forBrowser\",\n    value: function forBrowser(name, opt_version, opt_platform) {\n      this.capabilities_.set(Capability.BROWSER_NAME, name);\n      this.capabilities_.set(Capability.VERSION, opt_version || null);\n      this.capabilities_.set(Capability.PLATFORM, opt_platform || null);\n      return this;\n    }\n    /**\n     * Sets the proxy configuration for the target browser.\n     * Any calls to {@link #withCapabilities} after this function will\n     * overwrite these settings.\n     *\n     * @param {!capabilities.ProxyConfig} config The configuration to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(config) {\n      this.capabilities_.setProxy(config);\n      return this;\n    }\n    /**\n     * Sets the logging preferences for the created session. Preferences may be\n     * changed by repeated calls, or by calling {@link #withCapabilities}.\n     * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n     *     desired logging preferences.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setLoggingPrefs\",\n    value: function setLoggingPrefs(prefs) {\n      this.capabilities_.setLoggingPrefs(prefs);\n      return this;\n    }\n    /**\n     * Sets whether native events should be used.\n     * @param {boolean} enabled Whether to enable native events.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setEnableNativeEvents\",\n    value: function setEnableNativeEvents(enabled) {\n      this.capabilities_.setEnableNativeEvents(enabled);\n      return this;\n    }\n    /**\n     * Sets how elements should be scrolled into view for interaction.\n     * @param {number} behavior The desired scroll behavior: either 0 to align\n     *     with the top of the viewport or 1 to align with the bottom.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setScrollBehavior\",\n    value: function setScrollBehavior(behavior) {\n      this.capabilities_.setScrollBehavior(behavior);\n      return this;\n    }\n    /**\n     * Sets the default action to take with an unexpected alert before returning\n     * an error.\n     * @param {string} behavior The desired behavior; should be \"accept\",\n     *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setAlertBehavior\",\n    value: function setAlertBehavior(behavior) {\n      this.capabilities_.setAlertBehavior(behavior);\n      return this;\n    }\n    /**\n     * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n     * created by this builder. Any logging or proxy settings defined on the given\n     * options will take precedence over those set through\n     * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n     *\n     * @param {!chrome.Options} options The ChromeDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setChromeOptions\",\n    value: function setChromeOptions(options) {\n      this.chromeOptions_ = options;\n      return this;\n    }\n    /**\n     * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n     * created by this builder. Any logging or proxy settings defined on the given\n     * options will take precedence over those set through\n     * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n     *\n     * @param {!firefox.Options} options The FirefoxDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setFirefoxOptions\",\n    value: function setFirefoxOptions(options) {\n      this.firefoxOptions_ = options;\n      return this;\n    }\n    /**\n     * @return {firefox.Options} the Firefox specific options currently configured\n     *     for this instance.\n     */\n\n  }, {\n    key: \"getFirefoxOptions\",\n    value: function getFirefoxOptions() {\n      return this.firefoxOptions_;\n    }\n    /**\n     * Sets Opera specific {@linkplain opera.Options options} for drivers created\n     * by this builder. Any logging or proxy settings defined on the given options\n     * will take precedence over those set through {@link #setLoggingPrefs} and\n     * {@link #setProxy}, respectively.\n     *\n     * @param {!opera.Options} options The OperaDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setOperaOptions\",\n    value: function setOperaOptions(options) {\n      this.operaOptions_ = options;\n      return this;\n    }\n    /**\n     * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n     * created by this builder. Any proxy settings defined on the given options\n     * will take precedence over those set through {@link #setProxy}.\n     *\n     * @param {!ie.Options} options The IEDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setIeOptions\",\n    value: function setIeOptions(options) {\n      this.ieOptions_ = options;\n      return this;\n    }\n    /**\n     * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n     * for drivers created by this builder. Any proxy settings defined on the\n     * given options will take precedence over those set through\n     * {@link #setProxy}.\n     *\n     * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setEdgeOptions\",\n    value: function setEdgeOptions(options) {\n      this.edgeOptions_ = options;\n      return this;\n    }\n    /**\n     * Sets Safari specific {@linkplain safari.Options options} for drivers\n     * created by this builder. Any logging settings defined on the given options\n     * will take precedence over those set through {@link #setLoggingPrefs}.\n     *\n     * @param {!safari.Options} options The Safari options to use.\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setSafariOptions\",\n    value: function setSafariOptions(options) {\n      this.safariOptions_ = options;\n      return this;\n    }\n    /**\n     * @return {safari.Options} the Safari specific options currently configured\n     *     for this instance.\n     */\n\n  }, {\n    key: \"getSafariOptions\",\n    value: function getSafariOptions() {\n      return this.safariOptions_;\n    }\n    /**\n     * Sets the control flow that created drivers should execute actions in. If\n     * the flow is never set, or is set to {@code null}, it will use the active\n     * flow at the time {@link #build()} is called.\n     * @param {promise.ControlFlow} flow The control flow to use, or\n     *     {@code null} to\n     * @return {!Builder} A self reference.\n     */\n\n  }, {\n    key: \"setControlFlow\",\n    value: function setControlFlow(flow) {\n      this.flow_ = flow;\n      return this;\n    }\n    /**\n     * Creates a new WebDriver client based on this builder's current\n     * configuration.\n     *\n     * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n     * users to issue commands directly without calling `then()`. The returned\n     * thenable wraps a promise that will resolve to a concrete\n     * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n     * rejected if the remote end fails to create a new session.\n     *\n     * @return {!ThenableWebDriver} A new WebDriver instance.\n     * @throws {Error} If the current configuration is invalid.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n\n      // Create a copy for any changes we may need to make based on the current\n      // environment.\n      var capabilities = new Capabilities(this.capabilities_);\n      var browser;\n\n      if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n        this.log_.fine(\"SELENIUM_BROWSER=\".concat(process.env.SELENIUM_BROWSER));\n        browser = process.env.SELENIUM_BROWSER.split(/:/, 3);\n        capabilities.set(Capability.BROWSER_NAME, browser[0]);\n        capabilities.set(Capability.VERSION, browser[1] || null);\n        capabilities.set(Capability.PLATFORM, browser[2] || null);\n      }\n\n      browser = capabilities.get(Capability.BROWSER_NAME);\n\n      if (typeof browser !== 'string') {\n        throw TypeError(\"Target browser must be a string, but is <\".concat(typeof browser, \">;\") + ' did you forget to call forBrowser()?');\n      }\n\n      if (browser === 'ie') {\n        browser = Browser.INTERNET_EXPLORER;\n      } // Apply browser specific overrides.\n\n\n      if (browser === Browser.CHROME && this.chromeOptions_) {\n        capabilities.merge(this.chromeOptions_.toCapabilities());\n      } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n        capabilities.merge(this.firefoxOptions_.toCapabilities());\n      } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n        capabilities.merge(this.ieOptions_.toCapabilities());\n      } else if (browser === Browser.OPERA && this.operaOptions_) {\n        capabilities.merge(this.operaOptions_.toCapabilities());\n      } else if (browser === Browser.SAFARI && this.safariOptions_) {\n        capabilities.merge(this.safariOptions_.toCapabilities());\n      } else if (browser === Browser.EDGE && this.edgeOptions_) {\n        capabilities.merge(this.edgeOptions_.toCapabilities());\n      } // Check for a remote browser.\n\n\n      var url = this.url_;\n\n      if (!this.ignoreEnv_) {\n        if (process.env.SELENIUM_REMOTE_URL) {\n          this.log_.fine(\"SELENIUM_REMOTE_URL=\".concat(process.env.SELENIUM_REMOTE_URL));\n          url = process.env.SELENIUM_REMOTE_URL;\n        } else if (process.env.SELENIUM_SERVER_JAR) {\n          this.log_.fine(\"SELENIUM_SERVER_JAR=\".concat(process.env.SELENIUM_SERVER_JAR));\n          url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);\n        }\n      }\n\n      if (url) {\n        this.log_.fine('Creating session on remote server');\n        var client = Promise.resolve(url).then(function (url) {\n          return new _http.HttpClient(url, _this2.agent_, _this2.proxy_);\n        });\n        var executor = new _http.Executor(client);\n\n        if (browser === Browser.CHROME) {\n          var driver = ensureFileDetectorsAreEnabled(chrome.Driver);\n          return createDriver(driver, capabilities, executor, this.flow_);\n        }\n\n        if (browser === Browser.FIREFOX) {\n          var _driver = ensureFileDetectorsAreEnabled(firefox.Driver);\n\n          return createDriver(_driver, capabilities, executor, this.flow_);\n        }\n\n        return createDriver(WebDriver, executor, capabilities, this.flow_);\n      } // Check for a native browser.\n\n\n      switch (browser) {\n        case Browser.CHROME:\n          return createDriver(chrome.Driver, capabilities, null, this.flow_);\n\n        case Browser.FIREFOX:\n          return createDriver(firefox.Driver, capabilities, null, this.flow_);\n\n        case Browser.INTERNET_EXPLORER:\n          return createDriver(ie.Driver, capabilities, this.flow_);\n\n        case Browser.EDGE:\n          return createDriver(edge.Driver, capabilities, null, this.flow_);\n\n        case Browser.OPERA:\n          return createDriver(opera.Driver, capabilities, null, this.flow_);\n\n        case Browser.PHANTOM_JS:\n          return createDriver(phantomjs.Driver, capabilities, this.flow_);\n\n        case Browser.SAFARI:\n          return createDriver(safari.Driver, capabilities, this.flow_);\n\n        default:\n          throw new Error('Do not know how to build driver: ' + browser + '; did you forget to call usingServer(url)?');\n      }\n    }\n  }]);\n\n  return Builder;\n}(); // PUBLIC API\n\n\nexports.ActionSequence = actions.ActionSequence;\nexports.Browser = capabilities.Browser;\nexports.Builder = Builder;\nexports.Button = input.Button;\nexports.By = by.By;\nexports.Capabilities = capabilities.Capabilities;\nexports.Capability = capabilities.Capability;\nexports.Condition = webdriver.Condition;\nexports.EventEmitter = events.EventEmitter;\nexports.FileDetector = input.FileDetector;\nexports.Key = input.Key;\nexports.Session = session.Session;\nexports.ThenableWebDriver = ThenableWebDriver;\nexports.TouchSequence = actions.TouchSequence;\nexports.WebDriver = webdriver.WebDriver;\nexports.WebElement = webdriver.WebElement;\nexports.WebElementCondition = webdriver.WebElementCondition;\nexports.WebElementPromise = webdriver.WebElementPromise;\nexports.error = error;\nexports.logging = logging;\nexports.promise = promise;\nexports.until = until;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/index.js"],"names":["chrome","require","edge","firefox","_http","ie","actions","by","capabilities","command","error","events","input","logging","promise","session","until","webdriver","opera","phantomjs","remote","safari","Browser","Capabilities","Capability","Session","WebDriver","seleniumServer","startSeleniumServer","jar","SeleniumServer","start","ensureFileDetectorsAreEnabled","ctor","mixin","detector","prototype","setFileDetector","call","ThenableWebDriver","THENABLE_DRIVERS","Map","createDriver","thenableWebDriverProxy","get","rest","pd","getSession","then","cancel","opt_reason","CancellableThenable","isImplementation","bind","catch","addImplementation","set","args","createSession","Builder","log_","getLogger","flow_","url_","proxy_","capabilities_","chromeOptions_","firefoxOptions_","operaOptions_","ieOptions_","safariOptions_","edgeOptions_","ignoreEnv_","agent_","url","proxy","agent","name","opt_version","opt_platform","BROWSER_NAME","VERSION","PLATFORM","config","setProxy","prefs","setLoggingPrefs","enabled","setEnableNativeEvents","behavior","setScrollBehavior","setAlertBehavior","options","flow","browser","process","env","SELENIUM_BROWSER","fine","split","TypeError","INTERNET_EXPLORER","CHROME","merge","toCapabilities","FIREFOX","OPERA","SAFARI","EDGE","SELENIUM_REMOTE_URL","SELENIUM_SERVER_JAR","client","Promise","resolve","HttpClient","executor","Executor","driver","Driver","PHANTOM_JS","Error","exports","ActionSequence","Button","By","Condition","EventEmitter","FileDetector","Key","TouchSequence","WebElement","WebElementCondition","WebElementPromise"],"mappings":"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U,CAACyD,OAAlC,EAA2CH,WAAW,IAAI,IAA1D;AACA,WAAKb,aAAL,CAAmBT,GAAnB,CAAuBhC,UAAU,CAAC0D,QAAlC,EAA4CH,YAAY,IAAI,IAA5D;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BACWI,M,EAAQ;AACf,WAAKlB,aAAL,CAAmBmB,QAAnB,CAA4BD,MAA5B;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;oCACkBE,K,EAAO;AACrB,WAAKpB,aAAL,CAAmBqB,eAAnB,CAAmCD,KAAnC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;0CACwBE,O,EAAS;AAC7B,WAAKtB,aAAL,CAAmBuB,qBAAnB,CAAyCD,OAAzC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;sCACoBE,Q,EAAU;AAC1B,WAAKxB,aAAL,CAAmByB,iBAAnB,CAAqCD,QAArC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;qCACmBA,Q,EAAU;AACzB,WAAKxB,aAAL,CAAmB0B,gBAAnB,CAAoCF,QAApC;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;qCACmBG,O,EAAS;AACxB,WAAK1B,cAAL,GAAsB0B,OAAtB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCACoBA,O,EAAS;AACzB,WAAKzB,eAAL,GAAuByB,OAAvB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;;wCACsB;AAClB,aAAO,KAAKzB,eAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACkByB,O,EAAS;AACvB,WAAKxB,aAAL,GAAqBwB,OAArB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCACeA,O,EAAS;AACpB,WAAKvB,UAAL,GAAk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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict';\n\nconst chrome = require('./chrome');\nconst edge = require('./edge');\nconst firefox = require('./firefox');\nconst _http = require('./http');\nconst ie = require('./ie');\nconst actions = require('./lib/actions');\nconst by = require('./lib/by');\nconst capabilities = require('./lib/capabilities');\nconst command = require('./lib/command');\nconst error = require('./lib/error');\nconst events = require('./lib/events');\nconst input = require('./lib/input');\nconst logging = require('./lib/logging');\nconst promise = require('./lib/promise');\nconst session = require('./lib/session');\nconst until = require('./lib/until');\nconst webdriver = require('./lib/webdriver');\nconst opera = require('./opera');\nconst phantomjs = require('./phantomjs');\nconst remote = require('./remote');\nconst safari = require('./safari');\n\nconst Browser = capabilities.Browser;\nconst Capabilities = capabilities.Capabilities;\nconst Capability = capabilities.Capability;\nconst Session = session.Session;\nconst WebDriver = webdriver.WebDriver;\n\n\n\nvar seleniumServer;\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar);\n  }\n  return seleniumServer.start();\n}\n\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  const mixin = class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector);\n    }\n  };\n  return mixin;\n}\n\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {promise.CancellableThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession(...args) {}\n}\n\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map;\n\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor, ...args) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session, ...rest) {\n        super(session, ...rest);\n\n        const pd = this.getSession().then(session => {\n          return new ctor(session, ...rest);\n        });\n\n        /**\n         * @param {(string|Error)=} opt_reason\n         * @override\n         */\n        this.cancel = function(opt_reason) {\n          if (promise.CancellableThenable.isImplementation(pd)) {\n            /** @type {!promise.CancellableThenable} */(pd).cancel(opt_reason);\n          }\n        };\n\n        /** @override */\n        this.then = pd.then.bind(pd);\n\n        /** @override */\n        this.catch = pd.then.bind(pd);\n      }\n    };\n    promise.CancellableThenable.addImplementation(thenableWebDriverProxy);\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);\n  }\n  return thenableWebDriverProxy.createSession(...args);\n}\n\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder');\n\n    /** @private {promise.ControlFlow} */\n    this.flow_ = null;\n\n    /** @private {string} */\n    this.url_ = '';\n\n    /** @private {?string} */\n    this.proxy_ = null;\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities();\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null;\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null;\n\n    /** @private {opera.Options} */\n    this.operaOptions_ = null;\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null;\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null;\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null;\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false;\n\n    /** @private {http.Agent} */\n    this.agent_ = null;\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true;\n    return this;\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url;\n    return this;\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_;\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent;\n    return this;\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_;\n  }\n\n  /**\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities);\n    return this;\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_;\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {string=} opt_platform The desired platform; may be omitted if any\n   *     version may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.set(Capability.BROWSER_NAME, name);\n    this.capabilities_.set(Capability.VERSION, opt_version || null);\n    this.capabilities_.set(Capability.PLATFORM, opt_platform || null);\n    return this;\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!capabilities.ProxyConfig} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config);\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs);\n    return this;\n  }\n\n  /**\n   * Sets whether native events should be used.\n   * @param {boolean} enabled Whether to enable native events.\n   * @return {!Builder} A self reference.\n   */\n  setEnableNativeEvents(enabled) {\n    this.capabilities_.setEnableNativeEvents(enabled);\n    return this;\n  }\n\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align\n   *     with the top of the viewport or 1 to align with the bottom.\n   * @return {!Builder} A self reference.\n   */\n  setScrollBehavior(behavior) {\n    this.capabilities_.setScrollBehavior(behavior);\n    return this;\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   * @param {string} behavior The desired behavior; should be \"accept\",\n   *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n   * @return {!Builder} A self reference.\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior);\n    return this;\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_;\n  }\n\n  /**\n   * Sets Opera specific {@linkplain opera.Options options} for drivers created\n   * by this builder. Any logging or proxy settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs} and\n   * {@link #setProxy}, respectively.\n   *\n   * @param {!opera.Options} options The OperaDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setOperaOptions(options) {\n    this.operaOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_;\n  }\n\n  /**\n   * Sets the control flow that created drivers should execute actions in. If\n   * the flow is never set, or is set to {@code null}, it will use the active\n   * flow at the time {@link #build()} is called.\n   * @param {promise.ControlFlow} flow The control flow to use, or\n   *     {@code null} to\n   * @return {!Builder} A self reference.\n   */\n  setControlFlow(flow) {\n    this.flow_ = flow;\n    return this;\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    var capabilities = new Capabilities(this.capabilities_);\n\n    var browser;\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`);\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3);\n      capabilities.set(Capability.BROWSER_NAME, browser[0]);\n      capabilities.set(Capability.VERSION, browser[1] || null);\n      capabilities.set(Capability.PLATFORM, browser[2] || null);\n    }\n\n    browser = capabilities.get(Capability.BROWSER_NAME);\n\n    if (typeof browser !== 'string') {\n      throw TypeError(\n          `Target browser must be a string, but is <${typeof browser}>;` +\n          ' did you forget to call forBrowser()?');\n    }\n\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER;\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_.toCapabilities());\n\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_.toCapabilities());\n\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_.toCapabilities());\n\n    } else if (browser === Browser.OPERA && this.operaOptions_) {\n      capabilities.merge(this.operaOptions_.toCapabilities());\n\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_.toCapabilities());\n\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_.toCapabilities());\n    }\n\n    // Check for a remote browser.\n    let url = this.url_;\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(\n            `SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`);\n        url = process.env.SELENIUM_REMOTE_URL;\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(\n            `SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`);\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);\n      }\n    }\n\n    if (url) {\n      this.log_.fine('Creating session on remote server');\n      let client = Promise.resolve(url)\n          .then(url => new _http.HttpClient(url, this.agent_, this.proxy_));\n      let executor = new _http.Executor(client);\n\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver);\n        return createDriver(\n            driver, capabilities, executor, this.flow_);\n      }\n\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver);\n        return createDriver(\n            driver, capabilities, executor, this.flow_);\n      }\n      return createDriver(\n          WebDriver, executor, capabilities, this.flow_);\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME:\n        return createDriver(chrome.Driver, capabilities, null, this.flow_);\n\n      case Browser.FIREFOX:\n        return createDriver(firefox.Driver, capabilities, null, this.flow_);\n\n      case Browser.INTERNET_EXPLORER:\n        return createDriver(ie.Driver, capabilities, this.flow_);\n\n      case Browser.EDGE:\n        return createDriver(edge.Driver, capabilities, null, this.flow_);\n\n      case Browser.OPERA:\n        return createDriver(opera.Driver, capabilities, null, this.flow_);\n\n      case Browser.PHANTOM_JS:\n        return createDriver(phantomjs.Driver, capabilities, this.flow_);\n\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities, this.flow_);\n\n      default:\n        throw new Error('Do not know how to build driver: ' + browser\n            + '; did you forget to call usingServer(url)?');\n    }\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.ActionSequence = actions.ActionSequence;\nexports.Browser = capabilities.Browser;\nexports.Builder = Builder;\nexports.Button = input.Button;\nexports.By = by.By;\nexports.Capabilities = capabilities.Capabilities;\nexports.Capability = capabilities.Capability;\nexports.Condition = webdriver.Condition;\nexports.EventEmitter = events.EventEmitter;\nexports.FileDetector = input.FileDetector;\nexports.Key = input.Key;\nexports.Session = session.Session;\nexports.ThenableWebDriver = ThenableWebDriver;\nexports.TouchSequence = actions.TouchSequence;\nexports.WebDriver = webdriver.WebDriver;\nexports.WebElement = webdriver.WebElement;\nexports.WebElementCondition = webdriver.WebElementCondition;\nexports.WebElementPromise = webdriver.WebElementPromise;\nexports.error = error;\nexports.logging = logging;\nexports.promise = promise;\nexports.until = until;\n"]},"metadata":{},"sourceType":"script"}