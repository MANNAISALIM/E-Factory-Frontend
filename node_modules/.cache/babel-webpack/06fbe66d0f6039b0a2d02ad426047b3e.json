{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\n\nvar Cli = /*#__PURE__*/function () {\n  function Cli() {\n    _classCallCheck(this, Cli);\n\n    this.programs = {};\n  }\n  /**\n   * Register a program to the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  _createClass(Cli, [{\n    key: \"program\",\n    value: function program(prog) {\n      this.programs[prog.cmd] = prog;\n      return this;\n    }\n    /**\n     * Add a usage for the command line interface.\n     * @returns The cli for method chaining.\n     */\n\n  }, {\n    key: \"usage\",\n    value: function usage(usageText) {\n      this.usageText = usageText;\n      return this;\n    }\n    /**\n     * Prints help for the programs registered to the cli.\n     */\n\n  }, {\n    key: \"printHelp\",\n    value: function printHelp() {\n      console.log('Usage: ' + this.usageText);\n      console.log('\\nCommands:');\n      var cmdDescriptionPos = this.posCmdDescription();\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        prog.printCmd(cmdDescriptionPos);\n      }\n\n      var descriptionPos = this.posDescription();\n      var defaultPos = this.posDefault();\n      var extOptions = {};\n      console.log('\\nOptions:'); // print all options\n\n      for (var _cmd in this.programs) {\n        var _prog = this.programs[_cmd];\n\n        _prog.printOptions(descriptionPos, defaultPos, extOptions);\n      }\n    }\n    /**\n     * For commands, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the command description should start.\n     */\n\n  }, {\n    key: \"posCmdDescription\",\n    value: function posCmdDescription() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        position = Math.max(position, cmd.length + 6);\n      }\n\n      return position;\n    }\n    /**\n     * For options, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the option description should start.\n     */\n\n  }, {\n    key: \"posDescription\",\n    value: function posDescription() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        position = Math.max(position, prog.posDescription());\n      }\n\n      return position;\n    }\n    /**\n     * For options, get the position where the default values should start so they\n     * are aligned.\n     * @returns The position where the option default values should start.\n     */\n\n  }, {\n    key: \"posDefault\",\n    value: function posDefault() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        position = Math.max(position, prog.posDefault());\n      }\n\n      return position;\n    }\n    /**\n     * Go through all programs and add options to the collection.\n     * @returns The options used in the programs.\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var allOptions = {};\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        allOptions = prog.getOptions_(allOptions);\n      }\n\n      return allOptions;\n    }\n    /**\n     * Get the options used by the programs and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n\n  }, {\n    key: \"getMinimistOptions\",\n    value: function getMinimistOptions() {\n      var allOptions = this.getOptions();\n      var minimistOptions = {};\n      var minimistBoolean = [];\n      var minimistString = [];\n      var minimistNumber = [];\n      var minimistDefault = {};\n\n      for (var opt in allOptions) {\n        var option = allOptions[opt];\n\n        if (option.type === 'boolean') {\n          minimistBoolean.push(option.opt);\n        } else if (option.type === 'string') {\n          minimistString.push(option.opt);\n        } else if (option.type === 'number') {\n          minimistNumber.push(option.opt);\n        }\n\n        if (typeof option.defaultValue !== 'undefined') {\n          minimistDefault[option.opt] = option.defaultValue;\n        }\n      }\n\n      minimistOptions['boolean'] = minimistBoolean;\n      minimistOptions['string'] = minimistString;\n      minimistOptions['number'] = minimistNumber;\n      minimistOptions['default'] = minimistDefault;\n      return minimistOptions;\n    }\n  }]);\n\n  return Cli;\n}();\n\nexports.Cli = Cli;","map":{"version":3,"sources":["../../../lib/cli/cli.ts"],"names":[],"mappings":";;;;;;;;;AAUA;;;;;;AAMG;;IACH,G;AAAA,iBAAA;AAAA;;AACE,SAAA,QAAA,GAAqB,EAArB;AAiID;AA7HC;;;AAGG;;;;;4BACK,I,EAAa;AACnB,WAAK,QAAL,CAAc,IAAI,CAAC,GAAnB,IAA0B,IAA1B;AACA,aAAO,IAAP;AACD;AAED;;;AAGG;;;;0BACG,S,EAAiB;AACrB,WAAK,SAAL,GAAiB,SAAjB;AACA,aAAO,IAAP;AACD;AAED;;AAEG;;;;gCACM;AACP,MAAA,OAAO,CAAC,GAAR,CAAY,YAAY,KAAK,SAA7B;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,aAAZ;AACA,UAAI,iBAAiB,GAAG,KAAK,iBAAL,EAAxB;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,YAAI,IAAI,GAAG,KAAK,QAAL,CAAc,GAAd,CAAX;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,iBAAd;AACD;;AACD,UAAI,cAAc,GAAG,KAAK,cAAL,EAArB;AACA,UAAI,UAAU,GAAG,KAAK,UAAL,EAAjB;AACA,UAAI,UAAU,GAAY,EAA1B;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,YAAZ,EAXO,CAYP;;AACA,WAAK,IAAI,IAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,YAAI,KAAI,GAAG,KAAK,QAAL,CAAc,IAAd,CAAX;;AACA,QAAA,KAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,UAAlC,EAA8C,UAA9C;AACD;AACF;AAED;;;;AAIG;;;;wCACc;AACf,UAAI,QAAQ,GAAG,CAAC,CAAhB;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,QAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,GAAG,CAAC,MAAJ,GAAa,CAAhC,CAAX;AACD;;AACD,aAAO,QAAP;AACD;AAED;;;;AAIG;;;;qCACW;AACZ,UAAI,QAAQ,GAAG,CAAC,CAAhB;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,YAAI,IAAI,GAAG,KAAK,QAAL,CAAc,GAAd,CAAX;AACA,QAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,IAAI,CAAC,cAAL,EAAnB,CAAX;AACD;;AACD,aAAO,QAAP;AACD;AAED;;;;AAIG;;;;iCACO;AACR,UAAI,QAAQ,GAAG,CAAC,CAAhB;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,YAAI,IAAI,GAAG,KAAK,QAAL,CAAc,GAAd,CAAX;AACA,QAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,IAAI,CAAC,UAAL,EAAnB,CAAX;AACD;;AACD,aAAO,QAAP;AACD;AAED;;;AAGG;;;;iCACO;AACR,UAAI,UAAU,GAAY,EAA1B;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,YAAI,IAAI,GAAG,KAAK,QAAL,CAAc,GAAd,CAAX;AACA,QAAA,UAAU,GAAG,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAAb;AACD;;AACD,aAAO,UAAP;AACD;AAED;;;;AAIG;;;;yCACe;AAChB,UAAI,UAAU,GAAG,KAAK,UAAL,EAAjB;AACA,UAAI,eAAe,GAAiB,EAApC;AACA,UAAI,eAAe,GAAa,EAAhC;AACA,UAAI,cAAc,GAAa,EAA/B;AACA,UAAI,cAAc,GAAa,EAA/B;AACA,UAAI,eAAe,GAAQ,EAA3B;;AACA,WAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,YAAI,MAAM,GAAG,UAAU,CAAC,GAAD,CAAvB;;AACA,YAAI,MAAM,CAAC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,UAAA,eAAe,CAAC,IAAhB,CAAqB,MAAM,CAAC,GAA5B;AACD,SAFD,MAEO,IAAI,MAAM,CAAC,IAAP,KAAgB,QAApB,EAA8B;AACnC,UAAA,cAAc,CAAC,IAAf,CAAoB,MAAM,CAAC,GAA3B;AACD,SAFM,MAEA,IAAI,MAAM,CAAC,IAAP,KAAgB,QAApB,EAA8B;AACnC,UAAA,cAAc,CAAC,IAAf,CAAoB,MAAM,CAAC,GAA3B;AACD;;AACD,YAAI,OAAO,MAAM,CAAC,YAAd,KAA+B,WAAnC,EAAgD;AAC9C,UAAA,eAAe,CAAC,MAAM,CAAC,GAAR,CAAf,GAA8B,MAAM,CAAC,YAArC;AACD;AACF;;AACD,MAAA,eAAe,CAAC,SAAD,CAAf,GAA6B,eAA7B;AACA,MAAA,eAAe,CAAC,QAAD,CAAf,GAA4B,cAA5B;AACA,MAAA,eAAe,CAAC,QAAD,CAAf,GAA4B,cAA5B;AACA,MAAA,eAAe,CAAC,SAAD,CAAf,GAA6B,eAA7B;AACA,aAAO,eAAP;AACD;;;;;;AAjIH,OAAA,CAAA,GAAA,GAAA,GAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\nclass Cli {\n    constructor() {\n        this.programs = {};\n    }\n    /**\n     * Register a program to the command line interface.\n     * @returns The cli for method chaining.\n     */\n    program(prog) {\n        this.programs[prog.cmd] = prog;\n        return this;\n    }\n    /**\n     * Add a usage for the command line interface.\n     * @returns The cli for method chaining.\n     */\n    usage(usageText) {\n        this.usageText = usageText;\n        return this;\n    }\n    /**\n     * Prints help for the programs registered to the cli.\n     */\n    printHelp() {\n        console.log('Usage: ' + this.usageText);\n        console.log('\\nCommands:');\n        let cmdDescriptionPos = this.posCmdDescription();\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            prog.printCmd(cmdDescriptionPos);\n        }\n        let descriptionPos = this.posDescription();\n        let defaultPos = this.posDefault();\n        let extOptions = {};\n        console.log('\\nOptions:');\n        // print all options\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            prog.printOptions(descriptionPos, defaultPos, extOptions);\n        }\n    }\n    /**\n     * For commands, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the command description should start.\n     */\n    posCmdDescription() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            position = Math.max(position, cmd.length + 6);\n        }\n        return position;\n    }\n    /**\n     * For options, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the option description should start.\n     */\n    posDescription() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            position = Math.max(position, prog.posDescription());\n        }\n        return position;\n    }\n    /**\n     * For options, get the position where the default values should start so they\n     * are aligned.\n     * @returns The position where the option default values should start.\n     */\n    posDefault() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            position = Math.max(position, prog.posDefault());\n        }\n        return position;\n    }\n    /**\n     * Go through all programs and add options to the collection.\n     * @returns The options used in the programs.\n     */\n    getOptions() {\n        let allOptions = {};\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            allOptions = prog.getOptions_(allOptions);\n        }\n        return allOptions;\n    }\n    /**\n     * Get the options used by the programs and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n    getMinimistOptions() {\n        let allOptions = this.getOptions();\n        let minimistOptions = {};\n        let minimistBoolean = [];\n        let minimistString = [];\n        let minimistNumber = [];\n        let minimistDefault = {};\n        for (let opt in allOptions) {\n            let option = allOptions[opt];\n            if (option.type === 'boolean') {\n                minimistBoolean.push(option.opt);\n            }\n            else if (option.type === 'string') {\n                minimistString.push(option.opt);\n            }\n            else if (option.type === 'number') {\n                minimistNumber.push(option.opt);\n            }\n            if (typeof option.defaultValue !== 'undefined') {\n                minimistDefault[option.opt] = option.defaultValue;\n            }\n        }\n        minimistOptions['boolean'] = minimistBoolean;\n        minimistOptions['string'] = minimistString;\n        minimistOptions['number'] = minimistNumber;\n        minimistOptions['default'] = minimistDefault;\n        return minimistOptions;\n    }\n}\nexports.Cli = Cli;\n//# sourceMappingURL=cli.js.map"]},"metadata":{},"sourceType":"script"}