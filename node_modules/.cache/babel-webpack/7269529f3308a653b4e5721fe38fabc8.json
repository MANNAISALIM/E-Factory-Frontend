{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Before using this module,\n * you must download and install the latest\n * [MicrosoftEdgeDriver](http://go.microsoft.com/fwlink/?LinkId=619687) server.\n * Ensure that the MicrosoftEdgeDriver is on your\n * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [MicrosoftEdgeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     MicrosoftEdgeDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the MicrosoftEdgeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     var edge = require('selenium-webdriver/edge');\n *\n *     var service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     var options = new edge.Options();\n *     // configure browser options ...\n *\n *     var driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start MicrosoftEdge using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [MicrosoftEdgeDriver]: https://msdn.microsoft.com/en-us/library/mt188085(v=vs.85).aspx\n */\n'use strict';\n\nvar _get = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar fs = require('fs'),\n    util = require('util');\n\nvar http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    promise = require('./lib/promise'),\n    Symbols = require('./lib/symbols'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\nvar EDGEDRIVER_EXE = 'MicrosoftWebDriver.exe';\n/**\n * Option keys.\n * @enum {string}\n */\n\nvar CAPABILITY_KEY = {\n  PAGE_LOAD_STRATEGY: 'pageLoadStrategy'\n};\n/**\n * Class for managing MicrosoftEdgeDriver specific options.\n */\n\nvar Options = /*#__PURE__*/function () {\n  function Options() {\n    _classCallCheck(this, Options);\n\n    /** @private {!Object} */\n    this.options_ = {};\n    /** @private {?capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Extracts the MicrosoftEdgeDriver specific options from the given\n   * capabilities object.\n   * @param {!capabilities.Capabilities} caps The capabilities object.\n   * @return {!Options} The MicrosoftEdgeDriver options.\n   */\n\n\n  _createClass(Options, [{\n    key: \"setProxy\",\n\n    /**\n     * Sets the proxy settings for the new session.\n     * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n     * @return {!Options} A self reference.\n     */\n    value: function setProxy(proxy) {\n      this.proxy_ = proxy;\n      return this;\n    }\n    /**\n     * Sets the page load strategy for Edge.\n     * Supported values are \"normal\", \"eager\", and \"none\";\n     *\n     * @param {string} pageLoadStrategy The page load strategy to use.\n     * @return {!Options} A self reference.\n     */\n\n  }, {\n    key: \"setPageLoadStrategy\",\n    value: function setPageLoadStrategy(pageLoadStrategy) {\n      this.options_[CAPABILITY_KEY.PAGE_LOAD_STRATEGY] = pageLoadStrategy.toLowerCase();\n      return this;\n    }\n    /**\n     * Converts this options instance to a {@link capabilities.Capabilities}\n     * object.\n     * @param {capabilities.Capabilities=} opt_capabilities The capabilities to\n     *     merge these options into, if any.\n     * @return {!capabilities.Capabilities} The capabilities.\n     */\n\n  }, {\n    key: \"toCapabilities\",\n    value: function toCapabilities(opt_capabilities) {\n      var caps = opt_capabilities || capabilities.Capabilities.edge();\n\n      if (this.proxy_) {\n        caps.set(capabilities.Capability.PROXY, this.proxy_);\n      }\n\n      Object.keys(this.options_).forEach(function (key) {\n        caps.set(key, this.options_[key]);\n      }, this);\n      return caps;\n    }\n    /**\n     * Converts this instance to its JSON wire protocol representation. Note this\n     * function is an implementation not intended for general use.\n     * @return {{pageLoadStrategy: (string|undefined)}}\n     *   The JSON wire protocol representation of this instance.\n     */\n\n  }, {\n    key: Symbols.serialize,\n    value: function value() {\n      var json = {};\n\n      for (var key in this.options_) {\n        if (this.options_[key] != null) {\n          json[key] = this.options_[key];\n        }\n      }\n\n      return json;\n    }\n  }], [{\n    key: \"fromCapabilities\",\n    value: function fromCapabilities(caps) {\n      var options = new Options();\n      var map = options.options_;\n      Object.keys(CAPABILITY_KEY).forEach(function (key) {\n        key = CAPABILITY_KEY[key];\n\n        if (caps.has(key)) {\n          map[key] = caps.get(key);\n        }\n      });\n\n      if (caps.has(capabilities.Capability.PROXY)) {\n        options.setProxy(caps.get(capabilities.Capability.PROXY));\n      }\n\n      return options;\n    }\n  }]);\n\n  return Options;\n}();\n/**\n * Creates {@link remote.DriverService} instances that manage a\n * MicrosoftEdgeDriver server in a child process.\n */\n\n\nvar ServiceBuilder = /*#__PURE__*/function (_remote$DriverService) {\n  _inherits(ServiceBuilder, _remote$DriverService);\n\n  var _super = _createSuper(ServiceBuilder);\n\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *   the builder will attempt to locate the MicrosoftEdgeDriver on the current\n   *   PATH.\n   * @throws {Error} If provided executable does not exist, or the\n   *   MicrosoftEdgeDriver cannot be found on the PATH.\n   */\n  function ServiceBuilder(opt_exe) {\n    var _this;\n\n    _classCallCheck(this, ServiceBuilder);\n\n    var exe = opt_exe || io.findInPath(EDGEDRIVER_EXE, true);\n\n    if (!exe) {\n      throw Error('The ' + EDGEDRIVER_EXE + ' could not be found on the current PATH. ' + 'Please download the latest version of the MicrosoftEdgeDriver from ' + 'https://www.microsoft.com/en-us/download/details.aspx?id=48212 and ' + 'ensure it can be found on your PATH.');\n    }\n\n    _this = _super.call(this, exe); // Binding to the loopback address will fail if not running with\n    // administrator privileges. Since we cannot test for that in script\n    // (or can we?), force the DriverService to use \"localhost\".\n\n    _this.setHostname('localhost');\n\n    return _this;\n  }\n\n  return ServiceBuilder;\n}(remote.DriverService.Builder);\n/** @type {remote.DriverService} */\n\n\nvar defaultService = null;\n/**\n * Sets the default service to use for new MicrosoftEdgeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\n\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error('The previously configured EdgeDriver service is still running. ' + 'You must shut it down before you may adjust its configuration.');\n  }\n\n  defaultService = service;\n}\n/**\n * Returns the default MicrosoftEdgeDriver service. If such a service has\n * not been configured, one will be constructed using the default configuration\n * for an MicrosoftEdgeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default MicrosoftEdgeDriver service.\n */\n\n\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n\n  return defaultService;\n}\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\n\n\nvar Driver = /*#__PURE__*/function (_webdriver$WebDriver) {\n  _inherits(Driver, _webdriver$WebDriver);\n\n  var _super2 = _createSuper(Driver);\n\n  function Driver() {\n    _classCallCheck(this, Driver);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Driver, [{\n    key: \"setFileDetector\",\n\n    /**\n     * This function is a no-op as file detectors are not supported by this\n     * implementation.\n     * @override\n     */\n    value: function setFileDetector() {}\n  }], [{\n    key: \"createSession\",\n\n    /**\n     * Creates a new browser session for Microsoft's Edge browser.\n     *\n     * @param {(capabilities.Capabilities|Options)=} opt_config The configuration\n     *     options.\n     * @param {remote.DriverService=} opt_service The session to use; will use\n     *     the {@linkplain #getDefaultService default service} by default.\n     * @param {promise.ControlFlow=} opt_flow The control flow to use, or\n     *     {@code null} to use the currently active flow.\n     * @return {!Driver} A new driver instance.\n     */\n    value: function createSession(opt_config, opt_service, opt_flow) {\n      var service = opt_service || getDefaultService();\n      var client = service.start().then(function (url) {\n        return new http.HttpClient(url);\n      });\n      var executor = new http.Executor(client);\n      var caps = opt_config instanceof Options ? opt_config.toCapabilities() : opt_config || capabilities.Capabilities.edge();\n      return (\n        /** @type {!Driver} */\n        _get(_getPrototypeOf(Driver), \"createSession\", this).call(this, executor, caps, opt_flow, function () {\n          return service.kill();\n        })\n      );\n    }\n  }]);\n\n  return Driver;\n}(webdriver.WebDriver); // PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/edge.js"],"names":["fs","require","util","http","io","capabilities","promise","Symbols","webdriver","portprober","remote","EDGEDRIVER_EXE","CAPABILITY_KEY","PAGE_LOAD_STRATEGY","Options","options_","proxy_","proxy","pageLoadStrategy","toLowerCase","opt_capabilities","caps","Capabilities","edge","set","Capability","PROXY","Object","keys","forEach","key","serialize","json","options","map","has","get","setProxy","ServiceBuilder","opt_exe","exe","findInPath","Error","setHostname","DriverService","Builder","defaultService","setDefaultService","service","isRunning","getDefaultService","build","Driver","opt_config","opt_service","opt_flow","client","start","then","url","HttpClient","executor","Executor","toCapabilities","kill","WebDriver","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Before using this module,\n * you must download and install the latest\n * [MicrosoftEdgeDriver](http://go.microsoft.com/fwlink/?LinkId=619687) server.\n * Ensure that the MicrosoftEdgeDriver is on your\n * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [MicrosoftEdgeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     MicrosoftEdgeDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the MicrosoftEdgeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     var edge = require('selenium-webdriver/edge');\n *\n *     var service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     var options = new edge.Options();\n *     // configure browser options ...\n *\n *     var driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start MicrosoftEdge using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [MicrosoftEdgeDriver]: https://msdn.microsoft.com/en-us/library/mt188085(v=vs.85).aspx\n */\n\n'use strict';\n\nconst fs = require('fs'),\n    util = require('util');\n\nconst http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    promise = require('./lib/promise'),\n    Symbols = require('./lib/symbols'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\nconst EDGEDRIVER_EXE = 'MicrosoftWebDriver.exe';\n\n\n/**\n * Option keys.\n * @enum {string}\n */\nconst CAPABILITY_KEY = {\n  PAGE_LOAD_STRATEGY: 'pageLoadStrategy'\n};\n\n\n/**\n * Class for managing MicrosoftEdgeDriver specific options.\n */\nclass Options {\n  constructor() {\n    /** @private {!Object} */\n    this.options_ = {};\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the MicrosoftEdgeDriver specific options from the given\n   * capabilities object.\n   * @param {!capabilities.Capabilities} caps The capabilities object.\n   * @return {!Options} The MicrosoftEdgeDriver options.\n   */\n  static fromCapabilities(caps) {\n    var options = new Options();\n    var map = options.options_;\n\n    Object.keys(CAPABILITY_KEY).forEach(function(key) {\n      key = CAPABILITY_KEY[key];\n      if (caps.has(key)) {\n        map[key] = caps.get(key);\n      }\n    });\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      options.setProxy(caps.get(capabilities.Capability.PROXY));\n    }\n\n    return options;\n  }\n\n  /**\n   * Sets the proxy settings for the new session.\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Sets the page load strategy for Edge.\n   * Supported values are \"normal\", \"eager\", and \"none\";\n   *\n   * @param {string} pageLoadStrategy The page load strategy to use.\n   * @return {!Options} A self reference.\n   */\n  setPageLoadStrategy(pageLoadStrategy) {\n    this.options_[CAPABILITY_KEY.PAGE_LOAD_STRATEGY] =\n      pageLoadStrategy.toLowerCase();\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link capabilities.Capabilities}\n   * object.\n   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to\n   *     merge these options into, if any.\n   * @return {!capabilities.Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    var caps = opt_capabilities || capabilities.Capabilities.edge();\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n    Object.keys(this.options_).forEach(function(key) {\n      caps.set(key, this.options_[key]);\n    }, this);\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation not intended for general use.\n   * @return {{pageLoadStrategy: (string|undefined)}}\n   *   The JSON wire protocol representation of this instance.\n   */\n  [Symbols.serialize]() {\n    var json = {};\n    for (var key in this.options_) {\n      if (this.options_[key] != null) {\n        json[key] = this.options_[key];\n      }\n    }\n    return json;\n  }\n}\n\n\n/**\n * Creates {@link remote.DriverService} instances that manage a\n * MicrosoftEdgeDriver server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *   the builder will attempt to locate the MicrosoftEdgeDriver on the current\n   *   PATH.\n   * @throws {Error} If provided executable does not exist, or the\n   *   MicrosoftEdgeDriver cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || io.findInPath(EDGEDRIVER_EXE, true);\n    if (!exe) {\n      throw Error(\n        'The ' + EDGEDRIVER_EXE + ' could not be found on the current PATH. ' +\n        'Please download the latest version of the MicrosoftEdgeDriver from ' +\n        'https://www.microsoft.com/en-us/download/details.aspx?id=48212 and ' +\n        'ensure it can be found on your PATH.');\n    }\n\n    super(exe);\n\n    // Binding to the loopback address will fail if not running with\n    // administrator privileges. Since we cannot test for that in script\n    // (or can we?), force the DriverService to use \"localhost\".\n    this.setHostname('localhost');\n  }\n}\n\n\n/** @type {remote.DriverService} */\nvar defaultService = null;\n\n\n/**\n * Sets the default service to use for new MicrosoftEdgeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error(\n      'The previously configured EdgeDriver service is still running. ' +\n      'You must shut it down before you may adjust its configuration.');\n  }\n  defaultService = service;\n}\n\n\n/**\n * Returns the default MicrosoftEdgeDriver service. If such a service has\n * not been configured, one will be constructed using the default configuration\n * for an MicrosoftEdgeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default MicrosoftEdgeDriver service.\n */\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n  return defaultService;\n}\n\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration\n   *     options.\n   * @param {remote.DriverService=} opt_service The session to use; will use\n   *     the {@linkplain #getDefaultService default service} by default.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use, or\n   *     {@code null} to use the currently active flow.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_service, opt_flow) {\n    var service = opt_service || getDefaultService();\n    var client = service.start().then(url => new http.HttpClient(url));\n    var executor = new http.Executor(client);\n\n    var caps =\n        opt_config instanceof Options ? opt_config.toCapabilities() :\n        (opt_config || capabilities.Capabilities.edge());\n\n    return /** @type {!Driver} */(super.createSession(\n        executor, caps, opt_flow, () => service.kill()));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\n\n// PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;\n"]},"metadata":{},"sourceType":"script"}