{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Level = /*#__PURE__*/function () {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  function Level(name, level) {\n    _classCallCheck(this, Level);\n\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n    /** @private {string} */\n\n\n    this.name_ = name;\n    /** @private {number} */\n\n    this.value_ = level;\n  }\n  /** This logger's name. */\n\n\n  _createClass(Level, [{\n    key: \"toString\",\n\n    /** @override */\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.name_;\n    }\n    /** The numeric log level. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.value_;\n    }\n  }]);\n\n  return Level;\n}();\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\n\n\nLevel.OFF = new Level('OFF', Infinity);\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\n\nLevel.SEVERE = new Level('SEVERE', 1000);\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\n\nLevel.WARNING = new Level('WARNING', 900);\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\n\nLevel.INFO = new Level('INFO', 800);\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\n\nLevel.DEBUG = new Level('DEBUG', 700);\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\n\nLevel.FINE = new Level('FINE', 500);\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\n\nLevel.FINER = new Level('FINER', 400);\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\n\nLevel.FINEST = new Level('FINEST', 300);\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\n\nLevel.ALL = new Level('ALL', 0);\nvar ALL_LEVELS =\n/** !Set<Level> */\nnew Set([Level.OFF, Level.SEVERE, Level.WARNING, Level.INFO, Level.DEBUG, Level.FINE, Level.FINER, Level.FINEST, Level.ALL]);\nvar LEVELS_BY_NAME =\n/** !Map<string, !Level> */\nnew Map([[Level.OFF.name, Level.OFF], [Level.SEVERE.name, Level.SEVERE], [Level.WARNING.name, Level.WARNING], [Level.INFO.name, Level.INFO], [Level.DEBUG.name, Level.DEBUG], [Level.FINE.name, Level.FINE], [Level.FINER.name, Level.FINER], [Level.FINEST.name, Level.FINEST], [Level.ALL.name, Level.ALL]]);\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\n\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n\n  var _iterator = _createForOfIteratorHelper(ALL_LEVELS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var level = _step.value;\n\n      if (nameOrValue >= level.value) {\n        return level;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Level.ALL;\n}\n/**\n * Describes a single log entry.\n *\n * @final\n */\n\n\nvar Entry = /*#__PURE__*/function () {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  function Entry(level, message, opt_timestamp, opt_type) {\n    _classCallCheck(this, Entry);\n\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n\n\n  _createClass(Entry, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        'level': this.level.name,\n        'message': this.message,\n        'timestamp': this.timestamp,\n        'type': this.type\n      };\n    }\n  }]);\n\n  return Entry;\n}();\n/** @typedef {(string|function(): string)} */\n\n\nvar Loggable;\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\n\nvar Logger = /*#__PURE__*/function () {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  function Logger(name, opt_level) {\n    _classCallCheck(this, Logger);\n\n    /** @private {string} */\n    this.name_ = name;\n    /** @private {Level} */\n\n    this.level_ = opt_level || null;\n    /** @private {Logger} */\n\n    this.parent_ = null;\n    /** @private {Set<function(!Entry)>} */\n\n    this.handlers_ = null;\n  }\n  /** @return {string} the name of this logger. */\n\n\n  _createClass(Logger, [{\n    key: \"getName\",\n    value: function getName() {\n      return this.name_;\n    }\n    /**\n     * @param {Level} level the new level for this logger, or `null` if the logger\n     *     should inherit its level from its parent logger.\n     */\n\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(level) {\n      this.level_ = level;\n    }\n    /** @return {Level} the log level for this logger. */\n\n  }, {\n    key: \"getLevel\",\n    value: function getLevel() {\n      return this.level_;\n    }\n    /**\n     * @return {!Level} the effective level for this logger.\n     */\n\n  }, {\n    key: \"getEffectiveLevel\",\n    value: function getEffectiveLevel() {\n      var logger = this;\n      var level;\n\n      do {\n        level = logger.level_;\n        logger = logger.parent_;\n      } while (logger && !level);\n\n      return level || Level.OFF;\n    }\n    /**\n     * @param {!Level} level the level to check.\n     * @return {boolean} whether messages recorded at the given level are loggable\n     *     by this instance.\n     */\n\n  }, {\n    key: \"isLoggable\",\n    value: function isLoggable(level) {\n      return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value;\n    }\n    /**\n     * Adds a handler to this logger. The handler will be invoked for each message\n     * logged with this instance, or any of its descendants.\n     *\n     * @param {function(!Entry)} handler the handler to add.\n     */\n\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(handler) {\n      if (!this.handlers_) {\n        this.handlers_ = new Set();\n      }\n\n      this.handlers_.add(handler);\n    }\n    /**\n     * Removes a handler from this logger.\n     *\n     * @param {function(!Entry)} handler the handler to remove.\n     * @return {boolean} whether a handler was successfully removed.\n     */\n\n  }, {\n    key: \"removeHandler\",\n    value: function removeHandler(handler) {\n      if (!this.handlers_) {\n        return false;\n      }\n\n      return this.handlers_.delete(handler);\n    }\n    /**\n     * Logs a message at the given level. The message may be defined as a string\n     * or as a function that will return the message. If a function is provided,\n     * it will only be invoked if this logger's\n     * {@linkplain #getEffectiveLevel() effective log level} includes the given\n     * `level`.\n     *\n     * @param {!Level} level the level at which to log the message.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(level, loggable) {\n      if (!this.isLoggable(level)) {\n        return;\n      }\n\n      var message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable);\n      var entry = new Entry(level, message, Date.now());\n\n      for (var logger = this; !!logger; logger = logger.parent_) {\n        if (logger.handlers_) {\n          var _iterator2 = _createForOfIteratorHelper(logger.handlers_),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var handler = _step2.value;\n              handler(entry);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n    /**\n     * Logs a message at the {@link Level.SEVERE} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"severe\",\n    value: function severe(loggable) {\n      this.log(Level.SEVERE, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.WARNING} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"warning\",\n    value: function warning(loggable) {\n      this.log(Level.WARNING, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.INFO} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(loggable) {\n      this.log(Level.INFO, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.DEBUG} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug(loggable) {\n      this.log(Level.DEBUG, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.FINE} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"fine\",\n    value: function fine(loggable) {\n      this.log(Level.FINE, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.FINER} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"finer\",\n    value: function finer(loggable) {\n      this.log(Level.FINER, loggable);\n    }\n    /**\n     * Logs a message at the {@link Level.FINEST} log level.\n     * @param {(string|function(): string)} loggable the message to log, or a\n     *     function that will return the message.\n     */\n\n  }, {\n    key: \"finest\",\n    value: function finest(loggable) {\n      this.log(Level.FINEST, loggable);\n    }\n  }]);\n\n  return Logger;\n}();\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\n\n\nvar LogManager = /*#__PURE__*/function () {\n  function LogManager() {\n    _classCallCheck(this, LogManager);\n\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map();\n    this.root_ = new Logger('', Level.OFF);\n  }\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n\n\n  _createClass(LogManager, [{\n    key: \"getLogger\",\n    value: function getLogger(name) {\n      if (!name) {\n        return this.root_;\n      }\n\n      var parent = this.root_;\n\n      for (var i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n        var parentName = name.substr(0, i);\n        parent = this.createLogger_(parentName, parent);\n      }\n\n      return this.createLogger_(name, parent);\n    }\n    /**\n     * Creates a new logger.\n     *\n     * @param {string} name the logger's name.\n     * @param {!Logger} parent the logger's parent.\n     * @return {!Logger} the new logger.\n     * @private\n     */\n\n  }, {\n    key: \"createLogger_\",\n    value: function createLogger_(name, parent) {\n      if (this.loggers_.has(name)) {\n        return (\n          /** @type {!Logger} */\n          this.loggers_.get(name)\n        );\n      }\n\n      var logger = new Logger(name, null);\n      logger.parent_ = parent;\n      this.loggers_.set(name, logger);\n      return logger;\n    }\n  }]);\n\n  return LogManager;\n}();\n\nvar logManager = new LogManager();\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\n\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n/**\n * Pads a number to ensure it has a minimum of two digits.\n * \n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\n\n\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\n\n\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n\n  var timestamp = new Date(entry.timestamp);\n  var msg = '[' + timestamp.getUTCFullYear() + '-' + pad(timestamp.getUTCMonth() + 1) + '-' + pad(timestamp.getUTCDate()) + 'T' + pad(timestamp.getUTCHours()) + ':' + pad(timestamp.getUTCMinutes()) + ':' + pad(timestamp.getUTCSeconds()) + 'Z] ' + '[' + entry.level.name + '] ' + entry.message;\n  var level = entry.level.value;\n\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\n\n\nfunction addConsoleHandler(opt_logger) {\n  var logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\n\n\nfunction removeConsoleHandler(opt_logger) {\n  var logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n/**\n * Installs the console log handler on the root logger.\n */\n\n\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n/**\n * Common log types.\n * @enum {string}\n */\n\n\nvar Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\n\nvar Preferences = /*#__PURE__*/function () {\n  function Preferences() {\n    _classCallCheck(this, Preferences);\n\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map();\n  }\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n\n\n  _createClass(Preferences, [{\n    key: \"setLevel\",\n    value: function setLevel(type, level) {\n      if (typeof type !== 'string') {\n        throw TypeError('specified log type is not a string: ' + typeof type);\n      }\n\n      this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n    }\n    /**\n     * Converts this instance to its JSON representation.\n     * @return {!Object<string, string>} The JSON representation of this set of\n     *     preferences.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n\n      var _iterator3 = _createForOfIteratorHelper(this.prefs_.keys()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          json[key] = this.prefs_.get(key).name;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return json;\n    }\n  }]);\n\n  return Preferences;\n}(); // PUBLIC API\n\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/selenium-webdriver/lib/logging.js"],"names":["Level","name","level","TypeError","name_","value_","OFF","Infinity","SEVERE","WARNING","INFO","DEBUG","FINE","FINER","FINEST","ALL","ALL_LEVELS","Set","LEVELS_BY_NAME","Map","getLevel","nameOrValue","get","value","Entry","message","opt_timestamp","opt_type","timestamp","Date","now","type","Loggable","Logger","opt_level","level_","parent_","handlers_","logger","getEffectiveLevel","handler","add","delete","loggable","isLoggable","entry","log","LogManager","loggers_","root_","parent","i","indexOf","parentName","substr","createLogger_","has","set","logManager","getLogger","pad","n","consoleHandler","console","msg","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","error","warn","addConsoleHandler","opt_logger","addHandler","removeConsoleHandler","removeHandler","installConsoleHandler","Type","BROWSER","CLIENT","DRIVER","PERFORMANCE","SERVER","Preferences","prefs_","json","keys","key","module","exports"],"mappings":"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","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {number} */\n    this.value_ = level;\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_;\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_;\n  }\n\n  /** @override */\n  toString() {\n    return this.name;\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity);\n\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000);\n\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900);\n\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800);\n\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700);\n\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500);\n\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400);\n\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300);\n\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0);\n\n\nconst ALL_LEVELS = /** !Set<Level> */new Set([\n  Level.OFF,\n  Level.SEVERE,\n  Level.WARNING,\n  Level.INFO,\n  Level.DEBUG,\n  Level.FINE,\n  Level.FINER,\n  Level.FINEST,\n  Level.ALL\n]);\n\n\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([\n  [Level.OFF.name, Level.OFF],\n  [Level.SEVERE.name, Level.SEVERE],\n  [Level.WARNING.name, Level.WARNING],\n  [Level.INFO.name, Level.INFO],\n  [Level.DEBUG.name, Level.DEBUG],\n  [Level.FINE.name, Level.FINE],\n  [Level.FINER.name, Level.FINER],\n  [Level.FINEST.name, Level.FINEST],\n  [Level.ALL.name, Level.ALL]\n]);\n\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level;\n    }\n  }\n  return Level.ALL;\n}\n\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp =\n        typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      'level': this.level.name,\n      'message': this.message,\n      'timestamp': this.timestamp,\n      'type': this.type\n    };\n  }\n}\n\n\n/** @typedef {(string|function(): string)} */\nlet Loggable;\n\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {Level} */\n    this.level_ = opt_level || null;\n\n    /** @private {Logger} */\n    this.parent_ = null;\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null;\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_;\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level;\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_;\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this;\n    let level;\n    do {\n      level = logger.level_;\n      logger = logger.parent_;\n    } while (logger && !level);\n    return level || Level.OFF;\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return level.value !== Level.OFF.value\n        && level.value >= this.getEffectiveLevel().value;\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set;\n    }\n    this.handlers_.add(handler);\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false;\n    }\n    return this.handlers_.delete(handler);\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return;\n    }\n    let message = '[' + this.name_ + '] '\n        + (typeof loggable === 'function' ? loggable() : loggable);\n    let entry = new Entry(level, message, Date.now());\n    for (let logger = this; !!logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry);\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable);\n  }\n}\n\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map;\n    this.root_ = new Logger('', Level.OFF);\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_;\n    }\n    let parent = this.root_;\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i);\n      parent = this.createLogger_(parentName, parent);\n    }\n    return this.createLogger_(name, parent);\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */(this.loggers_.get(name));\n    }\n    let logger = new Logger(name, null);\n    logger.parent_ = parent;\n    this.loggers_.set(name, logger);\n    return logger;\n  }\n}\n\n\nconst logManager = new LogManager;\n\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n * \n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n\n  var timestamp = new Date(entry.timestamp);\n  var msg =\n      '[' + timestamp.getUTCFullYear() + '-' +\n      pad(timestamp.getUTCMonth() + 1) + '-' +\n      pad(timestamp.getUTCDate()) + 'T' +\n      pad(timestamp.getUTCHours()) + ':' +\n      pad(timestamp.getUTCMinutes()) + ':' +\n      pad(timestamp.getUTCSeconds()) + 'Z] ' +\n      '[' + entry.level.name + '] ' +\n      entry.message;\n\n  var level = entry.level.value;\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map;\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type);\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {};\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name;\n    }\n    return json;\n  }\n}\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};\n"]},"metadata":{},"sourceType":"script"}