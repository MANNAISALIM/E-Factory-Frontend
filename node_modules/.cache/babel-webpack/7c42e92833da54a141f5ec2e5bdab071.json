{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\"); // Will use chalk if chalk is available to add color to console logging\n\n\nvar chalk;\nvar printRed;\nvar printYellow;\nvar printGray;\n\ntry {\n  chalk = require('chalk');\n  printRed = chalk.red;\n  printYellow = chalk.yellow;\n  printGray = chalk.gray;\n} catch (e) {\n  printRed = printYellow = printGray = function printGray(msg) {\n    return msg;\n  };\n}\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n  LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n\nvar WriteTo;\n\n(function (WriteTo) {\n  WriteTo[WriteTo[\"CONSOLE\"] = 0] = \"CONSOLE\";\n  WriteTo[WriteTo[\"FILE\"] = 1] = \"FILE\";\n  WriteTo[WriteTo[\"BOTH\"] = 2] = \"BOTH\";\n  WriteTo[WriteTo[\"NONE\"] = 3] = \"NONE\";\n})(WriteTo = exports.WriteTo || (exports.WriteTo = {}));\n\nvar logFile = 'protractor.log'; // the default log file name\n\n/**\n * Logger class adds timestamp output, log levels, and identifiers to help\n * when debugging. Also could write to console, file, both, or none.\n */\n\nvar Logger = /*#__PURE__*/function () {\n  /**\n   * Creates a logger instance with an ID for the logger.\n   * @constructor\n   */\n  function Logger(id) {\n    _classCallCheck(this, Logger);\n\n    this.id = id;\n  }\n  /**\n   * Set up the logging configuration from the protractor configuration file.\n   * @param config The protractor configuration\n   */\n\n\n  _createClass(Logger, [{\n    key: \"info\",\n\n    /**\n     * Log INFO\n     * @param ...msgs multiple arguments to be logged.\n     */\n    value: function info() {\n      for (var _len = arguments.length, msgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        msgs[_key] = arguments[_key];\n      }\n\n      this.log_(LogLevel.INFO, msgs);\n    }\n    /**\n     * Log DEBUG\n     * @param ...msgs multiple arguments to be logged.\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, msgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msgs[_key2] = arguments[_key2];\n      }\n\n      this.log_(LogLevel.DEBUG, msgs);\n    }\n    /**\n     * Log WARN\n     * @param ...msgs multiple arguments to be logged.\n     */\n\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, msgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        msgs[_key3] = arguments[_key3];\n      }\n\n      this.log_(LogLevel.WARN, msgs);\n    }\n    /**\n     * Log ERROR\n     * @param ...msgs multiple arguments to be logged.\n     */\n\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len4 = arguments.length, msgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        msgs[_key4] = arguments[_key4];\n      }\n\n      this.log_(LogLevel.ERROR, msgs);\n    }\n    /**\n     * For the log level set, check to see if the messages should be logged.\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged\n     */\n\n  }, {\n    key: \"log_\",\n    value: function log_(logLevel, msgs) {\n      switch (Logger.logLevel) {\n        case LogLevel.ERROR:\n          if (logLevel <= LogLevel.ERROR) {\n            this.print_(logLevel, msgs);\n          }\n\n          break;\n\n        case LogLevel.WARN:\n          if (logLevel <= LogLevel.WARN) {\n            this.print_(logLevel, msgs);\n          }\n\n          break;\n\n        case LogLevel.INFO:\n          if (logLevel <= LogLevel.INFO) {\n            this.print_(logLevel, msgs);\n          }\n\n          break;\n\n        case LogLevel.DEBUG:\n          if (logLevel <= LogLevel.DEBUG) {\n            this.print_(logLevel, msgs);\n          }\n\n          break;\n\n        default:\n          throw new Error('Invalid log level');\n      }\n    }\n    /**\n     * Format with timestamp, log level, identifier, and message and log to\n     * specified medium (console, file, both, none).\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged.\n     */\n\n  }, {\n    key: \"print_\",\n    value: function print_(logLevel, msgs) {\n      var consoleLog = '';\n      var fileLog = '';\n\n      if (Logger.showTimestamp) {\n        consoleLog += Logger.timestamp_(WriteTo.CONSOLE);\n        fileLog += Logger.timestamp_(WriteTo.FILE);\n      }\n\n      consoleLog += Logger.level_(logLevel, this.id, WriteTo.CONSOLE);\n      fileLog += Logger.level_(logLevel, this.id, WriteTo.FILE);\n\n      if (Logger.showId) {\n        consoleLog += Logger.id_(logLevel, this.id, WriteTo.CONSOLE);\n        fileLog += Logger.id_(logLevel, this.id, WriteTo.FILE);\n      }\n\n      consoleLog += ' -';\n      fileLog += ' - ';\n\n      switch (Logger.writeTo) {\n        case WriteTo.CONSOLE:\n          msgs.unshift(consoleLog);\n          console.log.apply(console, msgs);\n          break;\n\n        case WriteTo.FILE:\n          // for the first line written to the file, add a space\n          if (!Logger.firstWrite) {\n            fs.writeSync(Logger.fd, '\\n');\n            Logger.firstWrite = true;\n          }\n\n          fileLog += ' ' + Logger.msgToFile_(msgs);\n          fs.writeSync(Logger.fd, fileLog + '\\n');\n          break;\n\n        case WriteTo.BOTH:\n          // for the first line written to the file, add a space\n          if (!Logger.firstWrite) {\n            fs.writeSync(Logger.fd, '\\n');\n            Logger.firstWrite = true;\n          }\n\n          fileLog += ' ' + Logger.msgToFile_(msgs);\n          fs.writeSync(Logger.fd, fileLog + '\\n');\n          msgs.unshift(consoleLog);\n          console.log.apply(console, msgs);\n          break;\n\n        case WriteTo.NONE:\n          break;\n      }\n    }\n    /**\n     * Get a timestamp formatted with [hh:mm:ss]\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted timestamp\n     */\n\n  }], [{\n    key: \"set\",\n    value: function set(config) {\n      if (config.troubleshoot) {\n        Logger.logLevel = LogLevel.DEBUG;\n      } else if (config.logLevel) {\n        Logger.logLevel = LogLevel[config.logLevel];\n      }\n    }\n    /**\n     * Set up the write location. If writing to a file, get the file descriptor.\n     * @param writeTo The enum for where to write the logs.\n     * @param opt_logFile An optional parameter to override the log file location.\n     */\n\n  }, {\n    key: \"setWrite\",\n    value: function setWrite(writeTo, opt_logFile) {\n      if (opt_logFile) {\n        logFile = opt_logFile;\n      }\n\n      Logger.writeTo = writeTo;\n\n      if (Logger.writeTo == WriteTo.FILE || Logger.writeTo == WriteTo.BOTH) {\n        Logger.fd = fs.openSync(path.resolve(logFile), 'a');\n        Logger.firstWrite = false;\n      }\n    }\n  }, {\n    key: \"timestamp_\",\n    value: function timestamp_(writeTo) {\n      var d = new Date();\n      var ts = '[';\n      var hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n      var minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n      var seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n\n      if (writeTo == WriteTo.CONSOLE) {\n        ts += printGray(hours + ':' + minutes + ':' + seconds) + ']';\n      } else {\n        ts += hours + ':' + minutes + ':' + seconds + ']';\n      }\n\n      ts += ' ';\n      return ts;\n    }\n    /**\n     * Get the identifier of the logger as '/<id>'\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted id\n     */\n\n  }, {\n    key: \"id_\",\n    value: function id_(logLevel, id, writeTo) {\n      if (writeTo === WriteTo.FILE) {\n        return '/' + id;\n      } else if (logLevel === LogLevel.ERROR) {\n        return printRed('/' + id);\n      } else if (logLevel === LogLevel.WARN) {\n        return printYellow('/' + id);\n      } else {\n        return '/' + id;\n      }\n    }\n    /**\n     * Get the log level formatted with the first letter. For info, it is I.\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted log level\n     */\n\n  }, {\n    key: \"level_\",\n    value: function level_(logLevel, id, writeTo) {\n      var level = LogLevel[logLevel].toString();\n\n      if (writeTo === WriteTo.FILE) {\n        return level[0];\n      } else if (logLevel === LogLevel.ERROR) {\n        return printRed(level[0]);\n      } else if (logLevel === LogLevel.WARN) {\n        return printYellow(level[0]);\n      } else {\n        return level[0];\n      }\n    }\n    /**\n     * Convert the list of messages to a single string message.\n     * @param msgs The list of messages.\n     * @return The string of the formatted messages\n     */\n\n  }, {\n    key: \"msgToFile_\",\n    value: function msgToFile_(msgs) {\n      var log = '';\n\n      for (var pos = 0; pos < msgs.length; pos++) {\n        var msg = msgs[pos];\n        var ret = void 0;\n\n        if (typeof msg === 'object') {\n          ret = JSON.stringify(msg);\n        } else {\n          ret = msg;\n        }\n\n        if (pos !== msgs.length - 1) {\n          ret += ' ';\n        }\n\n        log += ret;\n      }\n\n      return log;\n    }\n  }]);\n\n  return Logger;\n}();\n\nLogger.logLevel = LogLevel.INFO;\nLogger.showTimestamp = true;\nLogger.showId = true;\nLogger.writeTo = WriteTo.CONSOLE;\nLogger.firstWrite = false;\nexports.Logger = Logger;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/logger.js"],"names":["Object","defineProperty","exports","value","fs","require","path","chalk","printRed","printYellow","printGray","red","yellow","gray","e","msg","LogLevel","WriteTo","logFile","Logger","id","msgs","log_","INFO","DEBUG","WARN","ERROR","logLevel","print_","Error","consoleLog","fileLog","showTimestamp","timestamp_","CONSOLE","FILE","level_","showId","id_","writeTo","unshift","console","log","apply","firstWrite","writeSync","fd","msgToFile_","BOTH","NONE","config","troubleshoot","opt_logFile","openSync","resolve","d","Date","ts","hours","getHours","minutes","getMinutes","seconds","getSeconds","level","toString","pos","length","ret","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n// Will use chalk if chalk is available to add color to console logging\nlet chalk;\nlet printRed;\nlet printYellow;\nlet printGray;\ntry {\n    chalk = require('chalk');\n    printRed = chalk.red;\n    printYellow = chalk.yellow;\n    printGray = chalk.gray;\n}\ncatch (e) {\n    printRed = printYellow = printGray = (msg) => {\n        return msg;\n    };\n}\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nvar WriteTo;\n(function (WriteTo) {\n    WriteTo[WriteTo[\"CONSOLE\"] = 0] = \"CONSOLE\";\n    WriteTo[WriteTo[\"FILE\"] = 1] = \"FILE\";\n    WriteTo[WriteTo[\"BOTH\"] = 2] = \"BOTH\";\n    WriteTo[WriteTo[\"NONE\"] = 3] = \"NONE\";\n})(WriteTo = exports.WriteTo || (exports.WriteTo = {}));\nlet logFile = 'protractor.log'; // the default log file name\n/**\n * Logger class adds timestamp output, log levels, and identifiers to help\n * when debugging. Also could write to console, file, both, or none.\n */\nclass Logger {\n    /**\n     * Creates a logger instance with an ID for the logger.\n     * @constructor\n     */\n    constructor(id) {\n        this.id = id;\n    }\n    /**\n     * Set up the logging configuration from the protractor configuration file.\n     * @param config The protractor configuration\n     */\n    static set(config) {\n        if (config.troubleshoot) {\n            Logger.logLevel = LogLevel.DEBUG;\n        }\n        else if (config.logLevel) {\n            Logger.logLevel = LogLevel[config.logLevel];\n        }\n    }\n    /**\n     * Set up the write location. If writing to a file, get the file descriptor.\n     * @param writeTo The enum for where to write the logs.\n     * @param opt_logFile An optional parameter to override the log file location.\n     */\n    static setWrite(writeTo, opt_logFile) {\n        if (opt_logFile) {\n            logFile = opt_logFile;\n        }\n        Logger.writeTo = writeTo;\n        if (Logger.writeTo == WriteTo.FILE || Logger.writeTo == WriteTo.BOTH) {\n            Logger.fd = fs.openSync(path.resolve(logFile), 'a');\n            Logger.firstWrite = false;\n        }\n    }\n    /**\n     * Log INFO\n     * @param ...msgs multiple arguments to be logged.\n     */\n    info(...msgs) {\n        this.log_(LogLevel.INFO, msgs);\n    }\n    /**\n     * Log DEBUG\n     * @param ...msgs multiple arguments to be logged.\n     */\n    debug(...msgs) {\n        this.log_(LogLevel.DEBUG, msgs);\n    }\n    /**\n     * Log WARN\n     * @param ...msgs multiple arguments to be logged.\n     */\n    warn(...msgs) {\n        this.log_(LogLevel.WARN, msgs);\n    }\n    /**\n     * Log ERROR\n     * @param ...msgs multiple arguments to be logged.\n     */\n    error(...msgs) {\n        this.log_(LogLevel.ERROR, msgs);\n    }\n    /**\n     * For the log level set, check to see if the messages should be logged.\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged\n     */\n    log_(logLevel, msgs) {\n        switch (Logger.logLevel) {\n            case LogLevel.ERROR:\n                if (logLevel <= LogLevel.ERROR) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.WARN:\n                if (logLevel <= LogLevel.WARN) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.INFO:\n                if (logLevel <= LogLevel.INFO) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.DEBUG:\n                if (logLevel <= LogLevel.DEBUG) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            default:\n                throw new Error('Invalid log level');\n        }\n    }\n    /**\n     * Format with timestamp, log level, identifier, and message and log to\n     * specified medium (console, file, both, none).\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged.\n     */\n    print_(logLevel, msgs) {\n        let consoleLog = '';\n        let fileLog = '';\n        if (Logger.showTimestamp) {\n            consoleLog += Logger.timestamp_(WriteTo.CONSOLE);\n            fileLog += Logger.timestamp_(WriteTo.FILE);\n        }\n        consoleLog += Logger.level_(logLevel, this.id, WriteTo.CONSOLE);\n        fileLog += Logger.level_(logLevel, this.id, WriteTo.FILE);\n        if (Logger.showId) {\n            consoleLog += Logger.id_(logLevel, this.id, WriteTo.CONSOLE);\n            fileLog += Logger.id_(logLevel, this.id, WriteTo.FILE);\n        }\n        consoleLog += ' -';\n        fileLog += ' - ';\n        switch (Logger.writeTo) {\n            case WriteTo.CONSOLE:\n                msgs.unshift(consoleLog);\n                console.log.apply(console, msgs);\n                break;\n            case WriteTo.FILE:\n                // for the first line written to the file, add a space\n                if (!Logger.firstWrite) {\n                    fs.writeSync(Logger.fd, '\\n');\n                    Logger.firstWrite = true;\n                }\n                fileLog += ' ' + Logger.msgToFile_(msgs);\n                fs.writeSync(Logger.fd, fileLog + '\\n');\n                break;\n            case WriteTo.BOTH:\n                // for the first line written to the file, add a space\n                if (!Logger.firstWrite) {\n                    fs.writeSync(Logger.fd, '\\n');\n                    Logger.firstWrite = true;\n                }\n                fileLog += ' ' + Logger.msgToFile_(msgs);\n                fs.writeSync(Logger.fd, fileLog + '\\n');\n                msgs.unshift(consoleLog);\n                console.log.apply(console, msgs);\n                break;\n            case WriteTo.NONE:\n                break;\n        }\n    }\n    /**\n     * Get a timestamp formatted with [hh:mm:ss]\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted timestamp\n     */\n    static timestamp_(writeTo) {\n        let d = new Date();\n        let ts = '[';\n        let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n        let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n        let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n        if (writeTo == WriteTo.CONSOLE) {\n            ts += printGray(hours + ':' + minutes + ':' + seconds) + ']';\n        }\n        else {\n            ts += hours + ':' + minutes + ':' + seconds + ']';\n        }\n        ts += ' ';\n        return ts;\n    }\n    /**\n     * Get the identifier of the logger as '/<id>'\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted id\n     */\n    static id_(logLevel, id, writeTo) {\n        if (writeTo === WriteTo.FILE) {\n            return '/' + id;\n        }\n        else if (logLevel === LogLevel.ERROR) {\n            return printRed('/' + id);\n        }\n        else if (logLevel === LogLevel.WARN) {\n            return printYellow('/' + id);\n        }\n        else {\n            return '/' + id;\n        }\n    }\n    /**\n     * Get the log level formatted with the first letter. For info, it is I.\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted log level\n     */\n    static level_(logLevel, id, writeTo) {\n        let level = LogLevel[logLevel].toString();\n        if (writeTo === WriteTo.FILE) {\n            return level[0];\n        }\n        else if (logLevel === LogLevel.ERROR) {\n            return printRed(level[0]);\n        }\n        else if (logLevel === LogLevel.WARN) {\n            return printYellow(level[0]);\n        }\n        else {\n            return level[0];\n        }\n    }\n    /**\n     * Convert the list of messages to a single string message.\n     * @param msgs The list of messages.\n     * @return The string of the formatted messages\n     */\n    static msgToFile_(msgs) {\n        let log = '';\n        for (let pos = 0; pos < msgs.length; pos++) {\n            let msg = msgs[pos];\n            let ret;\n            if (typeof msg === 'object') {\n                ret = JSON.stringify(msg);\n            }\n            else {\n                ret = msg;\n            }\n            if (pos !== msgs.length - 1) {\n                ret += ' ';\n            }\n            log += ret;\n        }\n        return log;\n    }\n}\nLogger.logLevel = LogLevel.INFO;\nLogger.showTimestamp = true;\nLogger.showId = true;\nLogger.writeTo = WriteTo.CONSOLE;\nLogger.firstWrite = false;\nexports.Logger = Logger;\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}