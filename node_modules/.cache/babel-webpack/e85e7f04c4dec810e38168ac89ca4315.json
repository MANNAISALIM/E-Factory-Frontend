{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar blocking_proxy_1 = require(\"blocking-proxy\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar url = require(\"url\");\n\nvar webdriver_js_extender_1 = require(\"webdriver-js-extender\");\n\nvar element_1 = require(\"./element\");\n\nvar expectedConditions_1 = require(\"./expectedConditions\");\n\nvar locators_1 = require(\"./locators\");\n\nvar logger_1 = require(\"./logger\");\n\nvar clientSideScripts = require('./clientsidescripts'); // TODO: fix the typings for selenium-webdriver/lib/command\n\n\nvar Command = require('selenium-webdriver/lib/command').Command;\n\nvar CommandName = require('selenium-webdriver/lib/command').Name; // jshint browser: true\n\n\nvar DEFER_LABEL = 'NG_DEFER_BOOTSTRAP!';\nvar DEFAULT_RESET_URL = 'data:text/html,<html></html>';\nvar DEFAULT_GET_PAGE_TIMEOUT = 10000;\nvar logger = new logger_1.Logger('protractor'); // TODO(cnishina): either remove for loop entirely since this does not export anything\n// the user might need since everything is composed (with caveat that this could be a\n// potential breaking change) or export the types with `export * from 'selenium-webdriver'`;\n\n/*\n * Mix in other webdriver functionality to be accessible via protractor.\n */\n\nfor (var foo in require('selenium-webdriver')) {\n  exports[foo] = require('selenium-webdriver')[foo];\n} // Explicitly define types for webdriver.WebDriver and ExtendedWebDriver.\n// We do this because we use composition over inheritance to implement polymorphism, and therefore\n// we don't want to inherit WebDriver's constructor.\n\n\nvar AbstractWebDriver = function AbstractWebDriver() {\n  _classCallCheck(this, AbstractWebDriver);\n};\n\nexports.AbstractWebDriver = AbstractWebDriver;\n\nvar AbstractExtendedWebDriver = /*#__PURE__*/function (_AbstractWebDriver) {\n  _inherits(AbstractExtendedWebDriver, _AbstractWebDriver);\n\n  var _super = _createSuper(AbstractExtendedWebDriver);\n\n  function AbstractExtendedWebDriver() {\n    _classCallCheck(this, AbstractExtendedWebDriver);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AbstractExtendedWebDriver;\n}(AbstractWebDriver);\n\nexports.AbstractExtendedWebDriver = AbstractExtendedWebDriver;\n/**\n * Mix a function from one object onto another. The function will still be\n * called in the context of the original object.  Any arguments of type\n * `ElementFinder` will be unwrapped to their underlying `WebElement` instance\n *\n * @private\n * @param {Object} to\n * @param {Object} from\n * @param {string} fnName\n * @param {function=} setupFn\n */\n\nfunction ptorMixin(to, from, fnName, setupFn) {\n  to[fnName] = function () {\n    var args = arguments;\n\n    for (var i = 0; i < args.length; i++) {\n      if (args[i] instanceof element_1.ElementFinder) {\n        args[i] = args[i].getWebElement();\n      }\n    }\n\n    var run = function run() {\n      return from[fnName].apply(from, args);\n    };\n\n    if (setupFn) {\n      var setupResult = setupFn();\n\n      if (setupResult && typeof setupResult.then === 'function') {\n        return setupResult.then(run);\n      }\n    }\n\n    return run();\n  };\n}\n\n;\n/**\n * Build the helper 'element' function for a given instance of Browser.\n *\n * @private\n * @param {Browser} browser A browser instance.\n * @returns {function(webdriver.Locator): ElementFinder}\n */\n\nfunction buildElementHelper(browser) {\n  var element = function element(locator) {\n    return new element_1.ElementArrayFinder(browser).all(locator).toElementFinder_();\n  };\n\n  element.all = function (locator) {\n    return new element_1.ElementArrayFinder(browser).all(locator);\n  };\n\n  return element;\n}\n\n;\n/**\n * @alias browser\n * @constructor\n * @extends {webdriver_extensions.ExtendedWebDriver}\n * @param {webdriver.WebDriver} webdriver\n * @param {string=} opt_baseUrl A base URL to run get requests against.\n * @param {string|webdriver.promise.Promise<string>=} opt_rootElement  Selector element that has an\n *     ng-app in scope.\n * @param {boolean=} opt_untrackOutstandingTimeouts Whether Protractor should\n *     stop tracking outstanding $timeouts.\n */\n\nvar ProtractorBrowser = /*#__PURE__*/function (_AbstractExtendedWebD) {\n  _inherits(ProtractorBrowser, _AbstractExtendedWebD);\n\n  var _super2 = _createSuper(ProtractorBrowser);\n\n  function ProtractorBrowser(webdriverInstance, opt_baseUrl, opt_rootElement, opt_untrackOutstandingTimeouts, opt_blockingProxyUrl) {\n    var _this;\n\n    _classCallCheck(this, ProtractorBrowser);\n\n    _this = _super2.call(this); // These functions should delegate to the webdriver instance, but should\n    // wait for Angular to sync up before performing the action. This does not\n    // include functions which are overridden by protractor below.\n\n    var methodsToSync = ['getCurrentUrl', 'getPageSource', 'getTitle'];\n    var extendWDInstance;\n\n    try {\n      extendWDInstance = webdriver_js_extender_1.extend(webdriverInstance);\n    } catch (e) {\n      // Probably not a driver that can be extended (e.g. gotten using\n      // `directConnect: true` in the config)\n      extendWDInstance = webdriverInstance;\n    } // Mix all other driver functionality into Protractor.\n\n\n    Object.getOwnPropertyNames(selenium_webdriver_1.WebDriver.prototype).forEach(function (method) {\n      if (!_this[method] && typeof extendWDInstance[method] === 'function') {\n        if (methodsToSync.indexOf(method) !== -1) {\n          ptorMixin(_assertThisInitialized(_this), extendWDInstance, method, _this.waitForAngular.bind(_assertThisInitialized(_this)));\n        } else {\n          ptorMixin(_assertThisInitialized(_this), extendWDInstance, method);\n        }\n      }\n    });\n    _this.driver = extendWDInstance;\n\n    if (opt_blockingProxyUrl) {\n      logger.info('Starting BP client for ' + opt_blockingProxyUrl);\n      _this.bpClient = new blocking_proxy_1.BPClient(opt_blockingProxyUrl);\n    }\n\n    _this.element = buildElementHelper(_assertThisInitialized(_this));\n    _this.$ = element_1.build$(_this.element, selenium_webdriver_1.By);\n    _this.$$ = element_1.build$$(_this.element, selenium_webdriver_1.By);\n    _this.baseUrl = opt_baseUrl || '';\n    _this.getPageTimeout = DEFAULT_GET_PAGE_TIMEOUT;\n    _this.params = {};\n    _this.resetUrl = DEFAULT_RESET_URL;\n    var ng12Hybrid_ = false;\n    Object.defineProperty(_assertThisInitialized(_this), 'ng12Hybrid', {\n      get: function get() {\n        return ng12Hybrid_;\n      },\n      set: function set(ng12Hybrid) {\n        if (ng12Hybrid) {\n          logger.warn('You have set ng12Hybrid.  As of Protractor 4.1.0, ' + 'Protractor can automatically infer if you are using an ' + 'ngUpgrade app (as long as ng1 is loaded before you call ' + 'platformBrowserDynamic()), and this flag is no longer needed ' + 'for most users');\n        }\n\n        ng12Hybrid_ = ng12Hybrid;\n      }\n    });\n    _this.ready = _this.angularAppRoot(opt_rootElement || '').then(function () {\n      return _this.driver.getSession();\n    }).then(function (session) {\n      // Internet Explorer does not accept data URLs, which are the default\n      // reset URL for Protractor.\n      // Safari accepts data urls, but SafariDriver fails after one is used.\n      // PhantomJS produces a \"Detected a page unload event\" if we use data urls\n      var browserName = session.getCapabilities().get('browserName');\n\n      if (browserName === 'internet explorer' || browserName === 'safari' || browserName === 'phantomjs' || browserName === 'MicrosoftEdge') {\n        _this.resetUrl = 'about:blank';\n      }\n\n      return _assertThisInitialized(_this);\n    });\n    _this.trackOutstandingTimeouts_ = !opt_untrackOutstandingTimeouts;\n    _this.mockModules_ = [];\n\n    _this.addBaseMockModules_(); // set up expected conditions\n\n\n    _this.ExpectedConditions = new expectedConditions_1.ProtractorExpectedConditions(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * The css selector for an element on which to find Angular. This is usually\n   * 'body' but if your ng-app is on a subsection of the page it may be\n   * a subelement.\n   *\n   * This property is deprecated - please use angularAppRoot() instead.\n   *\n   * @deprecated\n   * @type {string}\n   */\n\n\n  _createClass(ProtractorBrowser, [{\n    key: \"angularAppRoot\",\n\n    /**\n     * Set the css selector for an element on which to find Angular. This is usually\n     * 'body' but if your ng-app is on a subsection of the page it may be\n     * a subelement.\n     *\n     * The change will be made within WebDriver's control flow, so that commands after\n     * this method is called use the new app root. Pass nothing to get a promise that\n     * resolves to the value of the selector.\n     *\n     * @param {string|webdriver.promise.Promise<string>} value The new selector.\n     * @returns A promise that resolves with the value of the selector.\n     */\n    value: function angularAppRoot() {\n      var _this2 = this;\n\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.driver.controlFlow().execute(function () {\n        if (value != null) {\n          return selenium_webdriver_1.promise.when(value).then(function (value) {\n            _this2.internalRootEl = value;\n\n            if (_this2.bpClient) {\n              var bpCommandPromise = _this2.bpClient.setWaitParams(value); // Convert to webdriver promise as best as possible\n\n\n              return selenium_webdriver_1.promise.when(bpCommandPromise).then(function () {\n                return _this2.internalRootEl;\n              });\n            }\n\n            return _this2.internalRootEl;\n          });\n        }\n\n        return selenium_webdriver_1.promise.when(_this2.internalRootEl);\n      }, \"Set angular root selector to \".concat(value));\n    }\n    /**\n     * If true, Protractor will not attempt to synchronize with the page before\n     * performing actions. This can be harmful because Protractor will not wait\n     * until $timeouts and $http calls have been processed, which can cause\n     * tests to become flaky. This should be used only when necessary, such as\n     * when a page continuously polls an API using $timeout.\n     *\n     * Initialized to `false` by the runner.\n     *\n     * This property is deprecated - please use waitForAngularEnabled instead.\n     *\n     * @deprecated\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"waitForAngularEnabled\",\n\n    /**\n     * If set to false, Protractor will not wait for Angular $http and $timeout\n     * tasks to complete before interacting with the browser. This can cause\n     * flaky tests, but should be used if, for instance, your app continuously\n     * polls an API with $timeout.\n     *\n     * Call waitForAngularEnabled() without passing a value to read the current\n     * state without changing it.\n     */\n    value: function waitForAngularEnabled() {\n      var _this3 = this;\n\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (enabled != null) {\n        var ret = this.driver.controlFlow().execute(function () {\n          return selenium_webdriver_1.promise.when(enabled).then(function (enabled) {\n            if (_this3.bpClient) {\n              logger.debug('Setting waitForAngular' + !enabled);\n\n              var bpCommandPromise = _this3.bpClient.setWaitEnabled(enabled); // Convert to webdriver promise as best as possible\n\n\n              return selenium_webdriver_1.promise.when(bpCommandPromise).then(function () {\n                return enabled;\n              });\n            }\n          });\n        }, \"Set proxy synchronization enabled to \".concat(enabled));\n        this.internalIgnoreSynchronization = !enabled;\n        return ret;\n      }\n\n      return selenium_webdriver_1.promise.when(!this.ignoreSynchronization);\n    }\n    /**\n     * Get the processed configuration object that is currently being run. This\n     * will contain the specs and capabilities properties of the current runner\n     * instance.\n     *\n     * Set by the runner.\n     *\n     * @returns {webdriver.promise.Promise} A promise which resolves to the\n     * capabilities object.\n     */\n\n  }, {\n    key: \"getProcessedConfig\",\n    value: function getProcessedConfig() {\n      return null;\n    }\n    /**\n     * Fork another instance of browser for use in interactive tests.\n     *\n     * @example\n     * // Running with control flow enabled\n     * var fork = browser.forkNewDriverInstance();\n     * fork.get('page1'); // 'page1' gotten by forked browser\n     *\n     * // Running with control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await forked.get('page1'); // 'page1' gotten by forked browser\n     *\n     * @param {boolean=} useSameUrl Whether to navigate to current url on creation\n     * @param {boolean=} copyMockModules Whether to apply same mock modules on creation\n     * @param {boolean=} copyConfigUpdates Whether to copy over changes to `baseUrl` and similar\n     *   properties initialized to values in the the config.  Defaults to `true`\n     *\n     * @returns {ProtractorBrowser} A browser instance.\n     */\n\n  }, {\n    key: \"forkNewDriverInstance\",\n    value: function forkNewDriverInstance(useSameUrl, copyMockModules) {\n      var copyConfigUpdates = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return null;\n    }\n    /**\n     * Restart the browser.  This is done by closing this browser instance and creating a new one.\n     * A promise resolving to the new instance is returned, and if this function was called on the\n     * global `browser` instance then Protractor will automatically overwrite the global `browser`\n     * variable.\n     *\n     * When restarting a forked browser, it is the caller's job to overwrite references to the old\n     * instance.\n     *\n     * This function behaves slightly differently depending on if the webdriver control flow is\n     * enabled.  If the control flow is enabled, the global `browser` object is synchronously\n     * replaced. If the control flow is disabled, the global `browser` is replaced asynchronously\n     * after the old driver quits.\n     *\n     * Set by the runner.\n     *\n     * @example\n     * // Running against global browser, with control flow enabled\n     * browser.get('page1');\n     * browser.restart();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against global browser, with control flow disabled\n     * await browser.get('page1');\n     * await browser.restart();\n     * await browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers, with the control flow enabled\n     * // In this case, you may prefer `restartSync` (documented below)\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork.restart().then(function(fork) {\n     *   fork.get('page2'); // 'page2' gotten by restarted fork\n     * });\n     *\n     * // Running against forked browsers, with the control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await fork.get('page1');\n     * fork = await fork.restart();\n     * await fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * // Unexpected behavior can occur if you save references to the global `browser`\n     * var savedBrowser = browser;\n     * browser.get('foo').then(function() {\n     *   console.log(browser === savedBrowser); // false\n     * });\n     * browser.restart();\n     *\n     * @returns {webdriver.promise.Promise<ProtractorBrowser>} A promise resolving to the restarted\n     *   browser\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      return;\n    }\n    /**\n     * Like `restart`, but instead of returning a promise resolving to the new browser instance,\n     * returns the new browser instance directly.  Can only be used when the control flow is enabled.\n     *\n     * @example\n     * // Running against global browser\n     * browser.get('page1');\n     * browser.restartSync();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork = fork.restartSync();\n     * fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * @throws {TypeError} Will throw an error if the control flow is not enabled\n     * @returns {ProtractorBrowser} The restarted browser\n     */\n\n  }, {\n    key: \"restartSync\",\n    value: function restartSync() {\n      return;\n    }\n    /**\n     * Instead of using a single root element, search through all angular apps\n     * available on the page when finding elements or waiting for stability.\n     * Only compatible with Angular2.\n     */\n\n  }, {\n    key: \"useAllAngular2AppRoots\",\n    value: function useAllAngular2AppRoots() {\n      // The empty string is an invalid css selector, so we use it to easily\n      // signal to scripts to not find a root element.\n      this.angularAppRoot('');\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description of the command for debugging.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the scripts return value.\n     * @template T\n     */\n\n  }, {\n    key: \"executeScriptWithDescription\",\n    value: function executeScriptWithDescription(script, description) {\n      if (typeof script === 'function') {\n        script = 'return (' + script + ').apply(null, arguments);';\n      }\n\n      for (var _len = arguments.length, scriptArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        scriptArgs[_key - 2] = arguments[_key];\n      }\n\n      return this.driver.schedule(new Command(CommandName.EXECUTE_SCRIPT).setParameter('script', script).setParameter('args', scriptArgs), description);\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeAsyncScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description for debugging purposes.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the\n     *    scripts return value.\n     * @template T\n     */\n\n  }, {\n    key: \"executeAsyncScript_\",\n    value: function executeAsyncScript_(script, description) {\n      if (typeof script === 'function') {\n        script = 'return (' + script + ').apply(null, arguments);';\n      }\n\n      for (var _len2 = arguments.length, scriptArgs = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        scriptArgs[_key2 - 2] = arguments[_key2];\n      }\n\n      return this.driver.schedule(new Command(CommandName.EXECUTE_ASYNC_SCRIPT).setParameter('script', script).setParameter('args', scriptArgs), description);\n    }\n    /**\n     * Instruct webdriver to wait until Angular has finished rendering and has\n     * no outstanding $http or $timeout calls before continuing.\n     * Note that Protractor automatically applies this command before every\n     * WebDriver action.\n     *\n     * @param {string=} opt_description An optional description to be added\n     *     to webdriver logs.\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to the\n     *    scripts return value.\n     */\n\n  }, {\n    key: \"waitForAngular\",\n    value: function waitForAngular(opt_description) {\n      var _this4 = this;\n\n      var description = opt_description ? ' - ' + opt_description : '';\n\n      if (this.ignoreSynchronization) {\n        return this.driver.controlFlow().execute(function () {\n          return true;\n        }, 'Ignore Synchronization Protractor.waitForAngular()');\n      }\n\n      var runWaitForAngularScript = function runWaitForAngularScript() {\n        if (_this4.plugins_.skipAngularStability() || _this4.bpClient) {\n          return _this4.driver.controlFlow().execute(function () {\n            return selenium_webdriver_1.promise.when(null);\n          }, 'bpClient or plugin stability override');\n        } else {\n          // Need to wrap this so that we read rootEl in the control flow, not synchronously.\n          return _this4.angularAppRoot().then(function (rootEl) {\n            return _this4.executeAsyncScript_(clientSideScripts.waitForAngular, 'Protractor.waitForAngular()' + description, rootEl);\n          });\n        }\n      };\n\n      return runWaitForAngularScript().then(function (browserErr) {\n        if (browserErr) {\n          throw new Error('Error while waiting for Protractor to ' + 'sync with the page: ' + JSON.stringify(browserErr));\n        }\n      }).then(function () {\n        return _this4.driver.controlFlow().execute(function () {\n          return _this4.plugins_.waitForPromise(_this4);\n        }, 'Plugins.waitForPromise()').then(function () {\n          return _this4.driver.wait(function () {\n            return _this4.plugins_.waitForCondition(_this4).then(function (results) {\n              return results.reduce(function (x, y) {\n                return x && y;\n              }, true);\n            });\n          }, _this4.allScriptsTimeout, 'Plugins.waitForCondition()');\n        });\n      }, function (err) {\n        var timeout;\n\n        if (/asynchronous script timeout/.test(err.message)) {\n          // Timeout on Chrome\n          timeout = /-?[\\d\\.]*\\ seconds/.exec(err.message);\n        } else if (/Timed out waiting for async script/.test(err.message)) {\n          // Timeout on Firefox\n          timeout = /-?[\\d\\.]*ms/.exec(err.message);\n        } else if (/Timed out waiting for an asynchronous script/.test(err.message)) {\n          // Timeout on Safari\n          timeout = /-?[\\d\\.]*\\ ms/.exec(err.message);\n        }\n\n        if (timeout) {\n          var errMsg = \"Timed out waiting for asynchronous Angular tasks to finish after \" + \"\".concat(timeout, \". This may be because the current page is not an Angular \") + \"application. Please see the FAQ for more details: \" + \"https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular\";\n\n          if (description.indexOf(' - Locator: ') == 0) {\n            errMsg += '\\nWhile waiting for element with locator' + description;\n          }\n\n          var pendingTimeoutsPromise;\n\n          if (_this4.trackOutstandingTimeouts_) {\n            pendingTimeoutsPromise = _this4.executeScriptWithDescription('return window.NG_PENDING_TIMEOUTS', 'Protractor.waitForAngular() - getting pending timeouts' + description);\n          } else {\n            pendingTimeoutsPromise = selenium_webdriver_1.promise.when({});\n          }\n\n          var pendingHttpsPromise = _this4.executeScriptWithDescription(clientSideScripts.getPendingHttpRequests, 'Protractor.waitForAngular() - getting pending https' + description, _this4.internalRootEl);\n\n          return selenium_webdriver_1.promise.all([pendingTimeoutsPromise, pendingHttpsPromise]).then(function (arr) {\n            var pendingTimeouts = arr[0] || [];\n            var pendingHttps = arr[1] || [];\n            var key,\n                pendingTasks = [];\n\n            for (key in pendingTimeouts) {\n              if (pendingTimeouts.hasOwnProperty(key)) {\n                pendingTasks.push(' - $timeout: ' + pendingTimeouts[key]);\n              }\n            }\n\n            for (key in pendingHttps) {\n              pendingTasks.push(' - $http: ' + pendingHttps[key].url);\n            }\n\n            if (pendingTasks.length) {\n              errMsg += '. \\nThe following tasks were pending:\\n';\n              errMsg += pendingTasks.join('\\n');\n            }\n\n            err.message = errMsg;\n            throw err;\n          }, function () {\n            err.message = errMsg;\n            throw err;\n          });\n        } else {\n          throw err;\n        }\n      });\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElement\n     * @returns {!webdriver.WebElementPromise} A promise that will be resolved to\n     *      the located {@link webdriver.WebElement}.\n     */\n\n  }, {\n    key: \"findElement\",\n    value: function findElement(locator) {\n      return this.element(locator).getWebElement();\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElements\n     * @returns {!webdriver.promise.Promise} A promise that will be resolved to an\n     *     array of the located {@link webdriver.WebElement}s.\n     */\n\n  }, {\n    key: \"findElements\",\n    value: function findElements(locator) {\n      return this.element.all(locator).getWebElements();\n    }\n    /**\n     * Tests if an element is present on the page.\n     * @see webdriver.WebDriver.isElementPresent\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to whether\n     *     the element is present on the page.\n     */\n\n  }, {\n    key: \"isElementPresent\",\n    value: function isElementPresent(locatorOrElement) {\n      var element;\n\n      if (locatorOrElement instanceof element_1.ElementFinder) {\n        element = locatorOrElement;\n      } else if (locatorOrElement instanceof selenium_webdriver_1.WebElement) {\n        element = element_1.ElementFinder.fromWebElement_(this, locatorOrElement);\n      } else {\n        element = this.element(locatorOrElement);\n      }\n\n      return element.isPresent();\n    }\n    /**\n     * Add a module to load before Angular whenever Protractor.get is called.\n     * Modules will be registered after existing modules already on the page,\n     * so any module registered here will override preexisting modules with the\n     * same name.\n     *\n     * @example\n     * browser.addMockModule('modName', function() {\n     *   angular.module('modName', []).value('foo', 'bar');\n     * });\n     *\n     * @param {!string} name The name of the module to load or override.\n     * @param {!string|Function} script The JavaScript to load the module.\n     *     Note that this will be executed in the browser context, so it cannot\n     *     access variables from outside its scope.\n     * @param {...*} varArgs Any additional arguments will be provided to\n     *     the script and may be referenced using the `arguments` object.\n     */\n\n  }, {\n    key: \"addMockModule\",\n    value: function addMockModule(name, script) {\n      for (var _len3 = arguments.length, moduleArgs = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        moduleArgs[_key3 - 2] = arguments[_key3];\n      }\n\n      this.mockModules_.push({\n        name: name,\n        script: script,\n        args: moduleArgs\n      });\n    }\n    /**\n     * Clear the list of registered mock modules.\n     */\n\n  }, {\n    key: \"clearMockModules\",\n    value: function clearMockModules() {\n      this.mockModules_ = [];\n      this.addBaseMockModules_();\n    }\n    /**\n     * Remove a registered mock module.\n     *\n     * @example\n     * browser.removeMockModule('modName');\n     *\n     * @param {!string} name The name of the module to remove.\n     */\n\n  }, {\n    key: \"removeMockModule\",\n    value: function removeMockModule(name) {\n      for (var i = 0; i < this.mockModules_.length; ++i) {\n        if (this.mockModules_[i].name == name) {\n          this.mockModules_.splice(i--, 1);\n        }\n      }\n    }\n    /**\n     * Get a list of the current mock modules.\n     *\n     * @returns {Array.<!string|Function>} The list of mock modules.\n     */\n\n  }, {\n    key: \"getRegisteredMockModules\",\n    value: function getRegisteredMockModules() {\n      return this.mockModules_.map(function (module) {\n        return module.script;\n      });\n    }\n  }, {\n    key: \"addBaseMockModules_\",\n\n    /**\n     * Add the base mock modules used for all Protractor tests.\n     *\n     * @private\n     */\n    value: function addBaseMockModules_() {\n      this.addMockModule('protractorBaseModule_', clientSideScripts.protractorBaseModuleFn, this.trackOutstandingTimeouts_);\n    }\n    /**\n     * @see webdriver.WebDriver.get\n     *\n     * Navigate to the given destination and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @example\n     * browser.get('https://angularjs.org/');\n     * expect(browser.getCurrentUrl()).toBe('https://angularjs.org/');\n     *\n     * @param {string} destination Destination URL.\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to\n     *     start.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(destination) {\n      var _this5 = this;\n\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getPageTimeout;\n      destination = this.baseUrl.indexOf('file://') === 0 ? this.baseUrl + destination : url.resolve(this.baseUrl, destination);\n\n      if (this.ignoreSynchronization) {\n        return this.driver.get(destination).then(function () {\n          return _this5.driver.controlFlow().execute(function () {\n            return _this5.plugins_.onPageLoad(_this5);\n          });\n        }).then(function () {\n          return null;\n        });\n      }\n\n      var msg = function msg(str) {\n        return 'Protractor.get(' + destination + ') - ' + str;\n      };\n\n      return this.driver.controlFlow().execute(function () {\n        return selenium_webdriver_1.promise.when(null);\n      }).then(function () {\n        if (_this5.bpClient) {\n          return _this5.driver.controlFlow().execute(function () {\n            return _this5.bpClient.setWaitEnabled(false);\n          });\n        }\n      }).then(function () {\n        // Go to reset url\n        return _this5.driver.get(_this5.resetUrl);\n      }).then(function () {\n        // Set defer label and navigate\n        return _this5.executeScriptWithDescription('window.name = \"' + DEFER_LABEL + '\" + window.name;' + 'window.location.replace(\"' + destination + '\");', msg('reset url'));\n      }).then(function () {\n        // We need to make sure the new url has loaded before\n        // we try to execute any asynchronous scripts.\n        return _this5.driver.wait(function () {\n          return _this5.executeScriptWithDescription('return window.location.href;', msg('get url')).then(function (url) {\n            return url !== _this5.resetUrl;\n          }, function (err) {\n            if (err.code == 13 || err.name === 'JavascriptError') {\n              // Ignore the error, and continue trying. This is\n              // because IE driver sometimes (~1%) will throw an\n              // unknown error from this execution. See\n              // https://github.com/angular/protractor/issues/841\n              // This shouldn't mask errors because it will fail\n              // with the timeout anyway.\n              return false;\n            } else {\n              throw err;\n            }\n          });\n        }, timeout, 'waiting for page to load for ' + timeout + 'ms');\n      }).then(function () {\n        // Run Plugins\n        return _this5.driver.controlFlow().execute(function () {\n          return _this5.plugins_.onPageLoad(_this5);\n        });\n      }).then(function () {\n        // Make sure the page is an Angular page.\n        return _this5.executeAsyncScript_(clientSideScripts.testForAngular, msg('test for angular'), Math.floor(timeout / 1000), _this5.ng12Hybrid).then(function (angularTestResult) {\n          var angularVersion = angularTestResult.ver;\n\n          if (!angularVersion) {\n            var message = angularTestResult.message;\n            logger.error(\"Could not find Angular on page \".concat(destination, \" : \").concat(message));\n            throw new Error(\"Angular could not be found on the page \".concat(destination, \". \") + \"If this is not an Angular application, you may need to turn off waiting for Angular.\\n                          Please see \\n                          https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular-on-page-load\");\n          }\n\n          return angularVersion;\n        }, function (err) {\n          throw new Error('Error while running testForAngular: ' + err.message);\n        });\n      }).then(function (angularVersion) {\n        // Load Angular Mocks\n        if (angularVersion === 1) {\n          // At this point, Angular will pause for us until angular.resumeBootstrap is called.\n          var moduleNames = [];\n          var modulePromise = selenium_webdriver_1.promise.when(null);\n\n          var _iterator = _createForOfIteratorHelper(_this5.mockModules_),\n              _step;\n\n          try {\n            var _loop = function _loop() {\n              var _step$value = _step.value,\n                  name = _step$value.name,\n                  script = _step$value.script,\n                  args = _step$value.args;\n              moduleNames.push(name);\n              var executeScriptArgs = [script, msg('add mock module ' + name)].concat(_toConsumableArray(args));\n              modulePromise = modulePromise.then(function () {\n                return _this5.executeScriptWithDescription.apply(_this5, executeScriptArgs).then(null, function (err) {\n                  throw new Error('Error while running module script ' + name + ': ' + err.message);\n                });\n              });\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return modulePromise.then(function () {\n            return _this5.executeScriptWithDescription('window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__ = ' + 'angular.resumeBootstrap(arguments[0]);', msg('resume bootstrap'), moduleNames);\n          });\n        } else {\n          // TODO: support mock modules in Angular2. For now, error if someone\n          // has tried to use one.\n          if (_this5.mockModules_.length > 1) {\n            throw 'Trying to load mock modules on an Angular v2+ app is not yet supported.';\n          }\n        }\n      }).then(function () {\n        // Reset bpClient sync\n        if (_this5.bpClient) {\n          return _this5.driver.controlFlow().execute(function () {\n            return _this5.bpClient.setWaitEnabled(!_this5.internalIgnoreSynchronization);\n          });\n        }\n      }).then(function () {\n        // Run Plugins\n        return _this5.driver.controlFlow().execute(function () {\n          return _this5.plugins_.onPageStable(_this5);\n        });\n      }).then(function () {\n        return null;\n      });\n    }\n    /**\n     * @see webdriver.WebDriver.refresh\n     *\n     * Makes a full reload of the current page and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to start.\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh(opt_timeout) {\n      var _this6 = this;\n\n      if (this.ignoreSynchronization) {\n        return this.driver.navigate().refresh();\n      }\n\n      return this.executeScriptWithDescription('return window.location.href', 'Protractor.refresh() - getUrl').then(function (href) {\n        return _this6.get(href, opt_timeout);\n      });\n    }\n    /**\n     * Mixin navigation methods back into the navigation object so that\n     * they are invoked as before, i.e. driver.navigate().refresh()\n     */\n\n  }, {\n    key: \"navigate\",\n    value: function navigate() {\n      var nav = this.driver.navigate();\n      ptorMixin(nav, this, 'refresh');\n      return nav;\n    }\n    /**\n     * Browse to another page using in-page navigation.\n     *\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/tutorial');\n     * browser.setLocation('api');\n     * expect(browser.getCurrentUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     *\n     * @param {string} url In page URL using the same syntax as $location.url()\n     * @returns {!webdriver.promise.Promise} A promise that will resolve once\n     *    page has been changed.\n     */\n\n  }, {\n    key: \"setLocation\",\n    value: function setLocation(url) {\n      var _this7 = this;\n\n      return this.waitForAngular().then(function () {\n        return _this7.angularAppRoot();\n      }).then(function (rootEl) {\n        return _this7.executeScriptWithDescription(clientSideScripts.setLocation, 'Protractor.setLocation()', rootEl, url).then(function (browserErr) {\n          if (browserErr) {\n            throw 'Error while navigating to \\'' + url + '\\' : ' + JSON.stringify(browserErr);\n          }\n        });\n      });\n    }\n    /**\n     * Deprecated, use `browser.getCurrentUrl()` instead.\n     *\n     * Despite its name, this function will generally return `$location.url()`, though in some\n     * cases it will return `$location.absUrl()` instead.  This function is only here for legacy\n     * users, and will probably be removed in Protractor 6.0.\n     *\n     * @deprecated Please use `browser.getCurrentUrl()`\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/api');\n     * expect(browser.getLocationAbsUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     * @returns {webdriver.promise.Promise<string>} The current absolute url from\n     * AngularJS.\n     */\n\n  }, {\n    key: \"getLocationAbsUrl\",\n    value: function getLocationAbsUrl() {\n      var _this8 = this;\n\n      logger.warn('`browser.getLocationAbsUrl()` is deprecated, please use `browser.getCurrentUrl` instead.');\n      return this.waitForAngular().then(function () {\n        return _this8.angularAppRoot();\n      }).then(function (rootEl) {\n        return _this8.executeScriptWithDescription(clientSideScripts.getLocationAbsUrl, 'Protractor.getLocationAbsUrl()', rootEl);\n      });\n    }\n    /**\n     * Determine if the control flow is enabled.\n     *\n     * @returns true if the control flow is enabled, false otherwise.\n     */\n\n  }, {\n    key: \"controlFlowIsEnabled\",\n    value: function controlFlowIsEnabled() {\n      if (selenium_webdriver_1.promise.USE_PROMISE_MANAGER !== undefined) {\n        return selenium_webdriver_1.promise.USE_PROMISE_MANAGER;\n      } else {\n        // True for old versions of `selenium-webdriver`, probably false in >=5.0.0\n        return !!selenium_webdriver_1.promise.ControlFlow;\n      }\n    }\n  }, {\n    key: \"rootEl\",\n    set: function set(value) {\n      this.angularAppRoot(value);\n    },\n    get: function get() {\n      return this.internalRootEl;\n    }\n  }, {\n    key: \"ignoreSynchronization\",\n    set: function set(value) {\n      this.waitForAngularEnabled(!value);\n    },\n    get: function get() {\n      return this.internalIgnoreSynchronization;\n    }\n  }]);\n\n  return ProtractorBrowser;\n}(AbstractExtendedWebDriver);\n/**\n * @type {ProtractorBy}\n */\n\n\nProtractorBrowser.By = new locators_1.ProtractorBy();\nexports.ProtractorBrowser = ProtractorBrowser;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/browser.js"],"names":["Object","defineProperty","exports","value","blocking_proxy_1","require","selenium_webdriver_1","url","webdriver_js_extender_1","element_1","expectedConditions_1","locators_1","logger_1","clientSideScripts","Command","CommandName","Name","DEFER_LABEL","DEFAULT_RESET_URL","DEFAULT_GET_PAGE_TIMEOUT","logger","Logger","foo","AbstractWebDriver","AbstractExtendedWebDriver","ptorMixin","to","from","fnName","setupFn","args","arguments","i","length","ElementFinder","getWebElement","run","apply","setupResult","then","buildElementHelper","browser","element","locator","ElementArrayFinder","all","toElementFinder_","ProtractorBrowser","webdriverInstance","opt_baseUrl","opt_rootElement","opt_untrackOutstandingTimeouts","opt_blockingProxyUrl","methodsToSync","extendWDInstance","extend","e","getOwnPropertyNames","WebDriver","prototype","forEach","method","indexOf","waitForAngular","bind","driver","info","bpClient","BPClient","$","build$","By","$$","build$$","baseUrl","getPageTimeout","params","resetUrl","ng12Hybrid_","get","set","ng12Hybrid","warn","ready","angularAppRoot","getSession","session","browserName","getCapabilities","trackOutstandingTimeouts_","mockModules_","addBaseMockModules_","ExpectedConditions","ProtractorExpectedConditions","controlFlow","execute","promise","when","internalRootEl","bpCommandPromise","setWaitParams","enabled","ret","debug","setWaitEnabled","internalIgnoreSynchronization","ignoreSynchronization","useSameUrl","copyMockModules","copyConfigUpdates","script","description","scriptArgs","schedule","EXECUTE_SCRIPT","setParameter","EXECUTE_ASYNC_SCRIPT","opt_description","runWaitForAngularScript","plugins_","skipAngularStability","rootEl","executeAsyncScript_","browserErr","Error","JSON","stringify","waitForPromise","wait","waitForCondition","results","reduce","x","y","allScriptsTimeout","err","timeout","test","message","exec","errMsg","pendingTimeoutsPromise","executeScriptWithDescription","pendingHttpsPromise","getPendingHttpRequests","arr","pendingTimeouts","pendingHttps","key","pendingTasks","hasOwnProperty","push","join","getWebElements","locatorOrElement","WebElement","fromWebElement_","isPresent","name","moduleArgs","splice","map","module","addMockModule","protractorBaseModuleFn","destination","resolve","onPageLoad","msg","str","code","testForAngular","Math","floor","angularTestResult","angularVersion","ver","error","moduleNames","modulePromise","executeScriptArgs","onPageStable","opt_timeout","navigate","refresh","href","nav","setLocation","getLocationAbsUrl","USE_PROMISE_MANAGER","undefined","ControlFlow","waitForAngularEnabled","ProtractorBy"],"mappings":"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CAAyD;AAAA,uBAAM8D,OAAN;AAAA,eAAzD,CAAP;AACH;AACJ,WAPM,CAAP;AAQH,SATW,iDAS+BA,OAT/B,EAAZ;AAUA,aAAKI,6BAAL,GAAqC,CAACJ,OAAtC;AACA,eAAOC,GAAP;AACH;;AACD,aAAOhG,oBAAoB,CAAC0F,OAArB,CAA6BC,IAA7B,CAAkC,CAAC,KAAKS,qBAAxC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACyB;AACjB,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;0CAC0BC,U,EAAYC,e,EAA2C;AAAA,UAA1BC,iBAA0B,uEAAN,IAAM;AACzE,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACc;AACN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACkB;AACV;AACH;AACD;AACJ;AACA;AACA;AACA;;;;6CAC6B;AACrB;AACA;AACA,WAAKzB,cAAL,CAAoB,EAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iDACiC0B,M,EAAQC,W,EAA4B;AAC7D,UAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAC9BA,QAAAA,MAAM,GAAG,aAAaA,MAAb,GAAsB,2BAA/B;AACH;;AAH4D,wCAAZE,UAAY;AAAZA,QAAAA,UAAY;AAAA;;AAI7D,aAAO,KAAK/C,MAAL,CAAYgD,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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blocking_proxy_1 = require(\"blocking-proxy\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst url = require(\"url\");\nconst webdriver_js_extender_1 = require(\"webdriver-js-extender\");\nconst element_1 = require(\"./element\");\nconst expectedConditions_1 = require(\"./expectedConditions\");\nconst locators_1 = require(\"./locators\");\nconst logger_1 = require(\"./logger\");\nconst clientSideScripts = require('./clientsidescripts');\n// TODO: fix the typings for selenium-webdriver/lib/command\nconst Command = require('selenium-webdriver/lib/command').Command;\nconst CommandName = require('selenium-webdriver/lib/command').Name;\n// jshint browser: true\nconst DEFER_LABEL = 'NG_DEFER_BOOTSTRAP!';\nconst DEFAULT_RESET_URL = 'data:text/html,<html></html>';\nconst DEFAULT_GET_PAGE_TIMEOUT = 10000;\nlet logger = new logger_1.Logger('protractor');\n// TODO(cnishina): either remove for loop entirely since this does not export anything\n// the user might need since everything is composed (with caveat that this could be a\n// potential breaking change) or export the types with `export * from 'selenium-webdriver'`;\n/*\n * Mix in other webdriver functionality to be accessible via protractor.\n */\nfor (let foo in require('selenium-webdriver')) {\n    exports[foo] = require('selenium-webdriver')[foo];\n}\n// Explicitly define types for webdriver.WebDriver and ExtendedWebDriver.\n// We do this because we use composition over inheritance to implement polymorphism, and therefore\n// we don't want to inherit WebDriver's constructor.\nclass AbstractWebDriver {\n}\nexports.AbstractWebDriver = AbstractWebDriver;\nclass AbstractExtendedWebDriver extends AbstractWebDriver {\n}\nexports.AbstractExtendedWebDriver = AbstractExtendedWebDriver;\n/**\n * Mix a function from one object onto another. The function will still be\n * called in the context of the original object.  Any arguments of type\n * `ElementFinder` will be unwrapped to their underlying `WebElement` instance\n *\n * @private\n * @param {Object} to\n * @param {Object} from\n * @param {string} fnName\n * @param {function=} setupFn\n */\nfunction ptorMixin(to, from, fnName, setupFn) {\n    to[fnName] = function () {\n        const args = arguments;\n        for (let i = 0; i < args.length; i++) {\n            if (args[i] instanceof element_1.ElementFinder) {\n                args[i] = args[i].getWebElement();\n            }\n        }\n        const run = () => {\n            return from[fnName].apply(from, args);\n        };\n        if (setupFn) {\n            const setupResult = setupFn();\n            if (setupResult && (typeof setupResult.then === 'function')) {\n                return setupResult.then(run);\n            }\n        }\n        return run();\n    };\n}\n;\n/**\n * Build the helper 'element' function for a given instance of Browser.\n *\n * @private\n * @param {Browser} browser A browser instance.\n * @returns {function(webdriver.Locator): ElementFinder}\n */\nfunction buildElementHelper(browser) {\n    let element = ((locator) => {\n        return new element_1.ElementArrayFinder(browser).all(locator).toElementFinder_();\n    });\n    element.all = (locator) => {\n        return new element_1.ElementArrayFinder(browser).all(locator);\n    };\n    return element;\n}\n;\n/**\n * @alias browser\n * @constructor\n * @extends {webdriver_extensions.ExtendedWebDriver}\n * @param {webdriver.WebDriver} webdriver\n * @param {string=} opt_baseUrl A base URL to run get requests against.\n * @param {string|webdriver.promise.Promise<string>=} opt_rootElement  Selector element that has an\n *     ng-app in scope.\n * @param {boolean=} opt_untrackOutstandingTimeouts Whether Protractor should\n *     stop tracking outstanding $timeouts.\n */\nclass ProtractorBrowser extends AbstractExtendedWebDriver {\n    constructor(webdriverInstance, opt_baseUrl, opt_rootElement, opt_untrackOutstandingTimeouts, opt_blockingProxyUrl) {\n        super();\n        // These functions should delegate to the webdriver instance, but should\n        // wait for Angular to sync up before performing the action. This does not\n        // include functions which are overridden by protractor below.\n        let methodsToSync = ['getCurrentUrl', 'getPageSource', 'getTitle'];\n        let extendWDInstance;\n        try {\n            extendWDInstance = webdriver_js_extender_1.extend(webdriverInstance);\n        }\n        catch (e) {\n            // Probably not a driver that can be extended (e.g. gotten using\n            // `directConnect: true` in the config)\n            extendWDInstance = webdriverInstance;\n        }\n        // Mix all other driver functionality into Protractor.\n        Object.getOwnPropertyNames(selenium_webdriver_1.WebDriver.prototype).forEach(method => {\n            if (!this[method] && typeof extendWDInstance[method] === 'function') {\n                if (methodsToSync.indexOf(method) !== -1) {\n                    ptorMixin(this, extendWDInstance, method, this.waitForAngular.bind(this));\n                }\n                else {\n                    ptorMixin(this, extendWDInstance, method);\n                }\n            }\n        });\n        this.driver = extendWDInstance;\n        if (opt_blockingProxyUrl) {\n            logger.info('Starting BP client for ' + opt_blockingProxyUrl);\n            this.bpClient = new blocking_proxy_1.BPClient(opt_blockingProxyUrl);\n        }\n        this.element = buildElementHelper(this);\n        this.$ = element_1.build$(this.element, selenium_webdriver_1.By);\n        this.$$ = element_1.build$$(this.element, selenium_webdriver_1.By);\n        this.baseUrl = opt_baseUrl || '';\n        this.getPageTimeout = DEFAULT_GET_PAGE_TIMEOUT;\n        this.params = {};\n        this.resetUrl = DEFAULT_RESET_URL;\n        let ng12Hybrid_ = false;\n        Object.defineProperty(this, 'ng12Hybrid', {\n            get: function () {\n                return ng12Hybrid_;\n            },\n            set: function (ng12Hybrid) {\n                if (ng12Hybrid) {\n                    logger.warn('You have set ng12Hybrid.  As of Protractor 4.1.0, ' +\n                        'Protractor can automatically infer if you are using an ' +\n                        'ngUpgrade app (as long as ng1 is loaded before you call ' +\n                        'platformBrowserDynamic()), and this flag is no longer needed ' +\n                        'for most users');\n                }\n                ng12Hybrid_ = ng12Hybrid;\n            }\n        });\n        this.ready = this.angularAppRoot(opt_rootElement || '')\n            .then(() => {\n            return this.driver.getSession();\n        })\n            .then((session) => {\n            // Internet Explorer does not accept data URLs, which are the default\n            // reset URL for Protractor.\n            // Safari accepts data urls, but SafariDriver fails after one is used.\n            // PhantomJS produces a \"Detected a page unload event\" if we use data urls\n            let browserName = session.getCapabilities().get('browserName');\n            if (browserName === 'internet explorer' || browserName === 'safari' ||\n                browserName === 'phantomjs' || browserName === 'MicrosoftEdge') {\n                this.resetUrl = 'about:blank';\n            }\n            return this;\n        });\n        this.trackOutstandingTimeouts_ = !opt_untrackOutstandingTimeouts;\n        this.mockModules_ = [];\n        this.addBaseMockModules_();\n        // set up expected conditions\n        this.ExpectedConditions = new expectedConditions_1.ProtractorExpectedConditions(this);\n    }\n    /**\n     * The css selector for an element on which to find Angular. This is usually\n     * 'body' but if your ng-app is on a subsection of the page it may be\n     * a subelement.\n     *\n     * This property is deprecated - please use angularAppRoot() instead.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    set rootEl(value) {\n        this.angularAppRoot(value);\n    }\n    get rootEl() {\n        return this.internalRootEl;\n    }\n    /**\n     * Set the css selector for an element on which to find Angular. This is usually\n     * 'body' but if your ng-app is on a subsection of the page it may be\n     * a subelement.\n     *\n     * The change will be made within WebDriver's control flow, so that commands after\n     * this method is called use the new app root. Pass nothing to get a promise that\n     * resolves to the value of the selector.\n     *\n     * @param {string|webdriver.promise.Promise<string>} value The new selector.\n     * @returns A promise that resolves with the value of the selector.\n     */\n    angularAppRoot(value = null) {\n        return this.driver.controlFlow().execute(() => {\n            if (value != null) {\n                return selenium_webdriver_1.promise.when(value).then((value) => {\n                    this.internalRootEl = value;\n                    if (this.bpClient) {\n                        const bpCommandPromise = this.bpClient.setWaitParams(value);\n                        // Convert to webdriver promise as best as possible\n                        return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => this.internalRootEl);\n                    }\n                    return this.internalRootEl;\n                });\n            }\n            return selenium_webdriver_1.promise.when(this.internalRootEl);\n        }, `Set angular root selector to ${value}`);\n    }\n    /**\n     * If true, Protractor will not attempt to synchronize with the page before\n     * performing actions. This can be harmful because Protractor will not wait\n     * until $timeouts and $http calls have been processed, which can cause\n     * tests to become flaky. This should be used only when necessary, such as\n     * when a page continuously polls an API using $timeout.\n     *\n     * Initialized to `false` by the runner.\n     *\n     * This property is deprecated - please use waitForAngularEnabled instead.\n     *\n     * @deprecated\n     * @type {boolean}\n     */\n    set ignoreSynchronization(value) {\n        this.waitForAngularEnabled(!value);\n    }\n    get ignoreSynchronization() {\n        return this.internalIgnoreSynchronization;\n    }\n    /**\n     * If set to false, Protractor will not wait for Angular $http and $timeout\n     * tasks to complete before interacting with the browser. This can cause\n     * flaky tests, but should be used if, for instance, your app continuously\n     * polls an API with $timeout.\n     *\n     * Call waitForAngularEnabled() without passing a value to read the current\n     * state without changing it.\n     */\n    waitForAngularEnabled(enabled = null) {\n        if (enabled != null) {\n            const ret = this.driver.controlFlow().execute(() => {\n                return selenium_webdriver_1.promise.when(enabled).then((enabled) => {\n                    if (this.bpClient) {\n                        logger.debug('Setting waitForAngular' + !enabled);\n                        const bpCommandPromise = this.bpClient.setWaitEnabled(enabled);\n                        // Convert to webdriver promise as best as possible\n                        return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => enabled);\n                    }\n                });\n            }, `Set proxy synchronization enabled to ${enabled}`);\n            this.internalIgnoreSynchronization = !enabled;\n            return ret;\n        }\n        return selenium_webdriver_1.promise.when(!this.ignoreSynchronization);\n    }\n    /**\n     * Get the processed configuration object that is currently being run. This\n     * will contain the specs and capabilities properties of the current runner\n     * instance.\n     *\n     * Set by the runner.\n     *\n     * @returns {webdriver.promise.Promise} A promise which resolves to the\n     * capabilities object.\n     */\n    getProcessedConfig() {\n        return null;\n    }\n    /**\n     * Fork another instance of browser for use in interactive tests.\n     *\n     * @example\n     * // Running with control flow enabled\n     * var fork = browser.forkNewDriverInstance();\n     * fork.get('page1'); // 'page1' gotten by forked browser\n     *\n     * // Running with control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await forked.get('page1'); // 'page1' gotten by forked browser\n     *\n     * @param {boolean=} useSameUrl Whether to navigate to current url on creation\n     * @param {boolean=} copyMockModules Whether to apply same mock modules on creation\n     * @param {boolean=} copyConfigUpdates Whether to copy over changes to `baseUrl` and similar\n     *   properties initialized to values in the the config.  Defaults to `true`\n     *\n     * @returns {ProtractorBrowser} A browser instance.\n     */\n    forkNewDriverInstance(useSameUrl, copyMockModules, copyConfigUpdates = true) {\n        return null;\n    }\n    /**\n     * Restart the browser.  This is done by closing this browser instance and creating a new one.\n     * A promise resolving to the new instance is returned, and if this function was called on the\n     * global `browser` instance then Protractor will automatically overwrite the global `browser`\n     * variable.\n     *\n     * When restarting a forked browser, it is the caller's job to overwrite references to the old\n     * instance.\n     *\n     * This function behaves slightly differently depending on if the webdriver control flow is\n     * enabled.  If the control flow is enabled, the global `browser` object is synchronously\n     * replaced. If the control flow is disabled, the global `browser` is replaced asynchronously\n     * after the old driver quits.\n     *\n     * Set by the runner.\n     *\n     * @example\n     * // Running against global browser, with control flow enabled\n     * browser.get('page1');\n     * browser.restart();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against global browser, with control flow disabled\n     * await browser.get('page1');\n     * await browser.restart();\n     * await browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers, with the control flow enabled\n     * // In this case, you may prefer `restartSync` (documented below)\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork.restart().then(function(fork) {\n     *   fork.get('page2'); // 'page2' gotten by restarted fork\n     * });\n     *\n     * // Running against forked browsers, with the control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await fork.get('page1');\n     * fork = await fork.restart();\n     * await fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * // Unexpected behavior can occur if you save references to the global `browser`\n     * var savedBrowser = browser;\n     * browser.get('foo').then(function() {\n     *   console.log(browser === savedBrowser); // false\n     * });\n     * browser.restart();\n     *\n     * @returns {webdriver.promise.Promise<ProtractorBrowser>} A promise resolving to the restarted\n     *   browser\n     */\n    restart() {\n        return;\n    }\n    /**\n     * Like `restart`, but instead of returning a promise resolving to the new browser instance,\n     * returns the new browser instance directly.  Can only be used when the control flow is enabled.\n     *\n     * @example\n     * // Running against global browser\n     * browser.get('page1');\n     * browser.restartSync();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork = fork.restartSync();\n     * fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * @throws {TypeError} Will throw an error if the control flow is not enabled\n     * @returns {ProtractorBrowser} The restarted browser\n     */\n    restartSync() {\n        return;\n    }\n    /**\n     * Instead of using a single root element, search through all angular apps\n     * available on the page when finding elements or waiting for stability.\n     * Only compatible with Angular2.\n     */\n    useAllAngular2AppRoots() {\n        // The empty string is an invalid css selector, so we use it to easily\n        // signal to scripts to not find a root element.\n        this.angularAppRoot('');\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description of the command for debugging.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the scripts return value.\n     * @template T\n     */\n    executeScriptWithDescription(script, description, ...scriptArgs) {\n        if (typeof script === 'function') {\n            script = 'return (' + script + ').apply(null, arguments);';\n        }\n        return this.driver.schedule(new Command(CommandName.EXECUTE_SCRIPT)\n            .setParameter('script', script)\n            .setParameter('args', scriptArgs), description);\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeAsyncScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description for debugging purposes.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the\n     *    scripts return value.\n     * @template T\n     */\n    executeAsyncScript_(script, description, ...scriptArgs) {\n        if (typeof script === 'function') {\n            script = 'return (' + script + ').apply(null, arguments);';\n        }\n        return this.driver.schedule(new Command(CommandName.EXECUTE_ASYNC_SCRIPT)\n            .setParameter('script', script)\n            .setParameter('args', scriptArgs), description);\n    }\n    /**\n     * Instruct webdriver to wait until Angular has finished rendering and has\n     * no outstanding $http or $timeout calls before continuing.\n     * Note that Protractor automatically applies this command before every\n     * WebDriver action.\n     *\n     * @param {string=} opt_description An optional description to be added\n     *     to webdriver logs.\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to the\n     *    scripts return value.\n     */\n    waitForAngular(opt_description) {\n        let description = opt_description ? ' - ' + opt_description : '';\n        if (this.ignoreSynchronization) {\n            return this.driver.controlFlow().execute(() => {\n                return true;\n            }, 'Ignore Synchronization Protractor.waitForAngular()');\n        }\n        let runWaitForAngularScript = () => {\n            if (this.plugins_.skipAngularStability() || this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return selenium_webdriver_1.promise.when(null);\n                }, 'bpClient or plugin stability override');\n            }\n            else {\n                // Need to wrap this so that we read rootEl in the control flow, not synchronously.\n                return this.angularAppRoot().then((rootEl) => {\n                    return this.executeAsyncScript_(clientSideScripts.waitForAngular, 'Protractor.waitForAngular()' + description, rootEl);\n                });\n            }\n        };\n        return runWaitForAngularScript()\n            .then((browserErr) => {\n            if (browserErr) {\n                throw new Error('Error while waiting for Protractor to ' +\n                    'sync with the page: ' + JSON.stringify(browserErr));\n            }\n        })\n            .then(() => {\n            return this.driver.controlFlow()\n                .execute(() => {\n                return this.plugins_.waitForPromise(this);\n            }, 'Plugins.waitForPromise()')\n                .then(() => {\n                return this.driver.wait(() => {\n                    return this.plugins_.waitForCondition(this).then((results) => {\n                        return results.reduce((x, y) => x && y, true);\n                    });\n                }, this.allScriptsTimeout, 'Plugins.waitForCondition()');\n            });\n        }, (err) => {\n            let timeout;\n            if (/asynchronous script timeout/.test(err.message)) {\n                // Timeout on Chrome\n                timeout = /-?[\\d\\.]*\\ seconds/.exec(err.message);\n            }\n            else if (/Timed out waiting for async script/.test(err.message)) {\n                // Timeout on Firefox\n                timeout = /-?[\\d\\.]*ms/.exec(err.message);\n            }\n            else if (/Timed out waiting for an asynchronous script/.test(err.message)) {\n                // Timeout on Safari\n                timeout = /-?[\\d\\.]*\\ ms/.exec(err.message);\n            }\n            if (timeout) {\n                let errMsg = `Timed out waiting for asynchronous Angular tasks to finish after ` +\n                    `${timeout}. This may be because the current page is not an Angular ` +\n                    `application. Please see the FAQ for more details: ` +\n                    `https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular`;\n                if (description.indexOf(' - Locator: ') == 0) {\n                    errMsg += '\\nWhile waiting for element with locator' + description;\n                }\n                let pendingTimeoutsPromise;\n                if (this.trackOutstandingTimeouts_) {\n                    pendingTimeoutsPromise = this.executeScriptWithDescription('return window.NG_PENDING_TIMEOUTS', 'Protractor.waitForAngular() - getting pending timeouts' + description);\n                }\n                else {\n                    pendingTimeoutsPromise = selenium_webdriver_1.promise.when({});\n                }\n                let pendingHttpsPromise = this.executeScriptWithDescription(clientSideScripts.getPendingHttpRequests, 'Protractor.waitForAngular() - getting pending https' + description, this.internalRootEl);\n                return selenium_webdriver_1.promise.all([pendingTimeoutsPromise, pendingHttpsPromise])\n                    .then((arr) => {\n                    let pendingTimeouts = arr[0] || [];\n                    let pendingHttps = arr[1] || [];\n                    let key, pendingTasks = [];\n                    for (key in pendingTimeouts) {\n                        if (pendingTimeouts.hasOwnProperty(key)) {\n                            pendingTasks.push(' - $timeout: ' + pendingTimeouts[key]);\n                        }\n                    }\n                    for (key in pendingHttps) {\n                        pendingTasks.push(' - $http: ' + pendingHttps[key].url);\n                    }\n                    if (pendingTasks.length) {\n                        errMsg += '. \\nThe following tasks were pending:\\n';\n                        errMsg += pendingTasks.join('\\n');\n                    }\n                    err.message = errMsg;\n                    throw err;\n                }, () => {\n                    err.message = errMsg;\n                    throw err;\n                });\n            }\n            else {\n                throw err;\n            }\n        });\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElement\n     * @returns {!webdriver.WebElementPromise} A promise that will be resolved to\n     *      the located {@link webdriver.WebElement}.\n     */\n    findElement(locator) {\n        return this.element(locator).getWebElement();\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElements\n     * @returns {!webdriver.promise.Promise} A promise that will be resolved to an\n     *     array of the located {@link webdriver.WebElement}s.\n     */\n    findElements(locator) {\n        return this.element.all(locator).getWebElements();\n    }\n    /**\n     * Tests if an element is present on the page.\n     * @see webdriver.WebDriver.isElementPresent\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to whether\n     *     the element is present on the page.\n     */\n    isElementPresent(locatorOrElement) {\n        let element;\n        if (locatorOrElement instanceof element_1.ElementFinder) {\n            element = locatorOrElement;\n        }\n        else if (locatorOrElement instanceof selenium_webdriver_1.WebElement) {\n            element = element_1.ElementFinder.fromWebElement_(this, locatorOrElement);\n        }\n        else {\n            element = this.element(locatorOrElement);\n        }\n        return element.isPresent();\n    }\n    /**\n     * Add a module to load before Angular whenever Protractor.get is called.\n     * Modules will be registered after existing modules already on the page,\n     * so any module registered here will override preexisting modules with the\n     * same name.\n     *\n     * @example\n     * browser.addMockModule('modName', function() {\n     *   angular.module('modName', []).value('foo', 'bar');\n     * });\n     *\n     * @param {!string} name The name of the module to load or override.\n     * @param {!string|Function} script The JavaScript to load the module.\n     *     Note that this will be executed in the browser context, so it cannot\n     *     access variables from outside its scope.\n     * @param {...*} varArgs Any additional arguments will be provided to\n     *     the script and may be referenced using the `arguments` object.\n     */\n    addMockModule(name, script, ...moduleArgs) {\n        this.mockModules_.push({ name: name, script: script, args: moduleArgs });\n    }\n    /**\n     * Clear the list of registered mock modules.\n     */\n    clearMockModules() {\n        this.mockModules_ = [];\n        this.addBaseMockModules_();\n    }\n    /**\n     * Remove a registered mock module.\n     *\n     * @example\n     * browser.removeMockModule('modName');\n     *\n     * @param {!string} name The name of the module to remove.\n     */\n    removeMockModule(name) {\n        for (let i = 0; i < this.mockModules_.length; ++i) {\n            if (this.mockModules_[i].name == name) {\n                this.mockModules_.splice(i--, 1);\n            }\n        }\n    }\n    /**\n     * Get a list of the current mock modules.\n     *\n     * @returns {Array.<!string|Function>} The list of mock modules.\n     */\n    getRegisteredMockModules() {\n        return this.mockModules_.map(module => module.script);\n    }\n    ;\n    /**\n     * Add the base mock modules used for all Protractor tests.\n     *\n     * @private\n     */\n    addBaseMockModules_() {\n        this.addMockModule('protractorBaseModule_', clientSideScripts.protractorBaseModuleFn, this.trackOutstandingTimeouts_);\n    }\n    /**\n     * @see webdriver.WebDriver.get\n     *\n     * Navigate to the given destination and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @example\n     * browser.get('https://angularjs.org/');\n     * expect(browser.getCurrentUrl()).toBe('https://angularjs.org/');\n     *\n     * @param {string} destination Destination URL.\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to\n     *     start.\n     */\n    get(destination, timeout = this.getPageTimeout) {\n        destination = this.baseUrl.indexOf('file://') === 0 ? this.baseUrl + destination :\n            url.resolve(this.baseUrl, destination);\n        if (this.ignoreSynchronization) {\n            return this.driver.get(destination)\n                .then(() => this.driver.controlFlow().execute(() => this.plugins_.onPageLoad(this)))\n                .then(() => null);\n        }\n        let msg = (str) => {\n            return 'Protractor.get(' + destination + ') - ' + str;\n        };\n        return this.driver.controlFlow()\n            .execute(() => {\n            return selenium_webdriver_1.promise.when(null);\n        })\n            .then(() => {\n            if (this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return this.bpClient.setWaitEnabled(false);\n                });\n            }\n        })\n            .then(() => {\n            // Go to reset url\n            return this.driver.get(this.resetUrl);\n        })\n            .then(() => {\n            // Set defer label and navigate\n            return this.executeScriptWithDescription('window.name = \"' + DEFER_LABEL + '\" + window.name;' +\n                'window.location.replace(\"' + destination + '\");', msg('reset url'));\n        })\n            .then(() => {\n            // We need to make sure the new url has loaded before\n            // we try to execute any asynchronous scripts.\n            return this.driver.wait(() => {\n                return this.executeScriptWithDescription('return window.location.href;', msg('get url'))\n                    .then((url) => {\n                    return url !== this.resetUrl;\n                }, (err) => {\n                    if (err.code == 13 || err.name === 'JavascriptError') {\n                        // Ignore the error, and continue trying. This is\n                        // because IE driver sometimes (~1%) will throw an\n                        // unknown error from this execution. See\n                        // https://github.com/angular/protractor/issues/841\n                        // This shouldn't mask errors because it will fail\n                        // with the timeout anyway.\n                        return false;\n                    }\n                    else {\n                        throw err;\n                    }\n                });\n            }, timeout, 'waiting for page to load for ' + timeout + 'ms');\n        })\n            .then(() => {\n            // Run Plugins\n            return this.driver.controlFlow().execute(() => {\n                return this.plugins_.onPageLoad(this);\n            });\n        })\n            .then(() => {\n            // Make sure the page is an Angular page.\n            return this\n                .executeAsyncScript_(clientSideScripts.testForAngular, msg('test for angular'), Math.floor(timeout / 1000), this.ng12Hybrid)\n                .then((angularTestResult) => {\n                let angularVersion = angularTestResult.ver;\n                if (!angularVersion) {\n                    let message = angularTestResult.message;\n                    logger.error(`Could not find Angular on page ${destination} : ${message}`);\n                    throw new Error(`Angular could not be found on the page ${destination}. ` +\n                        `If this is not an Angular application, you may need to turn off waiting for Angular.\n                          Please see \n                          https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular-on-page-load`);\n                }\n                return angularVersion;\n            }, (err) => {\n                throw new Error('Error while running testForAngular: ' + err.message);\n            });\n        })\n            .then((angularVersion) => {\n            // Load Angular Mocks\n            if (angularVersion === 1) {\n                // At this point, Angular will pause for us until angular.resumeBootstrap is called.\n                let moduleNames = [];\n                let modulePromise = selenium_webdriver_1.promise.when(null);\n                for (const { name, script, args } of this.mockModules_) {\n                    moduleNames.push(name);\n                    let executeScriptArgs = [script, msg('add mock module ' + name), ...args];\n                    modulePromise = modulePromise.then(() => this.executeScriptWithDescription.apply(this, executeScriptArgs)\n                        .then(null, (err) => {\n                        throw new Error('Error while running module script ' + name + ': ' + err.message);\n                    }));\n                }\n                return modulePromise.then(() => this.executeScriptWithDescription('window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__ = ' +\n                    'angular.resumeBootstrap(arguments[0]);', msg('resume bootstrap'), moduleNames));\n            }\n            else {\n                // TODO: support mock modules in Angular2. For now, error if someone\n                // has tried to use one.\n                if (this.mockModules_.length > 1) {\n                    throw 'Trying to load mock modules on an Angular v2+ app is not yet supported.';\n                }\n            }\n        })\n            .then(() => {\n            // Reset bpClient sync\n            if (this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return this.bpClient.setWaitEnabled(!this.internalIgnoreSynchronization);\n                });\n            }\n        })\n            .then(() => {\n            // Run Plugins\n            return this.driver.controlFlow().execute(() => {\n                return this.plugins_.onPageStable(this);\n            });\n        })\n            .then(() => null);\n    }\n    /**\n     * @see webdriver.WebDriver.refresh\n     *\n     * Makes a full reload of the current page and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to start.\n     */\n    refresh(opt_timeout) {\n        if (this.ignoreSynchronization) {\n            return this.driver.navigate().refresh();\n        }\n        return this\n            .executeScriptWithDescription('return window.location.href', 'Protractor.refresh() - getUrl')\n            .then((href) => {\n            return this.get(href, opt_timeout);\n        });\n    }\n    /**\n     * Mixin navigation methods back into the navigation object so that\n     * they are invoked as before, i.e. driver.navigate().refresh()\n     */\n    navigate() {\n        let nav = this.driver.navigate();\n        ptorMixin(nav, this, 'refresh');\n        return nav;\n    }\n    /**\n     * Browse to another page using in-page navigation.\n     *\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/tutorial');\n     * browser.setLocation('api');\n     * expect(browser.getCurrentUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     *\n     * @param {string} url In page URL using the same syntax as $location.url()\n     * @returns {!webdriver.promise.Promise} A promise that will resolve once\n     *    page has been changed.\n     */\n    setLocation(url) {\n        return this.waitForAngular()\n            .then(() => this.angularAppRoot())\n            .then((rootEl) => this.executeScriptWithDescription(clientSideScripts.setLocation, 'Protractor.setLocation()', rootEl, url)\n            .then((browserErr) => {\n            if (browserErr) {\n                throw 'Error while navigating to \\'' + url +\n                    '\\' : ' + JSON.stringify(browserErr);\n            }\n        }));\n    }\n    /**\n     * Deprecated, use `browser.getCurrentUrl()` instead.\n     *\n     * Despite its name, this function will generally return `$location.url()`, though in some\n     * cases it will return `$location.absUrl()` instead.  This function is only here for legacy\n     * users, and will probably be removed in Protractor 6.0.\n     *\n     * @deprecated Please use `browser.getCurrentUrl()`\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/api');\n     * expect(browser.getLocationAbsUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     * @returns {webdriver.promise.Promise<string>} The current absolute url from\n     * AngularJS.\n     */\n    getLocationAbsUrl() {\n        logger.warn('`browser.getLocationAbsUrl()` is deprecated, please use `browser.getCurrentUrl` instead.');\n        return this.waitForAngular()\n            .then(() => this.angularAppRoot())\n            .then((rootEl) => this.executeScriptWithDescription(clientSideScripts.getLocationAbsUrl, 'Protractor.getLocationAbsUrl()', rootEl));\n    }\n    /**\n     * Determine if the control flow is enabled.\n     *\n     * @returns true if the control flow is enabled, false otherwise.\n     */\n    controlFlowIsEnabled() {\n        if (selenium_webdriver_1.promise.USE_PROMISE_MANAGER !== undefined) {\n            return selenium_webdriver_1.promise.USE_PROMISE_MANAGER;\n        }\n        else {\n            // True for old versions of `selenium-webdriver`, probably false in >=5.0.0\n            return !!selenium_webdriver_1.promise.ControlFlow;\n        }\n    }\n}\n/**\n * @type {ProtractorBy}\n */\nProtractorBrowser.By = new locators_1.ProtractorBy();\nexports.ProtractorBrowser = ProtractorBrowser;\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"script"}