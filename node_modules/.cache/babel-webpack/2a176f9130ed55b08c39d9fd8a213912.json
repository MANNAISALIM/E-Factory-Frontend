{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar http = require('selenium-webdriver/http');\n\nvar logger = new logger_1.Logger('attachSession');\n\nvar AttachSession = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(AttachSession, _driverProvider_1$Dri);\n\n  var _super = _createSuper(AttachSession);\n\n  function AttachSession(config) {\n    _classCallCheck(this, AttachSession);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  _createClass(AttachSession, [{\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n      logger.info('Using session id - ' + this.config_.seleniumSessionId);\n      return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var httpClient = new http.HttpClient(this.config_.seleniumAddress);\n      var executor = new http.Executor(httpClient);\n      var newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n      this.drivers_.push(newDriver);\n      return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"quitDriver\",\n    value: function quitDriver() {\n      return selenium_webdriver_1.promise.when(undefined);\n    }\n  }]);\n\n  return AttachSession;\n}(driverProvider_1.DriverProvider);\n\nexports.AttachSession = AttachSession;","map":{"version":3,"sources":["C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/protractor/built/driverProviders/attachSession.js"],"names":["Object","defineProperty","exports","value","q","require","selenium_webdriver_1","logger_1","driverProvider_1","http","logger","Logger","AttachSession","config","info","config_","seleniumAddress","seleniumSessionId","undefined","httpClient","HttpClient","executor","Executor","newDriver","WebDriver","attachToSession","drivers_","push","promise","when","DriverProvider"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,oBAAD,CAApC;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,kBAAD,CAAhC;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,yBAAD,CAApB;;AACA,IAAIK,MAAM,GAAG,IAAIH,QAAQ,CAACI,MAAb,CAAoB,eAApB,CAAb;;IACMC,a;;;;;AACF,yBAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACVA,MADU;AAEnB;AACD;AACJ;AACA;AACA;AACA;;;;;qCACqB;AACbH,MAAAA,MAAM,CAACI,IAAP,CAAY,kCAAkC,KAAKC,OAAL,CAAaC,eAA3D;AACAN,MAAAA,MAAM,CAACI,IAAP,CAAY,wBAAwB,KAAKC,OAAL,CAAaE,iBAAjD;AACA,aAAOb,CAAC,CAACc,SAAD,CAAR;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;mCACmB;AACX,UAAMC,UAAU,GAAG,IAAIV,IAAI,CAACW,UAAT,CAAoB,KAAKL,OAAL,CAAaC,eAAjC,CAAnB;AACA,UAAMK,QAAQ,GAAG,IAAIZ,IAAI,CAACa,QAAT,CAAkBH,UAAlB,CAAjB;AACA,UAAMI,SAAS,GAAGjB,oBAAoB,CAACkB,SAArB,CAA+BC,eAA/B,CAA+CJ,QAA/C,EAAyD,KAAKN,OAAL,CAAaE,iBAAtE,CAAlB;AACA,WAAKS,QAAL,CAAcC,IAAd,CAAmBJ,SAAnB;AACA,aAAOA,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;iCACiB;AACT,aAAOjB,oBAAoB,CAACsB,OAArB,CAA6BC,IAA7B,CAAkCX,SAAlC,CAAP;AACH;;;;EAlCuBV,gBAAgB,CAACsB,c;;AAoC7C5B,OAAO,CAACU,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst http = require('selenium-webdriver/http');\nlet logger = new logger_1.Logger('attachSession');\nclass AttachSession extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n        logger.info('Using session id - ' + this.config_.seleniumSessionId);\n        return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n    getNewDriver() {\n        const httpClient = new http.HttpClient(this.config_.seleniumAddress);\n        const executor = new http.Executor(httpClient);\n        const newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n        this.drivers_.push(newDriver);\n        return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n    quitDriver() {\n        return selenium_webdriver_1.promise.when(undefined);\n    }\n}\nexports.AttachSession = AttachSession;\n//# sourceMappingURL=attachSession.js.map"]},"metadata":{},"sourceType":"script"}