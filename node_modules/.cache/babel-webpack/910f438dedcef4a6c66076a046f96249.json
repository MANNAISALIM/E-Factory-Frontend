{"ast":null,"code":"import _classCallCheck from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ClipboardService = /*#__PURE__*/function () {\n  function ClipboardService(document, window) {\n    _classCallCheck(this, ClipboardService);\n\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n\n  _createClass(ClipboardService, [{\n    key: \"configure\",\n    value: function configure(config) {\n      this.config = config;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(content) {\n      if (!this.isSupported || !content) {\n        return this.pushCopyResponse({\n          isSuccess: false,\n          content: content\n        });\n      }\n\n      var copyResult = this.copyFromContent(content);\n\n      if (copyResult) {\n        return this.pushCopyResponse({\n          content: content,\n          isSuccess: copyResult\n        });\n      }\n\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content: content\n      });\n    }\n  }, {\n    key: \"isTargetValid\",\n    value: function isTargetValid(element) {\n      if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n        if (element.hasAttribute('disabled')) {\n          throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n        }\n\n        return true;\n      }\n\n      throw new Error('Target should be input or textarea');\n    }\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\n\n  }, {\n    key: \"copyFromInputElement\",\n    value: function copyFromInputElement(targetElm) {\n      var isFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      try {\n        this.selectTarget(targetElm);\n        var re = this.copyText();\n        this.clearSelection(isFocus ? targetElm : undefined, this.window);\n        return re && this.isCopySuccessInIE11();\n      } catch (error) {\n        return false;\n      }\n    }\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\n\n  }, {\n    key: \"isCopySuccessInIE11\",\n    value: function isCopySuccessInIE11() {\n      var clipboardData = this.window['clipboardData'];\n\n      if (clipboardData && clipboardData.getData) {\n        if (!clipboardData.getData('Text')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\n\n  }, {\n    key: \"copyFromContent\",\n    value: function copyFromContent(content) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.document.body;\n\n      // check if the temp textarea still belongs to the current container.\n      // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n      if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      if (!this.tempTextArea) {\n        this.tempTextArea = this.createTempTextArea(this.document, this.window);\n\n        try {\n          container.appendChild(this.tempTextArea);\n        } catch (error) {\n          throw new Error('Container should be a Dom element');\n        }\n      }\n\n      this.tempTextArea.value = content;\n      var toReturn = this.copyFromInputElement(this.tempTextArea, false);\n\n      if (this.config.cleanUpAfterCopy) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      return toReturn;\n    }\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.document.body;\n\n      if (this.tempTextArea) {\n        container.removeChild(this.tempTextArea); // removeChild doesn't remove the reference from memory\n\n        this.tempTextArea = undefined;\n      }\n    }\n    /**\r\n     * Select the target html input element.\r\n     */\n\n  }, {\n    key: \"selectTarget\",\n    value: function selectTarget(inputElement) {\n      inputElement.select();\n      inputElement.setSelectionRange(0, inputElement.value.length);\n      return inputElement.value.length;\n    }\n  }, {\n    key: \"copyText\",\n    value: function copyText() {\n      return this.document.execCommand('copy');\n    }\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection(inputElement, window) {\n      var _a;\n\n      inputElement && inputElement.focus();\n      (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    }\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\n\n  }, {\n    key: \"createTempTextArea\",\n    value: function createTempTextArea(doc, window) {\n      var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n      var ta;\n      ta = doc.createElement('textarea'); // Prevent zooming on iOS\n\n      ta.style.fontSize = '12pt'; // Reset box model\n\n      ta.style.border = '0';\n      ta.style.padding = '0';\n      ta.style.margin = '0'; // Move element out of screen horizontally\n\n      ta.style.position = 'absolute';\n      ta.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n      var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n      ta.style.top = yPosition + 'px';\n      ta.setAttribute('readonly', '');\n      return ta;\n    }\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\n\n  }, {\n    key: \"pushCopyResponse\",\n    value: function pushCopyResponse(response) {\n      this.copySubject.next(response);\n    }\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\n\n  }, {\n    key: \"pushCopyReponse\",\n    value: function pushCopyReponse(response) {\n      this.pushCopyResponse(response);\n    }\n  }, {\n    key: \"isSupported\",\n    get: function get() {\n      return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n  }]);\n\n  return ClipboardService;\n}();\n\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8));\n};\n\nClipboardService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [WINDOW]\n    }]\n  }];\n};\n\nClipboardService.ɵprov = ɵɵdefineInjectable({\n  factory: function ClipboardService_Factory() {\n    return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8));\n  },\n  token: ClipboardService,\n  providedIn: \"root\"\n});\nClipboardService = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))], ClipboardService);\n\nvar ClipboardDirective = /*#__PURE__*/function () {\n  function ClipboardDirective(clipboardSrv) {\n    _classCallCheck(this, ClipboardDirective);\n\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n  } // tslint:disable-next-line:no-empty\n\n\n  _createClass(ClipboardDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {}\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.clipboardSrv.destroy(this.container);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    }\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\n\n  }, {\n    key: \"handleResult\",\n    value: function handleResult(succeeded, copiedContent, event) {\n      var response = {\n        isSuccess: succeeded,\n        event: event\n      };\n\n      if (succeeded) {\n        response = Object.assign(response, {\n          content: copiedContent,\n          successMessage: this.cbSuccessMsg\n        });\n        this.cbOnSuccess.emit(response);\n      } else {\n        this.cbOnError.emit(response);\n      }\n\n      this.clipboardSrv.pushCopyResponse(response);\n    }\n  }]);\n\n  return ClipboardDirective;\n}();\n\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n};\n\nClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event.target);\n      });\n    }\n  },\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n\nClipboardDirective.ctorParameters = function () {\n  return [{\n    type: ClipboardService\n  }];\n};\n\n__decorate([Input('ngxClipboard')], ClipboardDirective.prototype, \"targetElm\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"container\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbContent\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnError\", void 0);\n\n__decorate([HostListener('click', ['$event.target'])], ClipboardDirective.prototype, \"onClick\", null);\n\nvar ClipboardIfSupportedDirective = /*#__PURE__*/function () {\n  function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {\n    _classCallCheck(this, ClipboardIfSupportedDirective);\n\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n\n  _createClass(ClipboardIfSupportedDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._clipboardService.isSupported) {\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n      }\n    }\n  }]);\n\n  return ClipboardIfSupportedDirective;\n}();\n\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nClipboardIfSupportedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n\nClipboardIfSupportedDirective.ctorParameters = function () {\n  return [{\n    type: ClipboardService\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }];\n};\n\nvar ClipboardModule = function ClipboardModule() {\n  _classCallCheck(this, ClipboardModule);\n};\n\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  },\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }];\n  }, {\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.target']]\n    }],\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: function declarations() {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };","map":{"version":3,"sources":["ngx-clipboard/lib/ngx-clipboard.service.ts","ngx-clipboard/lib/ngx-clipboard.directive.ts","ngx-clipboard/lib/ngx-clipboard-if-supported.directive.ts","ngx-clipboard/lib/ngx-clipboard.module.ts","ngx-clipboard/public_api.ts","ngx-clipboard/ngx-clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { ClipboardParams, IClipboardResponse } from './interface';\r\n\r\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    private config: ClipboardParams = {};\r\n\r\n    constructor(@Inject(DOCUMENT) public document: any, @Optional() @Inject(WINDOW) private window: any) {}\r\n\r\n    public configure(config: ClipboardParams) {\r\n        this.config = config;\r\n    }\r\n\r\n    public copy(content: string): void {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    public isCopySuccessInIE11(): boolean {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    public destroy(container: HTMLElement = this.document.body): void {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection()?.removeAllRanges();\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyResponse(response: IClipboardResponse): void {\r\n        this.copySubject.next(response);\r\n    }\r\n\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse): void {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\r\n    @Input()\r\n    public container: HTMLElement;\r\n\r\n    @Input()\r\n    public cbContent: string | undefined;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(\r\n        private _clipboardService: ClipboardService,\r\n        private _viewContainerRef: ViewContainerRef,\r\n        private _templateRef: TemplateRef<any>\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n","/*\r\n * Public API Surface of ngx-clipboard\r\n */\r\n\r\nexport * from './lib/ngx-clipboard.service';\r\nexport * from './lib/ngx-clipboard.directive';\r\nexport * from './lib/ngx-clipboard.module';\r\nexport * from './lib/ngx-clipboard-if-supported.directive';\r\nexport * from './lib/interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}