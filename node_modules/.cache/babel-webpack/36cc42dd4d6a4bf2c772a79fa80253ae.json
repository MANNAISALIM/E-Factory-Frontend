{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar options_1 = require(\"./options\");\n/**\n * A program has a command, a description, options, and a run method\n */\n\n\nvar Program = /*#__PURE__*/function () {\n  function Program() {\n    _classCallCheck(this, Program);\n\n    this.options = {};\n  }\n  /**\n   * Register a command and the description.\n   * @param cmd The command.\n   * @param cmdDescription The description of the command.\n   * @returns The program for method chaining.\n   */\n\n\n  _createClass(Program, [{\n    key: \"command\",\n    value: function command(cmd, cmdDescription) {\n      this.cmd = cmd;\n      this.cmdDescription = cmdDescription;\n      return this;\n    }\n    /**\n     * Register a new option.\n     * @param opt The option.\n     * @param description The description of the option.\n     * @param type The type of value expected: boolean, number, or string\n     * @param defaultValue The option's default value.\n     * @returns The program for method chaining.\n     */\n\n  }, {\n    key: \"option\",\n    value: function option(opt, description, type, opt_defaultValue) {\n      this.options[opt] = new options_1.Option(opt, description, type, opt_defaultValue);\n      return this;\n    }\n    /**\n     * Adds an option to the program.\n     * @param option The option.\n     * @returns The program for method chaining.\n     */\n\n  }, {\n    key: \"addOption\",\n    value: function addOption(option) {\n      this.options[option.opt] = option;\n      return this;\n    }\n    /**\n     * Registers a method that will be used to run the program.\n     * @param runMethod The method that will be used to run the program.\n     * @returns The program for method chaining.\n     */\n\n  }, {\n    key: \"action\",\n    value: function action(runMethod) {\n      this.runMethod = runMethod;\n      return this;\n    }\n    /**\n     * Adds the value to the options and passes the updated options to the run\n     * method.\n     * @param args The arguments that will be parsed to run the method.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(json) {\n      for (var opt in this.options) {\n        this.options[opt].value = this.getValue_(opt, json);\n      }\n\n      return Promise.resolve(this.runMethod(this.options));\n    }\n  }, {\n    key: \"getValue_\",\n    value: function getValue_(key, json) {\n      var keyList = key.split('.');\n      var tempJson = json;\n\n      while (keyList.length > 0) {\n        var keyItem = keyList[0];\n\n        if (tempJson[keyItem] != null) {\n          tempJson = tempJson[keyItem];\n          keyList = keyList.slice(1);\n        } else {\n          return undefined;\n        }\n      }\n\n      return tempJson;\n    }\n    /**\n     * Prints the command with the description. The description will have spaces\n     * between the cmd so that the starting position is \"posDescription\". If the\n     * gap between the cmd and the description is less than MIN_SPACING or\n     * posDescription is undefined, the spacing will be MIN_SPACING.\n     *\n     * @param opt_postDescription Starting position of the description.\n     */\n\n  }, {\n    key: \"printCmd\",\n    value: function printCmd(opt_posDescription) {\n      var log = '  ' + this.cmd;\n      var spacing = Program.MIN_SPACING;\n\n      if (opt_posDescription) {\n        var diff = opt_posDescription - log.length;\n\n        if (diff < Program.MIN_SPACING) {\n          spacing = Program.MIN_SPACING;\n        } else {\n          spacing = diff;\n        }\n      }\n\n      log += Array(spacing).join(' ') + this.cmdDescription;\n      console.log(log);\n    }\n    /**\n     * Prints the options with the option descriptions and default values.\n     * The posDescription and posDefault is the starting position for the option\n     * description. If extOptions are provided, check to see if we have already\n     * printed those options. Also, once we print the option, add them to the extOptions.\n     *\n     * @param posDescription Position to start logging the description.\n     * @param posDefault Position to start logging the default value.\n     * @param opt_extOptions A collection of options that will be updated.\n     */\n\n  }, {\n    key: \"printOptions\",\n    value: function printOptions(posDescription, posDefault, opt_extOptions) {\n      for (var opt in this.options) {\n        // we have already logged it\n        if (opt_extOptions && opt_extOptions[opt]) {\n          continue;\n        }\n\n        var option = this.options[opt];\n        var log = '  --' + option.opt;\n        var spacing = Program.MIN_SPACING; // description\n\n        var diff = posDescription - log.length;\n\n        if (diff < Program.MIN_SPACING) {\n          spacing = Program.MIN_SPACING;\n        } else {\n          spacing = diff;\n        }\n\n        log += Array(spacing).join(' ') + option.description; // default value\n\n        if (option.defaultValue) {\n          spacing = Program.MIN_SPACING;\n\n          var _diff = posDefault - log.length - 1;\n\n          if (_diff <= Program.MIN_SPACING) {\n            spacing = Program.MIN_SPACING;\n          } else {\n            spacing = _diff;\n          }\n\n          log += Array(spacing).join(' ');\n          log += '[default: ' + option.defaultValue + ']';\n        }\n\n        console.log(log);\n\n        if (opt_extOptions) {\n          opt_extOptions[option.opt] = option;\n        }\n      }\n    }\n    /**\n     * Assuming that the this program can run by itself, to print out the program's\n     * help. Also assuming that the commands are called cmd-run and cmd-help.\n     */\n\n  }, {\n    key: \"printHelp\",\n    value: function printHelp() {\n      console.log('\\n' + 'Usage:        ' + this.cmd + ' [options]\\n' + '              ' + this.cmd + ' help\\n' + 'Description:  ' + this.cmdDescription + '\\n');\n      console.log('Options:');\n      this.printOptions(this.posDescription(), this.posDefault());\n    }\n  }, {\n    key: \"posDescription\",\n    value: function posDescription() {\n      return this.lengthOf_('opt') + 2 * Program.MIN_SPACING;\n    }\n  }, {\n    key: \"posDefault\",\n    value: function posDefault() {\n      return this.posDescription() + this.lengthOf_('description') + Program.MIN_SPACING;\n    }\n  }, {\n    key: \"lengthOf_\",\n    value: function lengthOf_(param) {\n      var maxLength = -1;\n\n      for (var opt in this.options) {\n        var option = this.options[opt];\n\n        if (param === 'description') {\n          maxLength = Math.max(maxLength, option.description.length);\n        } else if (param === 'opt') {\n          maxLength = Math.max(maxLength, option.opt.length);\n        }\n      }\n\n      return maxLength;\n    }\n    /**\n     * Create a collection of options used by this program.\n     * @returns The options used in the programs.\n     */\n\n  }, {\n    key: \"getOptions_\",\n    value: function getOptions_(allOptions) {\n      for (var opt in this.options) {\n        allOptions[opt] = this.options[opt];\n      }\n\n      return allOptions;\n    }\n    /**\n     * Get the options used by the program and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n\n  }, {\n    key: \"getMinimistOptions\",\n    value: function getMinimistOptions() {\n      var allOptions = {};\n      allOptions = this.getOptions_(allOptions);\n      var minimistOptions = {};\n      var minimistBoolean = [];\n      var minimistString = [];\n      var minimistNumber = [];\n      var minimistDefault = {};\n\n      for (var opt in allOptions) {\n        var option = allOptions[opt];\n\n        if (option.type === 'boolean') {\n          minimistBoolean.push(option.opt);\n        } else if (option.type === 'string') {\n          minimistString.push(option.opt);\n        } else if (option.type === 'number') {\n          minimistNumber.push(option.opt);\n        }\n\n        if (typeof option.defaultValue !== 'undefined') {\n          minimistDefault[option.opt] = option.defaultValue;\n        }\n      }\n\n      minimistOptions['boolean'] = minimistBoolean;\n      minimistOptions['string'] = minimistString;\n      minimistOptions['number'] = minimistNumber;\n      minimistOptions['default'] = minimistDefault;\n      return minimistOptions;\n    }\n  }]);\n\n  return Program;\n}();\n\nProgram.MIN_SPACING = 4;\nexports.Program = Program;","map":{"version":3,"sources":["../../../lib/cli/programs.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst options_1 = require(\"./options\");\n/**\n * A program has a command, a description, options, and a run method\n */\nclass Program {\n    constructor() {\n        this.options = {};\n    }\n    /**\n     * Register a command and the description.\n     * @param cmd The command.\n     * @param cmdDescription The description of the command.\n     * @returns The program for method chaining.\n     */\n    command(cmd, cmdDescription) {\n        this.cmd = cmd;\n        this.cmdDescription = cmdDescription;\n        return this;\n    }\n    /**\n     * Register a new option.\n     * @param opt The option.\n     * @param description The description of the option.\n     * @param type The type of value expected: boolean, number, or string\n     * @param defaultValue The option's default value.\n     * @returns The program for method chaining.\n     */\n    option(opt, description, type, opt_defaultValue) {\n        this.options[opt] = new options_1.Option(opt, description, type, opt_defaultValue);\n        return this;\n    }\n    /**\n     * Adds an option to the program.\n     * @param option The option.\n     * @returns The program for method chaining.\n     */\n    addOption(option) {\n        this.options[option.opt] = option;\n        return this;\n    }\n    /**\n     * Registers a method that will be used to run the program.\n     * @param runMethod The method that will be used to run the program.\n     * @returns The program for method chaining.\n     */\n    action(runMethod) {\n        this.runMethod = runMethod;\n        return this;\n    }\n    /**\n     * Adds the value to the options and passes the updated options to the run\n     * method.\n     * @param args The arguments that will be parsed to run the method.\n     */\n    run(json) {\n        for (let opt in this.options) {\n            this.options[opt].value = this.getValue_(opt, json);\n        }\n        return Promise.resolve(this.runMethod(this.options));\n    }\n    getValue_(key, json) {\n        let keyList = key.split('.');\n        let tempJson = json;\n        while (keyList.length > 0) {\n            let keyItem = keyList[0];\n            if (tempJson[keyItem] != null) {\n                tempJson = tempJson[keyItem];\n                keyList = keyList.slice(1);\n            }\n            else {\n                return undefined;\n            }\n        }\n        return tempJson;\n    }\n    /**\n     * Prints the command with the description. The description will have spaces\n     * between the cmd so that the starting position is \"posDescription\". If the\n     * gap between the cmd and the description is less than MIN_SPACING or\n     * posDescription is undefined, the spacing will be MIN_SPACING.\n     *\n     * @param opt_postDescription Starting position of the description.\n     */\n    printCmd(opt_posDescription) {\n        let log = '  ' + this.cmd;\n        let spacing = Program.MIN_SPACING;\n        if (opt_posDescription) {\n            let diff = opt_posDescription - log.length;\n            if (diff < Program.MIN_SPACING) {\n                spacing = Program.MIN_SPACING;\n            }\n            else {\n                spacing = diff;\n            }\n        }\n        log += Array(spacing).join(' ') + this.cmdDescription;\n        console.log(log);\n    }\n    /**\n     * Prints the options with the option descriptions and default values.\n     * The posDescription and posDefault is the starting position for the option\n     * description. If extOptions are provided, check to see if we have already\n     * printed those options. Also, once we print the option, add them to the extOptions.\n     *\n     * @param posDescription Position to start logging the description.\n     * @param posDefault Position to start logging the default value.\n     * @param opt_extOptions A collection of options that will be updated.\n     */\n    printOptions(posDescription, posDefault, opt_extOptions) {\n        for (let opt in this.options) {\n            // we have already logged it\n            if (opt_extOptions && opt_extOptions[opt]) {\n                continue;\n            }\n            let option = this.options[opt];\n            let log = '  --' + option.opt;\n            let spacing = Program.MIN_SPACING;\n            // description\n            let diff = posDescription - log.length;\n            if (diff < Program.MIN_SPACING) {\n                spacing = Program.MIN_SPACING;\n            }\n            else {\n                spacing = diff;\n            }\n            log += Array(spacing).join(' ') + option.description;\n            // default value\n            if (option.defaultValue) {\n                spacing = Program.MIN_SPACING;\n                let diff = posDefault - log.length - 1;\n                if (diff <= Program.MIN_SPACING) {\n                    spacing = Program.MIN_SPACING;\n                }\n                else {\n                    spacing = diff;\n                }\n                log += Array(spacing).join(' ');\n                log += '[default: ' + option.defaultValue + ']';\n            }\n            console.log(log);\n            if (opt_extOptions) {\n                opt_extOptions[option.opt] = option;\n            }\n        }\n    }\n    /**\n     * Assuming that the this program can run by itself, to print out the program's\n     * help. Also assuming that the commands are called cmd-run and cmd-help.\n     */\n    printHelp() {\n        console.log('\\n' +\n            'Usage:        ' + this.cmd + ' [options]\\n' +\n            '              ' + this.cmd + ' help\\n' +\n            'Description:  ' + this.cmdDescription + '\\n');\n        console.log('Options:');\n        this.printOptions(this.posDescription(), this.posDefault());\n    }\n    posDescription() {\n        return this.lengthOf_('opt') + 2 * Program.MIN_SPACING;\n    }\n    posDefault() {\n        return this.posDescription() + this.lengthOf_('description') + Program.MIN_SPACING;\n    }\n    lengthOf_(param) {\n        let maxLength = -1;\n        for (let opt in this.options) {\n            let option = this.options[opt];\n            if (param === 'description') {\n                maxLength = Math.max(maxLength, option.description.length);\n            }\n            else if (param === 'opt') {\n                maxLength = Math.max(maxLength, option.opt.length);\n            }\n        }\n        return maxLength;\n    }\n    /**\n     * Create a collection of options used by this program.\n     * @returns The options used in the programs.\n     */\n    getOptions_(allOptions) {\n        for (let opt in this.options) {\n            allOptions[opt] = this.options[opt];\n        }\n        return allOptions;\n    }\n    /**\n     * Get the options used by the program and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n    getMinimistOptions() {\n        let allOptions = {};\n        allOptions = this.getOptions_(allOptions);\n        let minimistOptions = {};\n        let minimistBoolean = [];\n        let minimistString = [];\n        let minimistNumber = [];\n        let minimistDefault = {};\n        for (let opt in allOptions) {\n            let option = allOptions[opt];\n            if (option.type === 'boolean') {\n                minimistBoolean.push(option.opt);\n            }\n            else if (option.type === 'string') {\n                minimistString.push(option.opt);\n            }\n            else if (option.type === 'number') {\n                minimistNumber.push(option.opt);\n            }\n            if (typeof option.defaultValue !== 'undefined') {\n                minimistDefault[option.opt] = option.defaultValue;\n            }\n        }\n        minimistOptions['boolean'] = minimistBoolean;\n        minimistOptions['string'] = minimistString;\n        minimistOptions['number'] = minimistNumber;\n        minimistOptions['default'] = minimistDefault;\n        return minimistOptions;\n    }\n}\nProgram.MIN_SPACING = 4;\nexports.Program = Program;\n//# sourceMappingURL=programs.js.map"]},"metadata":{},"sourceType":"script"}