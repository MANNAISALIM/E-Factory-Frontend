{"ast":null,"code":"import _createClass from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/NeverMind/IntelliJIDEAProjects/argon-dashboard-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Component, EventEmitter, Injector, Directive, ViewContainerRef, ElementRef, ComponentFactoryResolver, Renderer2, Input, Output, HostListener, InjectionToken, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { positionElements } from 'positioning';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template_button_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      var options_r3 = ɵngcc0.ɵɵnextContext().options;\n      return options_r3.onCancel({\n        clickEvent: $event\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var options_r3 = ɵngcc0.ɵɵnextContext().options;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(\"btn btn-block btn-\" + options_r3.cancelButtonType);\n    ɵngcc0.ɵɵproperty(\"mwlFocus\", options_r3.focusButton === \"cancel\")(\"innerHtml\", options_r3.cancelText, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template_button_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var options_r3 = ɵngcc0.ɵɵnextContext().options;\n      return options_r3.onConfirm({\n        clickEvent: $event\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var options_r3 = ɵngcc0.ɵɵnextContext().options;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(\"btn btn-block btn-\" + options_r3.confirmButtonType);\n    ɵngcc0.ɵɵproperty(\"mwlFocus\", options_r3.focusButton === \"confirm\")(\"innerHtml\", options_r3.confirmText, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nvar _c0 = function _c0(a1, a2, a3, a4) {\n  return [\"popover\", a1, a2, a3, a4];\n};\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelement(1, \"div\", 3);\n    ɵngcc0.ɵɵelement(2, \"h3\", 4);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 5);\n    ɵngcc0.ɵɵelement(4, \"p\", 6);\n    ɵngcc0.ɵɵelementStart(5, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(6, ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template, 2, 4, \"div\", 8);\n    ɵngcc0.ɵɵtemplate(7, ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template, 2, 4, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var options_r3 = ctx.options;\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(7, _c0, options_r3.placement, \"popover-\" + options_r3.placement, \"bs-popover-\" + options_r3.placement, options_r3.popoverClass));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", options_r3.popoverTitle, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", options_r3.popoverMessage, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"confirm-btns-reversed\", options_r3.reverseButtonOrder);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !options_r3.hideCancelButton);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !options_r3.hideConfirmButton);\n  }\n}\n\nfunction ConfirmationPopoverWindowComponent_ng_template_2_Template(rf, ctx) {}\n\nvar _c1 = function _c1(a0) {\n  return {\n    options: a0\n  };\n};\n\nvar ConfirmationPopoverOptions = function ConfirmationPopoverOptions() {\n  _classCallCheck(this, ConfirmationPopoverOptions);\n\n  this.confirmText = 'Confirm';\n  this.cancelText = 'Cancel';\n  this.confirmButtonType = 'success';\n  this.cancelButtonType = 'outline-secondary';\n  this.placement = 'top';\n  this.hideConfirmButton = false;\n  this.hideCancelButton = false;\n  this.popoverClass = '';\n  this.appendToBody = false;\n  this.reverseButtonOrder = false;\n  this.closeOnOutsideClick = true;\n};\n\nConfirmationPopoverOptions.ɵfac = function ConfirmationPopoverOptions_Factory(t) {\n  return new (t || ConfirmationPopoverOptions)();\n};\n\nConfirmationPopoverOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ConfirmationPopoverOptions,\n  factory: ConfirmationPopoverOptions.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @internal\n */\n\n\nvar ConfirmationPopoverWindowOptions = /*#__PURE__*/function (_ConfirmationPopoverO) {\n  _inherits(ConfirmationPopoverWindowOptions, _ConfirmationPopoverO);\n\n  var _super = _createSuper(ConfirmationPopoverWindowOptions);\n\n  function ConfirmationPopoverWindowOptions() {\n    _classCallCheck(this, ConfirmationPopoverWindowOptions);\n\n    return _super.apply(this, arguments);\n  }\n\n  return ConfirmationPopoverWindowOptions;\n}(ConfirmationPopoverOptions);\n\nConfirmationPopoverWindowOptions.ɵfac = function ConfirmationPopoverWindowOptions_Factory(t) {\n  return ɵConfirmationPopoverWindowOptions_BaseFactory(t || ConfirmationPopoverWindowOptions);\n};\n\nConfirmationPopoverWindowOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ConfirmationPopoverWindowOptions,\n  factory: ConfirmationPopoverWindowOptions.ɵfac\n});\nvar ɵConfirmationPopoverWindowOptions_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(ConfirmationPopoverWindowOptions);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverWindowOptions, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @internal\n */\n\n\nvar ConfirmationPopoverWindowComponent = /*#__PURE__*/function () {\n  function ConfirmationPopoverWindowComponent(options) {\n    _classCallCheck(this, ConfirmationPopoverWindowComponent);\n\n    this.options = options;\n  }\n\n  _createClass(ConfirmationPopoverWindowComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.options.onAfterViewInit();\n    }\n  }]);\n\n  return ConfirmationPopoverWindowComponent;\n}();\n\nConfirmationPopoverWindowComponent.ɵfac = function ConfirmationPopoverWindowComponent_Factory(t) {\n  return new (t || ConfirmationPopoverWindowComponent)(ɵngcc0.ɵɵdirectiveInject(ConfirmationPopoverWindowOptions));\n};\n\nConfirmationPopoverWindowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ConfirmationPopoverWindowComponent,\n  selectors: [[\"mwl-confirmation-popover-window\"]],\n  decls: 3,\n  vars: 4,\n  consts: [[\"defaultTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [1, \"popover-arrow\", \"arrow\"], [1, \"popover-title\", \"popover-header\", 3, \"innerHTML\"], [1, \"popover-content\", \"popover-body\"], [3, \"innerHTML\"], [1, \"confirm-btns\"], [\"class\", \"confirm-btn-container\", 4, \"ngIf\"], [1, \"confirm-btn-container\"], [\"type\", \"button\", 3, \"mwlFocus\", \"innerHtml\", \"click\"]],\n  template: function ConfirmationPopoverWindowComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, ConfirmationPopoverWindowComponent_ng_template_0_Template, 8, 12, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(2, ConfirmationPopoverWindowComponent_ng_template_2_Template, 0, 0, \"ng-template\", 1);\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.options.customTemplate || _r0)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx.options));\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ɵngcc1.NgIf, FocusDirective];\n  },\n  styles: [\".popover[_ngcontent-%COMP%]{display:block}.bs-popover-bottom[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-top[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%]{left:50%}.bs-popover-left[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-right[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%]{top:calc(50% - 8px)}.btn[_ngcontent-%COMP%]{transition:none}.confirm-btns[_ngcontent-%COMP%]{display:flex;justify-content:space-around}.confirm-btn-container[_ngcontent-%COMP%]{flex-basis:50%}.confirm-btn-container[_ngcontent-%COMP%]:not(:first-child){margin-left:4px}.confirm-btn-container[_ngcontent-%COMP%]:not(:last-child){margin-right:4px}.confirm-btns-reversed[_ngcontent-%COMP%]{flex-direction:row-reverse}.confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child){margin-left:0;margin-right:4px}.confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child){margin-left:4px;margin-right:0}\"]\n});\n\nConfirmationPopoverWindowComponent.ctorParameters = function () {\n  return [{\n    type: ConfirmationPopoverWindowOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverWindowComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mwl-confirmation-popover-window',\n      template: \"<ng-template #defaultTemplate let-options=\\\"options\\\">\\n  <div\\n    [ngClass]=\\\"[\\n      'popover',\\n      options.placement,\\n      'popover-' + options.placement,\\n      'bs-popover-' + options.placement,\\n      options.popoverClass\\n    ]\\\"\\n  >\\n    <div class=\\\"popover-arrow arrow\\\"></div>\\n    <h3\\n      class=\\\"popover-title popover-header\\\"\\n      [innerHTML]=\\\"options.popoverTitle\\\"\\n    ></h3>\\n    <div class=\\\"popover-content popover-body\\\">\\n      <p [innerHTML]=\\\"options.popoverMessage\\\"></p>\\n      <div\\n        class=\\\"confirm-btns\\\"\\n        [class.confirm-btns-reversed]=\\\"options.reverseButtonOrder\\\"\\n      >\\n        <div class=\\\"confirm-btn-container\\\" *ngIf=\\\"!options.hideCancelButton\\\">\\n          <button\\n            type=\\\"button\\\"\\n            [mwlFocus]=\\\"options.focusButton === 'cancel'\\\"\\n            [class]=\\\"'btn btn-block btn-' + options.cancelButtonType\\\"\\n            (click)=\\\"options.onCancel({ clickEvent: $event })\\\"\\n            [innerHtml]=\\\"options.cancelText\\\"\\n          ></button>\\n        </div>\\n        <div class=\\\"confirm-btn-container\\\" *ngIf=\\\"!options.hideConfirmButton\\\">\\n          <button\\n            type=\\\"button\\\"\\n            [mwlFocus]=\\\"options.focusButton === 'confirm'\\\"\\n            [class]=\\\"'btn btn-block btn-' + options.confirmButtonType\\\"\\n            (click)=\\\"options.onConfirm({ clickEvent: $event })\\\"\\n            [innerHtml]=\\\"options.confirmText\\\"\\n          ></button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</ng-template>\\n<ng-template\\n  [ngTemplateOutlet]=\\\"options.customTemplate || defaultTemplate\\\"\\n  [ngTemplateOutletContext]=\\\"{ options: options }\\\"\\n>\\n</ng-template>\\n\",\n      styles: [\".popover{display:block}.bs-popover-bottom .arrow,.bs-popover-top .arrow{left:50%}.bs-popover-left .arrow,.bs-popover-right .arrow{top:calc(50% - 8px)}.btn{transition:none}.confirm-btns{display:flex;justify-content:space-around}.confirm-btn-container{flex-basis:50%}.confirm-btn-container:not(:first-child){margin-left:4px}.confirm-btn-container:not(:last-child){margin-right:4px}.confirm-btns-reversed{flex-direction:row-reverse}.confirm-btns-reversed .confirm-btn-container:not(:first-child){margin-left:0;margin-right:4px}.confirm-btns-reversed .confirm-btn-container:not(:last-child){margin-left:4px;margin-right:0}\"]\n    }]\n  }], function () {\n    return [{\n      type: ConfirmationPopoverWindowOptions\n    }];\n  }, null);\n})();\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\n\n\nvar ConfirmationPopoverDirective = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, renderer) {\n    _classCallCheck(this, ConfirmationPopoverDirective);\n\n    this.viewContainerRef = viewContainerRef;\n    this.elm = elm;\n    this.defaultOptions = defaultOptions;\n    this.cfr = cfr;\n    this.renderer = renderer;\n    /**\n     * Whether to disable showing the popover. Default `false`.\n     */\n\n    this.isDisabled = false;\n    /**\n     * Will open or show the popover when changed.\n     * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n     */\n\n    this.isOpen = false;\n    /**\n     * Will emit when the popover is opened or closed\n     */\n\n    this.isOpenChange = new EventEmitter(true);\n    /**\n     * An expression that is called when the confirm button is clicked.\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * An expression that is called when the cancel button is clicked.\n     */\n\n    this.cancel = new EventEmitter();\n    this.eventListeners = [];\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(ConfirmationPopoverDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.isOpenChange.emit(false);\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.isOpen) {\n        if (changes.isOpen.currentValue === true) {\n          this.showPopover();\n        } else {\n          this.hidePopover();\n        }\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"onConfirm\",\n    value: function onConfirm(event) {\n      this.confirm.emit(event);\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"onCancel\",\n    value: function onCancel(event) {\n      this.cancel.emit(event);\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"togglePopover\",\n    value: function togglePopover() {\n      if (!this.popover) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }, {\n    key: \"onDocumentClick\",\n    value: function onDocumentClick(event) {\n      var closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined' ? this.closeOnOutsideClick : this.defaultOptions.closeOnOutsideClick;\n\n      if (this.popover && !this.elm.nativeElement.contains(event.target) && !this.popover.location.nativeElement.contains(event.target) && closeOnOutsideClick) {\n        this.hidePopover();\n      }\n    }\n  }, {\n    key: \"showPopover\",\n    value: function showPopover() {\n      var _this = this;\n\n      if (!this.popover && !this.isDisabled) {\n        // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n        // otherwise the document click event gets fired after the click event\n        // that triggered the popover to open (no idea why this is so)\n        setTimeout(function () {\n          _this.eventListeners = [_this.renderer.listen('document', 'click', function (event) {\n            return _this.onDocumentClick(event);\n          }), _this.renderer.listen('document', 'touchend', function (event) {\n            return _this.onDocumentClick(event);\n          }), _this.renderer.listen('window', 'resize', function () {\n            return _this.positionPopover();\n          })];\n        });\n        var options = new ConfirmationPopoverWindowOptions();\n        Object.assign(options, this.defaultOptions, {\n          onConfirm: function onConfirm(event) {\n            _this.onConfirm(event);\n          },\n          onCancel: function onCancel(event) {\n            _this.onCancel(event);\n          },\n          onAfterViewInit: function onAfterViewInit() {\n            _this.positionPopover();\n          }\n        });\n        var optionalParams = ['confirmText', 'cancelText', 'placement', 'confirmButtonType', 'cancelButtonType', 'focusButton', 'hideConfirmButton', 'hideCancelButton', 'popoverClass', 'appendToBody', 'customTemplate', 'reverseButtonOrder', 'popoverTitle', 'popoverMessage'];\n        optionalParams.forEach(function (param) {\n          if (typeof _this[param] !== 'undefined') {\n            options[param] = _this[param];\n          }\n        });\n        var componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n        var childInjector = Injector.create({\n          providers: [{\n            provide: ConfirmationPopoverWindowOptions,\n            useValue: options\n          }]\n        });\n        this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n\n        if (options.appendToBody) {\n          document.body.appendChild(this.popover.location.nativeElement);\n        }\n\n        this.isOpenChange.emit(true);\n      }\n    }\n  }, {\n    key: \"positionPopover\",\n    value: function positionPopover() {\n      if (this.popover) {\n        var popoverElement = this.popover.location.nativeElement.children[0];\n        positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n      }\n    }\n  }, {\n    key: \"hidePopover\",\n    value: function hidePopover() {\n      if (this.popover) {\n        this.popover.destroy();\n        delete this.popover;\n        this.isOpenChange.emit(false);\n        this.eventListeners.forEach(function (fn) {\n          return fn();\n        });\n        this.eventListeners = [];\n      }\n    }\n  }]);\n\n  return ConfirmationPopoverDirective;\n}();\n\nConfirmationPopoverDirective.ɵfac = function ConfirmationPopoverDirective_Factory(t) {\n  return new (t || ConfirmationPopoverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ConfirmationPopoverOptions), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nConfirmationPopoverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ConfirmationPopoverDirective,\n  selectors: [[\"\", \"mwlConfirmationPopover\", \"\"]],\n  hostBindings: function ConfirmationPopoverDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverDirective_click_HostBindingHandler() {\n        return ctx.togglePopover();\n      });\n    }\n  },\n  inputs: {\n    isDisabled: \"isDisabled\",\n    isOpen: \"isOpen\",\n    popoverTitle: \"popoverTitle\",\n    popoverMessage: \"popoverMessage\",\n    confirmText: \"confirmText\",\n    cancelText: \"cancelText\",\n    placement: \"placement\",\n    confirmButtonType: \"confirmButtonType\",\n    cancelButtonType: \"cancelButtonType\",\n    focusButton: \"focusButton\",\n    hideConfirmButton: \"hideConfirmButton\",\n    hideCancelButton: \"hideCancelButton\",\n    customTemplate: \"customTemplate\",\n    popoverClass: \"popoverClass\",\n    appendToBody: \"appendToBody\",\n    reverseButtonOrder: \"reverseButtonOrder\",\n    closeOnOutsideClick: \"closeOnOutsideClick\"\n  },\n  outputs: {\n    isOpenChange: \"isOpenChange\",\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nConfirmationPopoverDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }, {\n    type: ConfirmationPopoverOptions\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: Renderer2\n  }];\n};\n\nConfirmationPopoverDirective.propDecorators = {\n  popoverTitle: [{\n    type: Input\n  }],\n  popoverMessage: [{\n    type: Input\n  }],\n  confirmText: [{\n    type: Input\n  }],\n  cancelText: [{\n    type: Input\n  }],\n  placement: [{\n    type: Input\n  }],\n  confirmButtonType: [{\n    type: Input\n  }],\n  cancelButtonType: [{\n    type: Input\n  }],\n  focusButton: [{\n    type: Input\n  }],\n  hideConfirmButton: [{\n    type: Input\n  }],\n  hideCancelButton: [{\n    type: Input\n  }],\n  isDisabled: [{\n    type: Input\n  }],\n  isOpen: [{\n    type: Input\n  }],\n  customTemplate: [{\n    type: Input\n  }],\n  isOpenChange: [{\n    type: Output\n  }],\n  confirm: [{\n    type: Output\n  }],\n  cancel: [{\n    type: Output\n  }],\n  popoverClass: [{\n    type: Input\n  }],\n  appendToBody: [{\n    type: Input\n  }],\n  reverseButtonOrder: [{\n    type: Input\n  }],\n  closeOnOutsideClick: [{\n    type: Input\n  }],\n  togglePopover: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mwlConfirmationPopover]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ConfirmationPopoverOptions\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    isDisabled: [{\n      type: Input\n    }],\n    isOpen: [{\n      type: Input\n    }],\n    isOpenChange: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n\n    /**\n     * @internal\n     */\n    togglePopover: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    popoverTitle: [{\n      type: Input\n    }],\n    popoverMessage: [{\n      type: Input\n    }],\n    confirmText: [{\n      type: Input\n    }],\n    cancelText: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    confirmButtonType: [{\n      type: Input\n    }],\n    cancelButtonType: [{\n      type: Input\n    }],\n    focusButton: [{\n      type: Input\n    }],\n    hideConfirmButton: [{\n      type: Input\n    }],\n    hideCancelButton: [{\n      type: Input\n    }],\n    customTemplate: [{\n      type: Input\n    }],\n    popoverClass: [{\n      type: Input\n    }],\n    appendToBody: [{\n      type: Input\n    }],\n    reverseButtonOrder: [{\n      type: Input\n    }],\n    closeOnOutsideClick: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n\n\nvar FocusDirective = /*#__PURE__*/function () {\n  function FocusDirective(elm) {\n    _classCallCheck(this, FocusDirective);\n\n    this.elm = elm;\n  }\n\n  _createClass(FocusDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.mwlFocus && this.mwlFocus === true) {\n        this.elm.nativeElement.focus();\n      }\n    }\n  }]);\n\n  return FocusDirective;\n}();\n\nFocusDirective.ɵfac = function FocusDirective_Factory(t) {\n  return new (t || FocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFocusDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FocusDirective,\n  selectors: [[\"\", \"mwlFocus\", \"\"]],\n  inputs: {\n    mwlFocus: \"mwlFocus\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nFocusDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nFocusDirective.propDecorators = {\n  mwlFocus: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mwlFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    mwlFocus: [{\n      type: Input\n    }]\n  });\n})();\n\nvar USER_OPTIONS = new InjectionToken('confirmation popover user options');\n\nfunction optionsFactory(userOptions) {\n  var options = new ConfirmationPopoverOptions();\n  Object.assign(options, userOptions);\n  return options;\n}\n\nvar ConfirmationPopoverModule = /*#__PURE__*/function () {\n  function ConfirmationPopoverModule() {\n    _classCallCheck(this, ConfirmationPopoverModule);\n  }\n\n  _createClass(ConfirmationPopoverModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: ConfirmationPopoverModule,\n        providers: [{\n          provide: USER_OPTIONS,\n          useValue: options\n        }, {\n          provide: ConfirmationPopoverOptions,\n          useFactory: optionsFactory,\n          deps: [USER_OPTIONS]\n        }]\n      };\n    }\n  }]);\n\n  return ConfirmationPopoverModule;\n}();\n\nConfirmationPopoverModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ConfirmationPopoverModule\n});\nConfirmationPopoverModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ConfirmationPopoverModule_Factory(t) {\n    return new (t || ConfirmationPopoverModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ConfirmationPopoverModule, {\n    declarations: function declarations() {\n      return [ConfirmationPopoverDirective, ConfirmationPopoverWindowComponent, FocusDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ConfirmationPopoverDirective, FocusDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ConfirmationPopoverDirective, ConfirmationPopoverWindowComponent, FocusDirective],\n      imports: [CommonModule],\n      exports: [ConfirmationPopoverDirective, FocusDirective],\n      entryComponents: [ConfirmationPopoverWindowComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angular-confirmation-popover\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ConfirmationPopoverDirective, ConfirmationPopoverModule, FocusDirective, USER_OPTIONS as ɵa, optionsFactory as ɵb, ConfirmationPopoverOptions as ɵc, ConfirmationPopoverWindowComponent as ɵd, ConfirmationPopoverWindowOptions as ɵe };","map":{"version":3,"sources":["../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-options.provider.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-window-options.provider.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-window.component.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover.directive.ts","../../../projects/angular-confirmation-popover/src/lib/focus.directive.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover.module.ts","../../../projects/angular-confirmation-popover/src/public-api.ts","../../../projects/angular-confirmation-popover/src/angular-confirmation-popover.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface ConfirmationPopoverOptionsInterface {\n  /**\n   * The popover title\n   */\n  popoverTitle?: string;\n\n  /**\n   * The popover message\n   */\n  popoverMessage?: string;\n\n  /**\n   * The popover confirmation button text\n   */\n  confirmText?: string;\n\n  /**\n   * The popover cancel button text\n   */\n  cancelText?: string;\n\n  /**\n   * The popover confirm button type e.g. `success`, `danger` etc\n   */\n  confirmButtonType?: string;\n\n  /**\n   * The popover cancel button type  e.g. `success`, `danger` etc\n   */\n  cancelButtonType?: string;\n\n  /**\n   * The popover placement. Can be `top`, `bottom`, `left`, `right`\n   */\n  placement?: string;\n\n  /**\n   * Which button to cancel. Can be either `confirm` or `cancel`\n   */\n  focusButton?: string;\n\n  /**\n   * Whether to hide the confirmation button\n   */\n  hideConfirmButton?: boolean;\n\n  /**\n   * Whether to hide the cancel button\n   */\n  hideCancelButton?: boolean;\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  popoverClass?: string;\n\n  /**\n   * Whether to append the popover to the document body\n   */\n  appendToBody?: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  reverseButtonOrder?: boolean;\n\n  /**\n   * Whether or not the popover should stay open when clicking outside it\n   */\n  closeOnOutsideClick?: boolean;\n}\n\n@Injectable()\nexport class ConfirmationPopoverOptions\n  implements ConfirmationPopoverOptionsInterface {\n  popoverTitle: string;\n  popoverMessage: string;\n  confirmText: string = 'Confirm';\n  cancelText: string = 'Cancel';\n  confirmButtonType: string = 'success';\n  cancelButtonType: string = 'outline-secondary';\n  placement: string = 'top';\n  focusButton: string;\n  hideConfirmButton: boolean = false;\n  hideCancelButton: boolean = false;\n  popoverClass: string = '';\n  appendToBody: boolean = false;\n  reverseButtonOrder: boolean = false;\n  closeOnOutsideClick: boolean = true;\n}\n","import { ConfirmCancelEvent } from './confirmation-popover.directive';\nimport { Injectable, TemplateRef } from '@angular/core';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\n\n/**\n * @internal\n */\n@Injectable()\nexport class ConfirmationPopoverWindowOptions extends ConfirmationPopoverOptions {\n  onConfirm: (event: ConfirmCancelEvent) => void;\n  onCancel: (event: ConfirmCancelEvent) => void;\n  onAfterViewInit: () => void;\n  customTemplate: TemplateRef<any>;\n}\n","import { Component, AfterViewInit } from '@angular/core';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\n\n/**\n * @internal\n */\n@Component({\n  selector: 'mwl-confirmation-popover-window',\n  styleUrls: ['./confirmation-popover-window.component.scss'],\n  templateUrl: './confirmation-popover-window.component.html',\n})\nexport class ConfirmationPopoverWindowComponent implements AfterViewInit {\n  constructor(public options: ConfirmationPopoverWindowOptions) {}\n\n  ngAfterViewInit(): void {\n    this.options.onAfterViewInit();\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  Injector,\n  ComponentFactoryResolver,\n  Renderer2,\n  TemplateRef,\n  ComponentFactory,\n  SimpleChanges,\n} from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\nimport { positionElements } from 'positioning';\n\n/**\n * @internal\n */\nexport interface ConfirmCancelEvent {\n  clickEvent: MouseEvent;\n}\n\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\n@Directive({\n  selector: '[mwlConfirmationPopover]',\n})\nexport class ConfirmationPopoverDirective\n  implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The title of the popover\n   */\n  @Input() popoverTitle: string;\n\n  /**\n   * The body text of the popover.\n   */\n  @Input() popoverMessage: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n  @Input() confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n  @Input() cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n  @Input() placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n  @Input() confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n  @Input() cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n  @Input() focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n  @Input() hideConfirmButton: boolean;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n  @Input() hideCancelButton: boolean;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n  @Input() isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n  @Input() isOpen: boolean = false;\n\n  /**\n   * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n   * ```html\n   * <ng-template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </ng-template>\n   * ```\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n  @Input() customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n  @Output() confirm: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n  @Output() cancel: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  @Input() popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n  @Input() appendToBody: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  @Input() reverseButtonOrder: boolean;\n\n  /**\n   * Determines whether or not the popover should stay open even when clicking outside of it\n   */\n  @Input() closeOnOutsideClick: boolean;\n\n  /**\n   * @internal\n   */\n  popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n\n  private eventListeners: (() => void)[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onConfirm(event: ConfirmCancelEvent) {\n    this.confirm.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onCancel(event: ConfirmCancelEvent) {\n    this.cancel.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  @HostListener('click')\n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  private onDocumentClick(event: Event): void {\n    const closeOnOutsideClick =\n      typeof this.closeOnOutsideClick !== 'undefined'\n        ? this.closeOnOutsideClick\n        : this.defaultOptions.closeOnOutsideClick;\n    if (\n      this.popover &&\n      !this.elm.nativeElement.contains(event.target) &&\n      !this.popover.location.nativeElement.contains(event.target) &&\n      closeOnOutsideClick\n    ) {\n      this.hidePopover();\n    }\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n      // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n      // otherwise the document click event gets fired after the click event\n      // that triggered the popover to open (no idea why this is so)\n      setTimeout(() => {\n        this.eventListeners = [\n          this.renderer.listen('document', 'click', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('document', 'touchend', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('window', 'resize', () =>\n            this.positionPopover()\n          ),\n        ];\n      });\n\n      const options = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        onConfirm: (event: ConfirmCancelEvent): void => {\n          this.onConfirm(event);\n        },\n        onCancel: (event: ConfirmCancelEvent): void => {\n          this.onCancel(event);\n        },\n        onAfterViewInit: (): void => {\n          this.positionPopover();\n        },\n      });\n\n      const optionalParams: (keyof ConfirmationPopoverDirective)[] = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate',\n        'reverseButtonOrder',\n        'popoverTitle',\n        'popoverMessage',\n      ];\n      optionalParams.forEach((param) => {\n        if (typeof this[param] !== 'undefined') {\n          (options as any)[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<ConfirmationPopoverWindowComponent> = this.cfr.resolveComponentFactory(\n        ConfirmationPopoverWindowComponent\n      );\n      const childInjector = Injector.create({\n        providers: [\n          {\n            provide: ConfirmationPopoverWindowOptions,\n            useValue: options,\n          },\n        ],\n      });\n      this.popover = this.viewContainerRef.createComponent(\n        componentFactory,\n        this.viewContainerRef.length,\n        childInjector\n      );\n      if (options.appendToBody) {\n        document.body.appendChild(this.popover.location.nativeElement);\n      }\n      this.isOpenChange.emit(true);\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement = this.popover.location.nativeElement.children[0];\n      positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      delete this.popover;\n      this.isOpenChange.emit(false);\n      this.eventListeners.forEach((fn) => fn());\n      this.eventListeners = [];\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n@Directive({\n  selector: '[mwlFocus]',\n})\nexport class FocusDirective implements OnChanges {\n  @Input() mwlFocus: boolean;\n\n  constructor(private elm: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.mwlFocus && this.mwlFocus === true) {\n      this.elm.nativeElement.focus();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmationPopoverDirective } from './confirmation-popover.directive';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { FocusDirective } from './focus.directive';\nimport {\n  ConfirmationPopoverOptions,\n  ConfirmationPopoverOptionsInterface,\n} from './confirmation-popover-options.provider';\n\nexport const USER_OPTIONS: InjectionToken<string> = new InjectionToken(\n  'confirmation popover user options'\n);\n\nexport function optionsFactory(\n  userOptions: ConfirmationPopoverOptions\n): ConfirmationPopoverOptions {\n  const options = new ConfirmationPopoverOptions();\n  Object.assign(options, userOptions);\n  return options;\n}\n\n@NgModule({\n  declarations: [\n    ConfirmationPopoverDirective,\n    ConfirmationPopoverWindowComponent,\n    FocusDirective,\n  ],\n  imports: [CommonModule],\n  exports: [ConfirmationPopoverDirective, FocusDirective],\n  entryComponents: [ConfirmationPopoverWindowComponent],\n})\nexport class ConfirmationPopoverModule {\n  static forRoot(\n    options: ConfirmationPopoverOptionsInterface = {}\n  ): ModuleWithProviders<ConfirmationPopoverModule> {\n    return {\n      ngModule: ConfirmationPopoverModule,\n      providers: [\n        {\n          provide: USER_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: ConfirmationPopoverOptions,\n          useFactory: optionsFactory,\n          deps: [USER_OPTIONS],\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of angular-confirmation-popover\n */\n\nexport { ConfirmationPopoverModule } from './lib/confirmation-popover.module';\nexport { ConfirmationPopoverDirective } from './lib/confirmation-popover.directive';\nexport { FocusDirective } from './lib/focus.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ConfirmationPopoverOptions as ɵc} from './lib/confirmation-popover-options.provider';\nexport {ConfirmationPopoverWindowOptions as ɵe} from './lib/confirmation-popover-window-options.provider';\nexport {ConfirmationPopoverWindowComponent as ɵd} from './lib/confirmation-popover-window.component';\nexport {USER_OPTIONS as ɵa,optionsFactory as ɵb} from './lib/confirmation-popover.module';"]},"metadata":{},"sourceType":"module"}